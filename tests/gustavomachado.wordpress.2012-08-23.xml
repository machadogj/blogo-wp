<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.2" created="2012-08-23 18:35" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Gustavo Machado</title>
	<link>http://machadogj.com</link>
	<description>...gustavo machado&#039;s development blog...</description>
	<pubDate>Thu, 23 Aug 2012 18:35:16 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://machadogj.com</wp:base_site_url>
	<wp:base_blog_url>http://machadogj.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>machadogj</wp:author_login><wp:author_email>machadogj@gmail.com</wp:author_email><wp:author_display_name><![CDATA[machadogj]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.3.2</generator>

	<item>
		<title>Hello world!</title>
		<link>http://machadogj.com/2009/04/hello-world-2/</link>
		<pubDate>Thu, 30 Apr 2009 17:05:11 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/2009/04/30/hello-world/</guid>
		<description></description>
		<content:encoded><![CDATA[As the name implies this is my first post, my name is Gustavo Machado and I am a .NET developer from Argentina. I figured I'd create a blog to share some of my experiences in the field, and why not keep them in one place. Hopefully you will find some of this stuff useful.

I have been working for a few years with .NET technologies, and different SW development methodologies. I've worked with the well known cascade development model, with prototyped, and now I am working with Scrum, all them with their advantages and disadvantages.

My next chanllenge will be to start working in a more Test Driven fashion (TDD), so I will keep posting my findings regarding this.

Cheers!

Gus]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2009-04-30 17:05:11</wp:post_date>
		<wp:post_date_gmt>2009-04-30 17:05:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[1CEOs9dcASIW]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Structuring your source code</title>
		<link>http://machadogj.com/2009/09/structuring-your-source-code/</link>
		<pubDate>Sat, 05 Sep 2009 16:10:08 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[Probably one of the first things I do when I start up a project is to get my repository and build up my basic structure. It seems easier than it actually is to do this, and I've seen a lot of different ways to do this, most of them being valid. So here I show you how I structure my projects:

[caption id="attachment_14" align="alignnone" width="251" caption="Project Basic Structure"]<img class="size-full wp-image-14" title="project-structure" src="http://machadogj.com/wp-content/uploads/2009/09/svn-structure.png" alt="Project Basic Structure" width="251" height="292" />[/caption]

I usually use SVN because it makes working offline very easy. If I were to work on a centralized team (all the members in one office), and I were to have the option of using TFS, I would go for TFS in that case, but not because I consider it's a better source control solution, but because it makes it easier to integrate the code with all the other features that come with VS Team Edition.

I will briefly explain each of the folder's purpose.
<ul>
	<li>Doc: self-explanatory, contains projects documents. The very least this folder should have are: Project Overview document and Architecture document.</li>
	<li>branches: I use this folder for temporary, or experimental work on the product. An example of temporary work could be a parallel work, or enhancement that want to merge to the trunk later. Experimental work could be to try a new feature or framework to see how it works, and then disregard this branch for the rest of the project.</li>
	<li>tags: this is actually much more important than it seems (maybe the most important of them all). I wouldn't even think of making a deployment without tagging the version I am dropping. This is where you will go to retrieve your code whenever a critical bug appears on production.</li>
	<li>trunk: finally, the one we all know, the actual trunk of the source code. Here is where all of you source code will rest. This is where we work most of the time, and where we commit the incremental changes.</li>
	<li>db: as you can see, this folder is INSIDE the trunk, and suggests that it's where the database is. That's right, versioning the database is as important as versioning the code itself (<a title="Database Version Control introduction" href="http://thegsharp.wordpress.com/2009/09/20/database-version-control-introduction/" target="_blank">more on this on post</a>). Why am I choosing this place for the database? Because when we tag a version (due to a deployment for instance), we need that tag to contain the database. So by tagging the trunk, you will have everything you need to reproduce that version's environment.</li>
	<li>lib: sometimes we need libraries for our projects, and many times we need to change the code of those libraries. Here is where those projects will rest. Another interesting example of what we could put in here are libraries which we use to either build or test our project, such as Nant and Nunit. The reason for putting these libraries here is so that everyone in the team tests, and builds with the same version.</li>
	<li>src: nothing more, nothing less than the code itself. If this were a visual studio's solution, here would be the sln file ;)</li>
	<li>srccompany.name.module: this would be a visual studio project, and it doesn't have to be a module, could be anything, however, I would stick to the company.name.* naming convention.</li>
	<li>srccompany.namemoduletests: again no need to be a module, however, for every "testable" project, I would put the unit tests in a separate project, following some kind of naming like the one here.</li>
	<li>srcreferences: making reference to visual studio project's references, this folder contains all the external dlls for which the code is not in our solution.</li>
</ul>
If you have any suggestions, or improvements, I would like to here them, and even add them to this post!

Gus]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2009-09-05 16:10:08</wp:post_date>
		<wp:post_date_gmt>2009-09-05 16:10:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structuring-your-source-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cm"><![CDATA[CM]]></category>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[SVN]]></category>
		<category domain="post_tag" nicename="tfs"><![CDATA[TFS]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630244]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[3UxphxpplUPS]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Must-have development documents &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/09/11/must-have-development-documents/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.141</wp:comment_author_IP>
			<wp:comment_date>2009-09-13 21:59:50</wp:comment_date>
			<wp:comment_date_gmt>2009-09-13 21:59:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Management, Project Management, Software Development |   Following with my previous post about the basic structure of source control, I said that it is very important to have a &#8220;Documents&#8221; folder. In that post, I also [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Basic build script with NAnt &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/09/14/basic-build-script-with-nant/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.151</wp:comment_author_IP>
			<wp:comment_date>2009-09-14 15:56:33</wp:comment_date>
			<wp:comment_date_gmt>2009-09-14 15:56:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] you used the structure I recommended in my previous post about structuring your source code folders (or similar), then you must have a &#8220;lib&#8221; folder right next to your &#8220;src&#8221; [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[martinskemme]]></wp:comment_author>
			<wp:comment_author_email>martins.kemme@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.232.182.4</wp:comment_author_IP>
			<wp:comment_date>2009-09-18 15:13:37</wp:comment_date>
			<wp:comment_date_gmt>2009-09-18 15:13:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How do you structure db/ folder?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302545]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.72.162</wp:comment_author_IP>
			<wp:comment_date>2009-09-19 16:13:59</wp:comment_date>
			<wp:comment_date_gmt>2009-09-19 16:13:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Martins, the DB folder is a bit tricky because you have to settle on a database versioning scheme. As far as I know there are three possible schemes, each with it's own structure. The easiest way to keep your db versioned is to keep backups of your database. In this case you don't really need any folders, you just keep the .bak file, and maybe a "scripts" folder for common tasks such as clean up. For other versioning schemes, the thing gets a little more complex. I will be making a post on database versioning in short. If you want, let me know how you plan to version your database, and I'll give you my thoughts.
Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302545]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302600]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.72.162</wp:comment_author_IP>
			<wp:comment_date>2009-09-20 20:52:27</wp:comment_date>
			<wp:comment_date_gmt>2009-09-20 20:52:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Martins, you can check out my first post about Database Versioning for further information: http://thegsharp.wordpress.com/2009/09/20/database-versioning-part-1
Regards!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302545]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302615]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[SVN Externals &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/10/15/svn-externals/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.188</wp:comment_author_IP>
			<wp:comment_date>2009-10-15 19:33:45</wp:comment_date>
			<wp:comment_date_gmt>2009-10-15 19:33:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] let’s try to improve our source code structure using externals. If you followed my previous post about code structure, or if you have a similar structure you should have something like this: SVN basic [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Running NUnit from the console &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/10/27/running-nunit-from-the-console/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.159</wp:comment_author_IP>
			<wp:comment_date>2009-10-27 22:34:37</wp:comment_date>
			<wp:comment_date_gmt>2009-10-27 22:34:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I have pointed in the post about basic structure for our source code, I showed a very common practice when it comes to unit tests projects which is to name the project [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Must-have development documents</title>
		<link>http://machadogj.com/2009/09/must-have-development-documents/</link>
		<pubDate>Fri, 11 Sep 2009 16:20:18 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[Following with my previous post about the <a title="Structuring your source code " href="http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/" target="_blank">basic structure of source control</a>, I said that it is very important to have a "Documents" folder. In that post, I also recommended to put the Architecture and Project Overview documents in this folder. I figured I'd further explain some of my favorite documents:
<ul>
	<li>Project Overview</li>
	<li>Architecture</li>
	<li>Release notes</li>
	<li>Roadmap</li>
</ul>
These are not the only ones I consider important, nevertheless,  I feel they really help to set the course for us developers to start doing our jobs!

<strong>Project Overview</strong>

This is the first document I like to read before digging into the code. At the earliest stages of the software development process, we usually get to know the domain of the application (analysis), and extract the domain's vocabulary. If we did this, then our code should be designed to reflect this domain and using it's vocabulary, thus making it very important for people joining the project to be aware of the domain.

Apart from the domain itself, the project overview should describe the purpose and goal of building the system. Knowing this, contributors of the project can think and propose better ways to achieve this goal, or even new features which can enrich the project, both from a technical or commercial perspective.

This document shouldn't be extense, and it might even be better to make it a slide presentation, because even though we want to know the domain, we developers are eager to dig into the code!

<strong>Architecture Document</strong>

The second document which can help speed up our understanding of a project, is the architecture document. I've seen many architecture documents, and none of them were similar. Most of the times, this document's goal is to show the customer how the system will be structured, in early stages of the development process; and depending on the client, and the project, there are a lots of different things we could include in this document.

Regardless of the structure and content of this document, I think reading this document should be helpful for every developer in the team. As a developer I want to see the following things:
<ul>
	<li>Programming Language (including version).</li>
	<li>Database engine.</li>
	<li>Frameworks and libraries with it's links to documentation.</li>
	<li>Project sub-systems.</li>
	<li>Project components.</li>
	<li>Project layers and each layer's responsibility.</li>
	<li>Deployment model.</li>
</ul>
A note on sub-systems and components, is that we should consider sub-systems as parts of the system that could stand alone, without the rest of the project. Components on the other hand, are parts of the system that have a clear goal, but which needs of other components in order to add value to the system. An example of a sub-system, could be a "messaging sub-system" inside a social networking portal. When a possible example of a component could be an "encryption component" inside a membership provider.

<strong>Release notes</strong>

One of the basic documents in configuration management. It's goal is to describe a certain version. I find this document extremely useful when it's properly used. It's the file I would send to the customer every time I deliver a piece of code. This are some of the things I would like to find in this document:
<ul>
	<li>Version!! If we tagged the version in the source control, then I don't see a reason to include the changeset/revision.</li>
	<li>Description of the release.</li>
	<li>List of features added from the previous version.</li>
	<li>Historical features.</li>
	<li>List of known issues. (unresolved bugs).</li>
	<li>Installation guide.</li>
</ul>
<strong>Roadmap</strong>

This is actually one of my favourite documents. I find this document very important in helping us know where we are standing, and what the customers expectations of functionality in the short and long term are. Maybe this document is more of a "Project management" document than a development-related document, however, it is always good to keep customer's priorities in mind.

Another thing that I get from this document is how well we know the customer needs. If we can't manage to get a decent Roadmap, then we are failing to understand the customer's need, and that's not cool. On the other hand, if we do manage to get a decent roadmap, but this roadmap changes too often, then the customer is failing at setting their own goals.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2009-09-11 16:20:18</wp:post_date>
		<wp:post_date_gmt>2009-09-11 16:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>must-have-development-documents</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="project-management"><![CDATA[Project Management]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[documents-you-cant-miss]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[g4VKbQ0eChdp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Basic build script with NAnt</title>
		<link>http://machadogj.com/2009/09/basic-build-script-with-nant/</link>
		<pubDate>Mon, 14 Sep 2009 15:56:30 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will show you how to create a build script for a VS solution using NAnt. NAnt is a free .NET build tool inspired in the JAVA version ANT. <a title="Nant" href="http://nant.sourceforge.net/" target="_blank">Here</a> is the link to the website, where you can get the latest stable version.

First things first, why would I want a script to build my projects, when I could just hit F5 from visual studio? In a very simple project, you may not need to create a script, but on bigger projects, it comes very handy when automating tasks such as package generation, assembly versioning, and even deployment! Apart from that which is not little, when used with a continuous integration tool (such as cruise control .net), you can build, run tests and even calculate the coverage of your project after each commit.

If you used the structure I recommended in my previous post about <a title="Structuring your source code " href="http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/" target="_blank">structuring your source code folders</a> (or similar), then you must have a "lib" folder right next to your "src" folder. This is where I unzipped the Nant's content, inside a folder called "NAnt 0.86".

There are three different ways to build your solution from an NAnt script, and these are:
<ul>
	<li>Running a shell comand through the "exec" NAnt task.</li>
	<li>By adding a "solution" task, which is a task provided by the NAnt that compiles VS solutions. Unfortunately this task doesn't support the newer versions of Visual Studio such as 2008. When using this task, you may get  two errors: "Failed to initialize the 'Microsoft .NET Framework 2.0'" which you can solve downloading the latest version from <a title="Nightly Latest build of Nant." href="http://nant.sourceforge.net/nightly/latest/" target="_blank">http://nant.sourceforge.net/nightly/latest/</a>; and "Solution format of file 'd:SVN.......sln' is not supported" in which case you are doomed, and should go with the next option.</li>
	<li>Using the NAnt contrib's task "msbuild". This is the one I will be using in this post.</li>
</ul>
Download the NAnt contrib library from <a title="Nant Contrib" href="http://nantcontrib.sourceforge.net/" target="_blank">http://nantcontrib.sourceforge.net/</a>, and extract the content to the folder next to NAnt 0.86 inside the lib folder. So basically our folders should look like this:

[caption id="attachment_33" align="alignnone" width="160" caption="nant folders"]<img class="size-full wp-image-33" title="nant" src="http://machadogj.com/wp-content/uploads/2009/09/nant1.png" alt="nant" width="160" height="169" />[/caption]

So now we are going to create the build script inside our trunk folder. NAnt scripts are xml documents, usually with a build extension. I will call my file newProject.build, and it looks like this:

[caption id="attachment_63" align="alignnone" width="480" caption="basic build file"]<img class="size-full wp-image-63" title="basic nant build file" src="http://machadogj.com/wp-content/uploads/2009/10/buildfile1.png" alt="basic nant build file" width="480" height="241" />[/caption]

<span style="color:#0000ff;font-size:x-small;"><span style="color:#0000ff;font-size:x-small;"> </span></span>

Let's go through the file tag by tag.
<ul>
	<li>Project. This is the root element of the build file. Notice the default attribute is set to build. This means that when you run NAnt without any target parameters, it will use the "build" target as default.</li>
	<li>Property. This are properties you can use later in the configuration. Using properties instead of typing the code in the script will help you when modifying the script, so you don't have to search &amp; replace the whole file. Notice how the "lib.nant.contrib" property uses the "root.dir" property through ${root.dir}. That is how you will reference your properties throughout the rest of your script.</li>
	<li>Target. This is what gets executed when calling NAnt. Here you can have a series of tasks that will be executed. Our first task is a "loadtasks" task, that given a certain dll searches for NAnt tasks. In this case, we are passing the NAnt.Contrib.Tasks.dll, which contains the "msbuild" tasks (amongst others).</li>
	<li>msbuild. This is the NAnt contrib's task that will call msbuild to build our solution. See how we can set the Configuration and Platform properties.</li>
</ul>
Running the script

In order to run the script we need to execute the nant.exe program which resides in the lib folder. In order to do this, I usually create a batch file with the call to this program. So in our case, I would create a build.bat file inside the "trunk" folder and place the following: ".libnAnt 0.86nant.exe". Notice that we are running nant.exe from the trunk, so nant.exe will search for *.build files and execute the first. Because we are not passing any arguments, the default target "build" is called. In order to specify the build file we use the /f argument, and we also specify the target we want to execute: ".libnAnt 0.86nant.exe /f:newProject.build build". You can add a line to the batch file to be able to see the output with a "pause" command.

Now that you know how to create and run NAnt scripts, it would be nice to have intellisense in Visual Studio. So you can take a quick look at this <a title="nant intellisense for visual studio" href="http://blogs.dovetailsoftware.com/blogs/kmiller/archive/2007/10/29/intellisense-for-editing-nant-build-scripts.aspx" target="_blank">post</a> on how achieve this. One quick note on this is to make sure that you have the right schema name in your build file.  The xmlns value of the project tag in your build file, should match the xmlns:nant field of the nant.xsd.

Conclusion

We have added both NAnt and NAnt Contrib to a place where the entire team has access, so now everyone on the team will be using the same versions. Then we created a simple build file which builds our solution, and provided a batch file for simplicity.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2009-09-14 15:56:30</wp:post_date>
		<wp:post_date_gmt>2009-09-14 15:56:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basic-build-script-with-nant</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="build-automation"><![CDATA[build automation]]></category>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="msbuild"><![CDATA[msbuild]]></category>
		<category domain="post_tag" nicename="nant"><![CDATA[NAnt]]></category>
		<category domain="post_tag" nicename="nant-contrib"><![CDATA[Nant contrib]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630282]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ZYC0brT6u4M1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[sebastian]]></wp:comment_author>
			<wp:comment_author_email>sdgarcia@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.139.215.26</wp:comment_author_IP>
			<wp:comment_date>2009-10-01 21:50:52</wp:comment_date>
			<wp:comment_date_gmt>2009-10-01 21:50:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Gustavo, thank you for the simplicity of this explanation. I've never used NAnt, but after this post I will give a try.
This help me and probably a lot of others who feel themselves a little left behind on continuous Integration.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302565]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Database Version Control - Introduction</title>
		<link>http://machadogj.com/2009/09/database-version-control-introduction/</link>
		<pubDate>Sun, 20 Sep 2009 20:48:08 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[Back in my post about <a title="Structuring your source code" href="../2009/09/05/structuring-your-source-code/" target="_blank">structuring your source code</a>, I recommended to have a “DB” folder where you can keep your database.  This is actually one of my favorite topics of configuration management, and the reason for this is that I realized how many companies and projects don’t keep their database under version control.
<h2>DB folder content</h2>
The folders that will rest inside the “DB” depend on each of the different database versioning schemes. Nevertheless, I would recommend having a “common scripts” folder where you can store common tasks you usually perform in your database. Examples of the scripts I usually store there are: clean up scripts, testing users, and testing data/configuration.
<h2>Database versioning schemes</h2>
I have come across with three different ways of versioning a database:
<ol>
	<li><a title="Database Version Control using backups" href="http://thegsharp.wordpress.com/2009/09/23/database-version-control-using-backups/" target="_blank">Store a backup of the database each time you modify      something.</a></li>
	<li>Store “incremental changes” scripts.</li>
	<li>Use the Database project type shipped with Visual      Studio Team Edition.</li>
</ol>
There is probably a forth option which would be to keep the database in xml files. This is more common when using certain ORM frameworks. Unfortunately I have never worked with such a scheme :s.

Regardless of the scheme that suites you better, I strongly recommend to keep the database under version control.

This is just the first of a series of posts I will be doing about Database Version Control, and the next posts will describe each of the schemes I have worked with.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2009-09-20 20:48:08</wp:post_date>
		<wp:post_date_gmt>2009-09-20 20:48:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>database-version-control-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="database-version-control"><![CDATA[Database Version Control]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[database-versioning-part-1-%e2%80%93-using-database-backups]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[database-versioning-part-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[database-versioning-introduction]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630236]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[7cRkDsEgBSX1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Structuring your source code &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.187</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 19:49:42</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 19:49:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is. That&#8217;s right, versioning the database is as important as versioning the code itself (more on this on post). Why am I choosing this place for the database? Because when we tag a version (due to a deployment [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Savannah]]></wp:comment_author>
			<wp:comment_author_email>savannah5nd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://brazil.mcneel.com/members/TerrySims.aspx</wp:comment_author_url>
			<wp:comment_author_IP>69.137.209.138</wp:comment_author_IP>
			<wp:comment_date>2009-10-17 07:21:45</wp:comment_date>
			<wp:comment_date_gmt>2009-10-17 07:21:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome blog!

I thought about starting my own blog too but I'm just too lazy so, I guess I<a HREF="http://community.fox8.com/_Real-Estate-Mutual-Funds/blog/998171/92757.html" rel="nofollow">'</A>ll just have to keep checking yours out<a HREF="http://www.xbox360achievements.org/forum/member.php?u=245385" rel="nofollow">.</A>
LOL,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302542]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Database Version Control - Using backups</title>
		<link>http://machadogj.com/2009/09/database-version-control-using-backups/</link>
		<pubDate>Wed, 23 Sep 2009 13:38:49 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In this post I will describe probably the easiest one of the database version control schemes, which uses backups in order to keep the different versions of the database along with the code.</p>
<h2>Workflow</h2>
<p>When making a change to a database, you need to follow these steps:</p>
<ol>
<li>Get the latest backup from the source control.</li>
<li>Restore the database.</li>
<li>Apply the changes.</li>
<li>Update the version of the database in a “Version”      table. (this step is optional but recommended)</li>
<li>Perform a backup.</li>
<li>Commit the new backup overriding the previous file.</li>
</ol>
<p>The “Version” table to which I made reference in step 4, it’s a table that keeps either the history of the different versions, or the current version of the database in one record. In case you want to have the history of the changes made, you could have columns such as: version, date created, created by and description.</p>
<p>Note: In case you are using an ORM framework for your data access, then you should include the tasks necessary to update the ORM code in order to commit <strong>everything together</strong>.</p>
<h2>Advantages</h2>
<ul>
<li>Easy. It is pretty straight forward and very easy to      use and learn.</li>
<li>Easy to automate. In most database engines you can      perform backups and restores from a command line, making this process even      more easy and automated.</li>
</ul>
<h2>Disadvantages</h2>
<ul>
<li>Clean ups in every update. Because you have to perform      a restore you will lose all the data (testing data probably) every time      you want to update your database.</li>
<li>If somebody updated the database while you were making      a change yourself, then you will have to merge the two databases.</li>
<li>Data migration problems. This is a common problem to      most database versioning mechanisms. It can happen in two different      situations, first developers merging their databases with the latest      version may require migrating data from one table to another in order not      to lose what they have locally. Second it will most likely happen upon      every Release.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2009-09-23 13:38:49</wp:post_date>
		<wp:post_date_gmt>2009-09-23 13:38:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>database-version-control-using-backups</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="database-version-control"><![CDATA[Database Version Control]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[lN8ZEU49EbcI]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630233]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Database Version Control &#8211; Introduction &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/09/20/database-version-control-introduction/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.209</wp:comment_author_IP>
			<wp:comment_date>2009-09-29 19:52:57</wp:comment_date>
			<wp:comment_date_gmt>2009-09-29 19:52:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Store a backup of the database each time you modify something. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>SVN Externals</title>
		<link>http://machadogj.com/2009/10/svn-externals/</link>
		<pubDate>Thu, 15 Oct 2009 19:33:26 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Improving your source code structure with SVN Externals</strong>

Svn "externals" is an SVN property of folders, which you can use to set external links. By doing this, you avoid having to copy the same folder in multiple locations, and you get to make changes only once and in only one place.

There are two ways to set an SVN property, through the command line or (if your svn client supports it) through the UI. In this case I will show you how to set the properties through the UI of the TortoiseSVN (my favorite SVN client).

First of all, you have to decide the folder of reference. Inside this reference folder you will have the external links. The syntax is as follows:

pathRelativeToYourFolder http://svnpathtoexternallink

So, first you put the path relative to the folder you right-clicked, and then the SVN url to the “external link” folder. As simple as that you can add external links to all your project folders.

Now let’s try to improve our source code structure using externals. If you followed my previous <a title="Structuring your source code" href="http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/" target="_blank">post about code structure</a>, or if you have a similar structure you should have something like this:

[caption id="attachment_58" align="alignnone" width="251" caption="SVN basic structure"]<img class="size-full wp-image-58" title="svn structure" src="http://machadogj.com/wp-content/uploads/2009/10/svn-structure.png" alt="SVN basic structure" width="251" height="292" />[/caption]

Many of your projects will most  likely going to have a lot of the “lib” folder in common (for more information about the lib folder see <a title="Structuring your source code" href="http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/" target="_blank">this</a>), such as nunit, nant, enterprise library, asp .net ajax toolkit, etc. So it makes sense to take the lib folder to a totally different path, outside of every project, and add it as external links to each project that may need it.

So all you need to do is create a lib folder outside the scope of your project, put all the lib stuff inside, and then go to the trunk folder, right click, go to TortoiseSVN -&gt; Properties, and finally add an svn:externals property with the following text:

lib <a href="http://yoursvn/path-to-the-lib-folder">http://yoursvn/path-to-the-lib-folder</a>

From now on you can keep your lib folder always up-to-date in all of your projects at the same time! Notice however, that changes to the lib folder have to be done in the <a href="http://yoursvn/path-to-the-lib-folder">http://yoursvn/path-to-the-lib-folder</a> repository and not inside your trunk’s lib folder. Another thing to take into account is that if the lib folder grows too big, you can always do a checkout excluding the “externals”.

In this post we have improved the structure of our repository by moving the lib folder to a common place for all our projects, adding an external link using the svn:externals property.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2009-10-15 19:33:26</wp:post_date>
		<wp:post_date_gmt>2009-10-15 19:33:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>svn-externals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cm"><![CDATA[CM]]></category>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="externals"><![CDATA[Externals]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[SVN]]></category>
		<category domain="post_tag" nicename="tortoisesvn"><![CDATA[TortoiseSVN]]></category>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[HyWoDVfCQtG2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630268]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Running NUnit from the console &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2009/10/27/running-nunit-from-the-console/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.226</wp:comment_author_IP>
			<wp:comment_date>2009-10-27 22:33:36</wp:comment_date>
			<wp:comment_date_gmt>2009-10-27 22:33:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] copy the folder and execute it from wherever you want. This makes it ideal for placing NUnit in our lib folder as an external link. One thing to have in mind is to include the version of NUnit in the folder name to avoid problems [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Running NUnit from the console</title>
		<link>http://machadogj.com/2009/10/running-nunit-from-the-console/</link>
		<pubDate>Tue, 27 Oct 2009 22:33:15 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[So I have already posted about the source structure for our projects, how to move the common libraries to an external link with SVN and building our projects with Nant. In this post I will show you how to run unit tests in our environment from the command line.

First of all if you are not familiar with Nunit, it is a Unit Testing framework for .NET. It's an excellent framework, it's free and you can download it from <a title="NUnit" href="http://www.nunit.org/index.php" target="_blank">here</a>. One of the good things about NUnit, is that it doesn't require to be installed in order to be used. You can copy the folder and execute it from wherever you want. This makes it ideal for placing NUnit in our <a title="svn externals" href="http://thegsharp.wordpress.com/2009/10/15/svn-externals/" target="_blank">lib folder as an external link</a>. One thing to have in mind is to include the version of NUnit in the folder name to avoid problems in the future. So your folder structure should look something like this:

[caption id="attachment_66" align="alignnone" width="160" caption="nant folder"]<img class="size-full wp-image-66" title="nant folder" src="http://machadogj.com/wp-content/uploads/2009/10/nant1.png" alt="nant folder" width="160" height="197" />[/caption]

As I have pointed in the post about <a title="Structuring your source code" href="http://thegsharp.wordpress.com/2009/09/05/structuring-your-source-code/" target="_blank">basic structure for our source code</a>, I showed a very common practice when it comes to unit tests projects which is to name the project after the project being tested. So if I have a library project name "MyLibrary" I will usually have a unit test project like "MyLibrary.Tests". Once we build our "Tests" project, we are ready to run the tests from the command line.

Making the actual call is very simple, you just execute from the command line the nunit-console application with the path to the tests (the *Tests.dll file) and optionally /xml parameter for specifying a place for the output xml file.

In order to make this available to the whole team, we are going to build a simple batch file. We are going to put this file in the trunk folder with the following content:

.libnunit 2.4.8nunit-console.exe .srcMyLibrary.TestsbindebugMyLibrary.Tests.dll

We can add a "build-result" folder inside our trunk and output the xml file by adding the following parameter /xml=.build-resultMyLibrary.Tests.xml

So now the batch file will look like this:

.libnunit 2.4.8nunit-console.exe /xml=.build-resultMyLibrary.Tests.xml .srcMyLibrary.TestsbindebugMyLibrary.Tests.dll

And finally you can use your favorite xsl in order to visualize the results. There's a very simple xsl file in the NUnit folder called "Summary.xslt" which you can use by editing the xml to add the reference like this:
&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;
&lt;!--This file represents the results of running a test suite--&gt;
&lt;?xml-stylesheet type="text/xsl" href="summary.xslt"?&gt;

Adding this file to the build-result folder is a good idea too.

So we have successfully run our NUnit tests of our project, and left a batch file available to the whole team to run the tests in their local machine. Simple as it is, this will come in very handy when trying to calculate the Unit Tests Coverage of your tests.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2009-10-27 22:33:15</wp:post_date>
		<wp:post_date_gmt>2009-10-27 22:33:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>running-nunit-from-the-console</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cm"><![CDATA[CM]]></category>
		<category domain="post_tag" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="nunit"><![CDATA[nunit]]></category>
		<category domain="post_tag" nicename="nunit-console"><![CDATA[nunit console]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[unit testing]]></category>
		<category domain="post_tag" nicename="unit-tests"><![CDATA[unit tests]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[soXTQHRUhGD4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[510476449]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Calculating Coverage with NCover</title>
		<link>http://machadogj.com/2009/10/calculating-coverage-with-ncover/</link>
		<pubDate>Wed, 28 Oct 2009 13:20:17 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[NCover is an excellent tool that allows you to calculate how much of your code is being hit by your unit tests. Basically what it does is a profile of your application. So you can run your tests through any application and NCover will tell you the coverage of your tests. NCover is not an open source free tool, however it does have a Community Edition that will do the work for this tutorial which you can download from <a title="NCover Community Edition" href="http://www.ncover.com/download/community" target="_blank">here</a> after going through the registration.

Since I have already showed how to run <a title="running nunit from the cosole" href="http://thegsharp.wordpress.com/2009/10/27/running-nunit-from-the-console/" target="_blank">NUnit tests from the console</a>, we are going to calculate the  coverage using NCover with NUnit. And taking advantage of the folder structure used we will continue with the following structure:

[caption id="attachment_71" align="alignnone" width="190" caption="ncover folder"]<img class="size-full wp-image-71" title="ncover folder" src="http://machadogj.com/wp-content/uploads/2009/10/ncover1.png" alt="ncover folder" width="190" height="207" />[/caption]

In order to make this available to the whole team, we are going to create a batch file (.bat) that will run the command for us (this will be usefull when integrating it with Nant). As I explained earlier, ncover has to execute an application in order to do the profiling. In our case, we want to run the NUnit tests, so this application will be nunit-console that rests in libnunit 2.4.8 folder. We covered the parameters that NUnit needs in order to run our tests in my previous <a title="running nunit from the console" href="http://thegsharp.wordpress.com/2009/10/27/running-nunit-from-the-console/" target="_blank">post</a>, so the only thing left to do is run ncover. The batch file will in the trunk folder, and will contain the following command:

.NCoverNCover.console.exe  .nunitnunit-console.exe /xml=.build-resulttests.xml .Concur.Lib.TestsbindebugConcur.Lib.Tests.dll

We can optionally add a parameter in order to store the coverage output file into a different folder, like this: //x .build-resultcoverage.xml, so the batch file would look like this:

.NCoverNCover.console.exe //x .build-resultcoverage.xml .nunitnunit-console.exe /xml=.build-resulttests.xml .Concur.Lib.TestsbindebugConcur.Lib.Tests.dll

And finally you can use your favorite xsl in order to visualize the results. There’s a very cool xsl file in the NCover folder called “coverage.xsl” which you can use by editing the xml to add the reference like this:
&lt;?xml version=”1.0″ encoding=”utf-8″ standalone=”no”?&gt;
&lt;?xml-stylesheet type=”text/xsl” href=”coverage.xsl”?&gt;

Adding this file to the build-result folder is a good idea too.

So we have successfully calculated our NCoverage coverage for our project, and left a batch file available to the whole team to run it in their local machine. Simple as it is, this leaves us one step closer to having a pretty decent build mechanism.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2009-10-28 13:20:17</wp:post_date>
		<wp:post_date_gmt>2009-10-28 13:20:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calculating-coverage-with-ncover</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coverage"><![CDATA[coverage]]></category>
		<category domain="post_tag" nicename="ncover"><![CDATA[NCover]]></category>
		<category domain="post_tag" nicename="nunit"><![CDATA[nunit]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="test-coverage"><![CDATA[test coverage]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<category domain="post_tag" nicename="unit-test"><![CDATA[unit test]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[unit testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[KdTqLYtYDLTb]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[542698957]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET BulkCopy Precision Issue</title>
		<link>http://machadogj.com/2009/10/net-bulkcopy-precision-issue/</link>
		<pubDate>Thu, 29 Oct 2009 20:26:03 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[I have been having problems with the bulk copy of .NET. More precisely when inserting data through a DataTable with a "Double" typed column using SqlBulkCopy, values seem to loose precision. I have the value 18.4 in a csv file, and ended up with 18.39 in the database.

So I simply changed the column DataType of the DataTable from System.Double to System.Decimal and it worked fine!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2009-10-29 20:26:03</wp:post_date>
		<wp:post_date_gmt>2009-10-29 20:26:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-bulkcopy-precision-issue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="bug"><![CDATA[Bug]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="dal"><![CDATA[DAL]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="post_tag" nicename="sqlbulkcopy"><![CDATA[SqlBulkCopy]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[Zdjbm5bOZZiF]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[561559733]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ServiceResult class</title>
		<link>http://machadogj.com/2009/11/serviceresult-class/</link>
		<pubDate>Thu, 26 Nov 2009 00:45:56 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[The ServiceResult class is a very simple class that I found useful in certain cases where I need to make a call to a method that performs different actions or validations.

I have used it in webservices when a collection of items to operate are passed to a webmethod, and a result has to be returned summarizing the errors and warnings. And I have used it as well in Service calls where complex operations are made.

It can also serve as a base class for a "workflow pipeline" framework such as the approach used in the ORM nettiers (see this for further information).

The code:
<blockquote>
<pre> public class ServiceResult
 {
 #region private members
 private List&lt;string&gt; _errors = new List&lt;string&gt;();
 private List&lt;string&gt; _warnings = new List&lt;string&gt;();
 private string _errorsHeader = "The following errors were encountered:";
 #endregion

 #region properties
 /// &lt;summary&gt;
 /// This string will appear in the header of the errors list.
 /// &lt;/summary&gt;
 public string ErrorsHeader {
 get { return _errorsHeader; }
 set { _errorsHeader = value; }
 }
 public string[] Errors { get { return _errors.ToArray(); } }
 public string[] Warnings { get { return _warnings.ToArray(); } }
 public bool HasErros { get { return (_errors.Count &gt; 0); } }
 public bool HasWarnings { get { return (_warnings.Count &gt; 0); } }
 #endregion

 #region methods
 public void AddError(string error)
 {
  _errors.Add(error);
 }
 public void AddWarning(string warning)
 {
  _warnings.Add(warning);
 }
 public string GetFormattedErrors(bool includeHeader)
 {
  StringBuilder sb = new StringBuilder();
  if (includeHeader)
   sb.AppendLine(ErrorsHeader);
  foreach (string error in Errors)
  {
   sb.AppendLine(error);
  }
  return sb.ToString();
 }
 /// &lt;summary&gt;
 /// Takes the errors and warnings from another ServiceResults.
 /// Use this method to compose multiple ServiceResults into one.
 /// &lt;/summary&gt;
 /// &lt;param name="serviceResult"&gt;&lt;/param&gt;
 public void Compose(ServiceResult serviceResult)
 {
  foreach (string error in serviceResult.Errors)
   AddError(error);
  foreach (string warning in serviceResult.Warnings)
   AddWarning(warning);
 }
 #endregion
 }</pre>
</blockquote>
Then make a call to the method:

ServiceResult fooResult = Foo();

Or make several calls and combine the results:

ServiceResult theResult = new ServiceResult();

theResult.Compose(FooA());

theResult.Compose(FooB());

//Use the result.

if (theResult.HasErrors)

Console.Write(theResult.GetFormattedErrors(true));﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2009-11-26 00:45:56</wp:post_date>
		<wp:post_date_gmt>2009-11-26 00:45:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>serviceresult-class</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[patterns]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[aAaaf2hztYlN]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[509333195]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Generics and the &quot;of&quot; relation</title>
		<link>http://machadogj.com/2009/11/generics-and-the-of-relation/</link>
		<pubDate>Mon, 30 Nov 2009 00:50:32 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[I have been using generics very often recently and found ou how they can help you design a class "of" something. Unlike inheritance (a "is" relationship), object oriented programming can't handle the "of" relation elegantly without the help of generics.

Object oriented programming approach

It is very easy to model a "is" relationship like in "pizza IS food, and steak IS food". You just inherit Pizza class from Food class, and Steak class from Food class and that's it. Suppose you have the "Name" property in Food class, then Pizza just as Steak would have Name as well thanks to inheritance. A Restaurant class, could contain a Menu property as a collection of Food. A PizzaRestaurant inherited from Restaurant would have a Menu as well again thanks to OOP, however this collection would only have different types of pizzas. So if we want to treat the Menu as a collection of pizzas, we would have to cast each Food item to Pizza item, which is not ideal, since clases using PizzaRestaurant should know this particular behaviour.

Generics approach

Taking the above example, we could further say that PizzaRestaurant, is not only a Restaurant, but it is a Restaurant <strong>of</strong> Pizzas. When designing our classes we should pay attention to the <strong>of</strong> relationship, because it may be better modeled with Generics. How? Well, know that we know that Restaurants are OF a certain type, we parameterize (it's more like a template actually) the Restaurant class so it can be defined OF what this restaurant will be like this:

Define that "pizza is food"

abstract class Food
{

public string Name { get; set; }
}
class Pizza : Food
{
}

Then define a restaurant template OF food:

class Restaurant&lt;T&gt; where T : Food
{
public List&lt;T&gt; Menu { get; set; }
}

Notice that Food is an abstract class, and that T has not been defined yet, so we can only assume that whatever T is, it will be food. So now let's define a restaurant of Pizzas:

class PizzaRestaurant : Restaurant&lt;Pizza&gt;
{
}

If I now declare a PizzaRestaurant and look at the Menu, I will realize that the Menu is a List of Pizzas:

<a href="http://machadogj.com/wp-content/uploads/2009/11/pizzarestaurantmenu.png"><img class="alignnone size-medium wp-image-87" title="PizzaRestaurantMenu" src="http://machadogj.com/wp-content/uploads/2009/11/pizzarestaurantmenu.png?w=300" alt="" width="300" height="94" /></a>

So watch out for this relationship type "<strong>of</strong>" whenever you are designing your classes. I have found this very useful and a very easy to learn rule.]]></content:encoded>
		<excerpt:encoded><![CDATA[Using Generics to attack the "of" relationship between classes.]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2009-11-30 00:50:32</wp:post_date>
		<wp:post_date_gmt>2009-11-30 00:50:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>generics-and-the-of-relation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="patterns-source-code"><![CDATA[Patterns]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[patterns]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[6DRQt8lBkSF6]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aspect Oriented Development in .NET</title>
		<link>http://machadogj.com/2010/01/aspect-oriented-development-in-net/</link>
		<pubDate>Tue, 19 Jan 2010 00:40:09 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will illustrate the difference between Aspect Oriented Development, and Aspect Oriented Programming.

If you know <a title="PostSharp" href="http://www.postsharp.org/" target="_blank">PostSharp</a>, then you know it's an awesome tool (if you don't, then you should). Logging, Caching and Asynchronous processing are the most common cross-cutting concerns you usually find in most systems;  and attacking those concerns with AOP tools like PostSharp is usually an excellent solution. If we use PostSharp for this, then we are taking advantage of a AOP technique, but it doesn't mean we are developing in Aspect Oriented manner. However, what about more domain-specific concerns and designing as if everything in your system is a concern? Of course these concerns are not going to "cut across" the entire system, but let's see how we can think of them as concerns.Assume I have a shopping cart, with many different ways to make the payment. We could say that the Checkout is a concern which is used in every payment type process (thus being a cross-cutting concern). So we could develop a generic Checkout logic, and extend it and use it through mechanisms such as method extensions and PostSharp library. We would inject the specific logic, at the right moment. Something like this:

public class Checkout
{

public void Process()...

public bool CheckInventory()...

public decimal CalculateShipping()...

}

When using the credit card type, we could add a Method extension to validate CreditCards:

public Class CreditCardCheckoutExtensions
{
public static bool VerifyCreditCard(this Checkout aCheckout)...
}

And finally attaching specific methods with PostSharp:
public class CheckoutProcessAttribute : OnMethodBoundaryAspect
{
//This will be executed before the Process method in the Checkout class.
public override void OnEntry( MethodExecutionEventArgs eventArgs)
{
//Logic to validate CreditCard...
if (!eventArgs.Instance.VerifyCreditCards())
throw new InvalidCreditCardException();
}
}

It's just a simple example to illustrate how we can think of domain-specific functionality as aspects (concerns).]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post I will illustrate the difference between Aspect Oriented Development, and Aspect Oriented Programming.]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2010-01-19 00:40:09</wp:post_date>
		<wp:post_date_gmt>2010-01-19 00:40:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aspect-oriented-development-in-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="aod"><![CDATA[AOD]]></category>
		<category domain="post_tag" nicename="aop-2"><![CDATA[AOP]]></category>
		<category domain="post_tag" nicename="aspect-oriented"><![CDATA[Aspect Oriented]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="postsharp"><![CDATA[PostSharp]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630271]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[v05WQgjc3drJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Jay Cincotta]]></wp:comment_author>
			<wp:comment_author_email>jay.cincotta@gibraltarsoftware.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gibraltarsoftware.com</wp:comment_author_url>
			<wp:comment_author_IP>71.179.83.187</wp:comment_author_IP>
			<wp:comment_date>2010-01-19 13:25:48</wp:comment_date>
			<wp:comment_date_gmt>2010-01-19 13:25:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice Post!  As you might guess, I'm a huge fan of PostSharp for logging, but it's great to be reminded at all the broader possibilities it provides for applying AOP to domain-specific concerns.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302555]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>201.234.250.162</wp:comment_author_IP>
			<wp:comment_date>2010-01-25 13:32:44</wp:comment_date>
			<wp:comment_date_gmt>2010-01-25 13:32:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Jay! I've seen the Gibraltar video and it's very interesting. Congratulations for your great tool. I will seriously consider using it in the future.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302554]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Backlinks]]></wp:comment_author>
			<wp:comment_author_email>jay.steven@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xrumerservice.org</wp:comment_author_url>
			<wp:comment_author_IP>46.109.195.196</wp:comment_author_IP>
			<wp:comment_date>2011-11-23 13:39:58</wp:comment_date>
			<wp:comment_date_gmt>2011-11-23 13:39:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Get up to 100000 forum  backlinks with our backlinks service &amp; massive targeted  traffic        
Get great online web traffic using amazing backlink service available. We can post your marketing post up to 100’000 forums around the web, get insane amount of backlinks and amazing targeted web traffic in shortest time. Most affordable and most powerful service for web traffic and backlinks in the world!!!!                        
Your post will be published up to 100000 forums worldwide your website or blog  will get instant traffic and massive increase in seo rankings just after few days or weeks so your site will get targeted long term traffic from search engines. Order now:                      
<a href="http://xrumerservice.org" rel="nofollow">backlink service</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Bonnie]]></wp:comment_author>
			<wp:comment_author_email>usaqueen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.toptreadmillsreviews.com/</wp:comment_author_url>
			<wp:comment_author_IP>109.230.216.20</wp:comment_author_IP>
			<wp:comment_date>2011-11-29 13:16:49</wp:comment_date>
			<wp:comment_date_gmt>2011-11-29 13:16:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suggest adding a facebook like button for the blog!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>ASP .NET MVC Controller Factory with Windsor</title>
		<link>http://machadogj.com/2010/02/asp-net-mvc-controller-factory-with-windsor/</link>
		<pubDate>Thu, 11 Feb 2010 20:19:22 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will show you how to create your custom Controller Factory for ASP .NET MVC using windsor and other things you can do with it. First if you don't know Windsor, it's an Inversion of Control Container which allows you to inject dependencies dinamically. I strongly recommend to read about it in castle project's website <a href="http://www.castleproject.org/container/index.html" target="_blank">here</a>.
<h2>Custom Controller Factory</h2>
In order to create your own custom controller factory, you can inherit the DefaultControllerFactory that ships with MVC. The real magic happens when you override the GetControllerInstance(Type controllerType) method in which you will return the instance of the specified controller. In order to create the instance with Windsor you first need to register the types in the container. (I took this sample from the book <strong> </strong><a href="http://www.amazon.com/gp/product/1430210079/ref=cm_li_v_cd_d?tag=linkedin-20" target="_blank"><strong>Pro ASP.NET MVC Framework</strong></a>, which is awesome by the way):

public class WindsorControllerFactory : DefaultControllerFactory
{
WindsorContainer container;

// The constructor:
// 1. Sets up a new IoC container
// 2. Registers all components specified in web.config
// 3. Registers all controller types as components
public WindsorControllerFactory()
{
// Instantiate a container, taking configuration from web.config
container = new WindsorContainer(
new XmlInterpreter(new ConfigResource("castle"))
);
container.Kernel.AddFacility&lt;
<div id=":13c">ServiceDependencyPropertiesFacility&gt;();
// Also register all the controller types as transient
var controllerTypes = from t in Assembly.GetExecutingAssembly().GetTypes()
where typeof(IController).IsAssignableFrom(t)
select t;

foreach (Type t in controllerTypes)
{
container.AddComponentLifeStyle(t.FullName, t, LifestyleType.Transient);
}
}
}

</div>
<div>Basically it looks for all the classes in the Assembly which implement the IController interface, and then registers the type in the container. Once we have all the types registered we can go ahead and override the method like this:</div>
<div>// Constructs the controller instance needed to service each request
protected override IController GetControllerInstance(Type controllerType)
{
return (IController)container.Resolve(controllerType);
}</div>
<div>And last but not least! We need to register the controller in the Global.asax file:</div>
<div>protected void Application_Start()
{
RegisterRoutes(RouteTable.Routes);
<div id=":148">ControllerBuilder.Current.SetControllerFactory(new <strong>WindsorControllerFactory</strong>());
}</div>
</div>
<div>Now would we want to do this? Couple of reasons, first we can control the Lifestyle of the controllers re-utilizing controller's instances if we want to.  And second because it let's us take advantage of the Dependency Injection capabilities of Windsor. And even take advantage of the Interceptor and include AOP to our project! (more on this soon).</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2010-02-11 20:19:22</wp:post_date>
		<wp:post_date_gmt>2010-02-11 20:19:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asp-net-mvc-controller-factory-with-windsor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net-mvc"><![CDATA[ASP .NET MVC]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="castle-project"><![CDATA[Castle Project]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="category" nicename="patterns-source-code"><![CDATA[Patterns]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[patterns]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="post_tag" nicename="windsor"><![CDATA[Windsor]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[cszCgGPBMu3C]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630258]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[ASP.NET MVC Archived Blog Posts, Page 1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://aspdotnetmvc.com/blogs/default.aspx</wp:comment_author_url>
			<wp:comment_author_IP>65.19.154.51</wp:comment_author_IP>
			<wp:comment_date>2010-02-17 03:49:59</wp:comment_date>
			<wp:comment_date_gmt>2010-02-17 03:49:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to VoteASP .NET MVC Controller Factory with Windsor (2/11/2010)Thursday, February 11, 2010 from machadogjIn this post I will show you how to create your custom [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Applying AOP on IQueryables</title>
		<link>http://machadogj.com/2010/05/applying-aop-on-iqueryables/</link>
		<pubDate>Wed, 05 May 2010 20:49:55 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[When working with LinqToSql or Entity Framework, you will be using IQueryables extensibly. So extensibly, that plenty of your code will be employed in writting Where clauses in Linq. Linq makes it very easy and declarative to ask for whatever you need. The problem araises when you have  complex where clauses and the same conditions all over your repository. For example, suppose your records have a DateDeleted column, which means that the record has been deleted when it is not null (e =&gt; e.DateDeleted != null). You could have that condition all over the place. And a similar thing would happen if you had a IsActive, or Status columns.

The proposed solution is very simple, we use method extensions in order to add the most common conditions to the IQueryable&lt;T&gt;. Something like this:

public static IQueryable&lt;Order&gt; ThatAreShipped(this IQueryable&lt;Order&gt; query)
{
return query.Where(o =&gt; o.Status == OrderStatus.Shipped);
}
or
public static IQueryable&lt;Order&gt; WhereIdIs(this IQueryable&lt;Order&gt; query, int id)
{
return query.Where(o =&gt; o.Id == id);
}

So you can see a simple pattern, when the condition requires parameters, we use the prefix "Where", and when the condition doesn't require a parameter, then we use the prefix "That". So we could see something like the following and easily understand what we will get in return:

var orders = context.Orders.ThatAreShipped().WhereTotalGreaterThan(100).WhereShippingStateIs("NY");

The basic AOP concept we are avoiding here is to have similar code Scattered all over our repository. It turns out that method extensions, are an excellent and easy way to apply AOP. If you use the namespace of these extensions to be internal to the repository, then you will see this methods in the repository only. So if you do the following from outside the repository namespace:

var orders = new List&lt;Order&gt;().AsQueryable().ThatAreShipped()

This would throw a compilation error, and that is perfect, because it is a repository concern only.]]></content:encoded>
		<excerpt:encoded><![CDATA[Applying AOP on IQueryables. It turns out that method extensions, are an excellent and easy way to apply AOP. Look how we take advantage of method extensions to make our repositories much more clear and with reusable conditions.]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2010-05-05 20:49:55</wp:post_date>
		<wp:post_date_gmt>2010-05-05 20:49:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>applying-aop-on-iqueryables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aop-2"><![CDATA[AOP]]></category>
		<category domain="category" nicename="linq"><![CDATA[LinQ]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1273092597]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[tR8MVMfTFLKz]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630251]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[diegogravi]]></wp:comment_author>
			<wp:comment_author_email>diegogravi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.135.13.29</wp:comment_author_IP>
			<wp:comment_date>2010-05-06 02:32:09</wp:comment_date>
			<wp:comment_date_gmt>2010-05-06 02:32:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When I first started using Linq, I saw it as a very useful tool to extract either entities or data from specific collections and I did not realize that with a few lines of code we were not only going to simplify syntax for querying enumerable data sources of different types, but also to take advantage of that simple syntax and combine it with powerfull paradigms like AOP. It is an easy way to write crosscutting concerns and a clearer manner of getting a neat code in the end as well. Keep it up mate!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302548]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>VS2010 Modeling Project – Generating classes from UML</title>
		<link>http://machadogj.com/2010/05/vs2010-modeling-project-%e2%80%93-generating-classes-from-uml/</link>
		<pubDate>Thu, 13 May 2010 14:53:13 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will show you the C# related stuff, and how to navigate a modeling project through code. The only thing that is clearly missing from the modeling project is the code generation based on diagrams (you can check <a href="http://msdn.microsoft.com/en-us/library/dd409436%28v=VS.100%29.aspx" target="_blank">here</a> for all the types of diagrams). I’ve read somewhere that it is a feature that it’s already planned for the near future. But if you are like me and can’t wait for MS to provide with the solution, then you can keep on reading.

The first thing you have to do in order to be able to use C# stereotypes, is to choose the C# Profile for the package like this:

<a href="http://machadogj.com/wp-content/uploads/2010/05/1.png"><img class="alignnone size-medium wp-image-119" title="Applying C# profile" src="http://machadogj.com/wp-content/uploads/2010/05/1.png?w=300" alt="" width="300" height="122" /></a>

As soon as you choose C# Profile, you will see a new set of stereotypes in the class diagram.

<a href="http://machadogj.com/wp-content/uploads/2010/05/2.png"><img class="alignnone size-medium wp-image-120" title="C# Stereotypes" src="http://machadogj.com/wp-content/uploads/2010/05/2.png?w=295" alt="" width="295" height="300" /></a>

For a good explanation on UML profiles, and code generation, you can check out <a href="http://www.olegsych.com/2010/01/uml-modeling-and-code-generation-in-visual-studio-2010/">this</a> post. Now let’s go to the code. First, you will need to import the following namespaces.
<ul>
	<li>Microsoft.VisualStudio.Uml.Classes</li>
	<li>Microsoft.VisualStudio.ArchitectureTools.Extensibility</li>
</ul>
How to get a modeling project:

string projectPath = @"c:YourModelingProjectModelingProject1.modelproj";
var project = ModelingProject.LoadReadOnly(projectPath);
<h2>How to get namespaces of a modeling project:</h2>
//Use the packages where the C# namespace stereotype has been applied.
//You can remove the “where” if you want to generate all.
IEnumerable&lt;IPackage&gt; packages = project.Store.Root.NestedPackages
.Where(n =&gt; n.AppliedStereotypes.Any(s =&gt; s.Name == "namespace"));
//Namespaces

foreach(var package in packages)
{
<h2>How go get namespace classes:</h2>
foreach(var c in package.OwnedTypes)
{
var aClass = c as IClass;
if (aClass != null)
{
//render the class.
<h2>Class Properties:</h2>
//render properties.
foreach(var p in aClass.OwnedAttributes)
{
var property = p as IProperty;
if (property != null)
{
//render a property.
<h2>Class Methods:</h2>
foreach(var op in aClass.OwnedOperations)

{
<h2>Interfaces:</h2>
foreach(var c in package.OwnedTypes)
{
var anInterface = c as IInterface;
if (anInterface != null)
{
//render the interface.
<h2>Interface Methods:</h2>
foreach(var op in anInterface.OwnedOperations)
{
//render the method.

In the next post, I’ll give you the code of a T4 template for generating basic stuff.

<strong>One tip regarding t4 templates:</strong> I too recommend t4 editor from tangible to work on .tt files, but the Free edition they offer does not come with intellisense for the namespaces I just listed. I guess the easiest work around is to add the references to another console or library project where you will get full intellisense and compile validations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2010-05-13 14:53:13</wp:post_date>
		<wp:post_date_gmt>2010-05-13 14:53:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vs2010-modeling-project-%e2%80%93-generating-classes-from-uml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="code-generation"><![CDATA[code generation]]></category>
		<category domain="post_tag" nicename="modeling-project"><![CDATA[modeling project]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="uml"><![CDATA[uml]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio-2"><![CDATA[visual studio]]></category>
		<category domain="post_tag" nicename="vs2010"><![CDATA[vs2010]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1273762393]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[hhcH8Azi9VRB]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VS2010 Modeling Project – Generating classes from UML - Part 2</title>
		<link>http://machadogj.com/2010/05/vs2010-modeling-project-%e2%80%93-generating-classes-from-uml-part-2/</link>
		<pubDate>Fri, 21 May 2010 22:23:08 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[Following with my previous post, here I got more on how to navigate modeling projects through code.
<h2>Getting method's return type</h2>
<code>public string GetReturnType(IOperation o)
{
string returnType = string.Empty;
if (o.Type == null)
return "void";
else
returnType = o.Type.Name;
//Check if the method returns a collection.
var returnParameter = o.OwnedParameters.Where(p =&gt; p.Direction == ParameterDirectionKind.Return).FirstOrDefault();
if (returnParameter != null &amp;&amp; returnParameter.UpperValue as ILiteralString != null)
{
//Check if it's a collection.
if (((ILiteralString)returnParameter.UpperValue).Value == "*")
returnType += "[]";
}
return returnType;
}
</code>
<h2>Method's parameters</h2>
<code>
public string RenderMethodParameters(IOperation op)
{
string parameters = string.Empty;
foreach (var param in op.OwnedParameters.Where(p =&gt; p.Direction == ParameterDirectionKind.In))
{
string name = string.IsNullOrEmpty(param.Name) ? param.Type.Name.ToLower() : param.Name;
parameters += string.Format("{0} {1}, ", param.Type.Name, name);
}
if (!string.IsNullOrEmpty(parameters))
return parameters.Substring(0, parameters.Length - 2);
else
return string.Empty;
}
</code>
<h2>Class associations</h2>
<code>
var associations = aClass.Package.OwnedTypes
.Where(t =&gt; t is IRelationship &amp;&amp;
(((IRelationship)t).SourceElement == aClass ||
((IRelationship)t).TargetElement == aClass)).Cast();
foreach (var assoc in associations)
{
var prop = assoc.NavigableOwnedEnds.Where(e=&gt; e.Opposite.Type == (IType)aClass).FirstOrDefault();
if (prop != null)
//Render the property with prop.Type.Name and prop.Name.
}
</code>
<h2>Enums</h2>
<code>
foreach(var aType in package.OwnedTypes)
{
var anEnumeration = aType as IEnumeration;
if (anEnumeration != null)
{
var name = anEnumeration.Name;
foreach(var enumItem in anEnumeration.OwnedLiterals)
{
var itemName = enumItem.Name;
}
}
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2010-05-21 22:23:08</wp:post_date>
		<wp:post_date_gmt>2010-05-21 22:23:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vs2010-modeling-project-%e2%80%93-generating-classes-from-uml-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="modeling-project"><![CDATA[modeling project]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="post_tag" nicename="uml"><![CDATA[uml]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<category domain="post_tag" nicename="visual-studio-2"><![CDATA[visual studio]]></category>
		<category domain="post_tag" nicename="vs2010"><![CDATA[vs2010]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1274480588]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[Ncf4BAV4nNN9]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VS2010 Modeling Project – Generating classes from UML – t4 template</title>
		<link>http://machadogj.com/2010/05/vs2010-modeling-project-%e2%80%93-generating-classes-from-uml-%e2%80%93-t4-template/</link>
		<pubDate>Mon, 24 May 2010 03:08:07 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[Here you will find a very simple t4 template for generating the following things from a VS2010 Modeling project:

Classes:
- Class definition.
- Methods.
- Class inheritance.
- Implemented interfaces.
- Properties.
- Associations (with other classes in the form of properties).

Interfaces:
- Interface definition.
- Properties.
- Methods.

Enumerations:
- Enum definition.
- Enum items.
<h2>The template</h2>
The only thing you need to do in order to use the template is: add a .tt file, change the path of the modelproj so that it points to your own .modelproj file, and then save it. Then you can see the generated code in the file yourtemplate.cs (in case your template is yourtemplate.tt).

Note: I don't have a wordpress plugin for coloring and formatting the code :)
<code>
&lt;#@ template debug="true" hostspecific="true" language="C#v3.5" #&gt;
&lt;#@ output extension=".cs" #&gt;
&lt;#@ assembly name="Microsoft.VisualStudio.Uml.Interfaces.dll" #&gt;
&lt;#@ assembly name="Microsoft.VisualStudio.ArchitectureTools.Extensibility.dll" #&gt;
&lt;#@ assembly name="System.Core.dll" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.Uml.Classes" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility" #&gt;
&lt;#@ import namespace="Microsoft.VisualStudio.TextTemplating" #&gt;
&lt;#@ import namespace="System" #&gt;
&lt;#@ import namespace="System.Collections.Generic" #&gt;
&lt;#@ import namespace="System.Linq" #&gt;
&lt;#
string projectPath = Host.ResolvePath(@"..ModelingProject1ModelingProject1.modelproj");
var project = ModelingProject.LoadReadOnly(projectPath);
//Use the packages where the C# namespace stereotype has been applied.
//You can remove the where if you want to generate all.
IEnumerable packages = project.Store.Root.NestedPackages
.Where(n =&gt; n.AppliedStereotypes.Any(s =&gt; s.Name == "namespace"));
//Namespaces
foreach(var package in packages)
{
#&gt;
/*
Template by Gustavo Machado.
Project: &lt;#= project.Store.Root.Name #&gt;
*/
using System;
&lt;#= "namespace " + package.Name#&gt;
{
&lt;# 			foreach(var aType in package.OwnedTypes) 			{ 				var aClass = aType as IClass; 				if (aClass != null) 				{ 					//render the class. #&gt;
public&lt;#= GetClassModifier(aClass) #&gt; class &lt;#= aClass.Name #&gt; &lt;#= GetBaseTypes(aClass) #&gt;
{
&lt;# 					//render properties. 					foreach(var p in aClass.OwnedAttributes) 					{ 						var property = p as IProperty; 						if (property != null) 						{ 							//render a property. #&gt;
public &lt;#= p.Type.Name #&gt; &lt;#= p.Name #&gt; { get; set; }
&lt;# 						} 					}//end of properties 					 					//Render navigation properties (associations) 					var associations = aClass.Package.OwnedTypes 						.Where(t =&gt; t is IRelationship &amp;&amp;
(((IRelationship)t).SourceElement == aClass ||
((IRelationship)t).TargetElement == aClass)).Cast();
foreach(var assoc in associations)
{
//Look for the correct end of the association.
foreach (var end in assoc.NavigableOwnedEnds)
{
if (end.Opposite.Type == (IType)aClass)
{
#&gt;
public &lt;#= end.Type.Name #&gt; &lt;#= end.Name #&gt; { get; set; }
&lt;#								 							} 						} 					} 					 					//render methods 					foreach(var op in aClass.OwnedOperations) 					{ 						if (!op.IsAbstract) 						{//render the not implemented exception. #&gt;
public&lt;#= GetMethodModifier(op)#&gt; &lt;#= GetReturnType(op)#&gt; &lt;#= op.Name #&gt;(&lt;#= GetMethodParameters(op)#&gt;)
{
throw new NotImplementedException();
}
&lt;# 						} 						else 						{ #&gt;
public&lt;#= GetMethodModifier(op)#&gt; &lt;#= GetReturnType(op)#&gt; &lt;#= op.Name #&gt;(&lt;#= GetMethodParameters(op)#&gt;);
&lt;# 						} 					} // end of methods. #&gt;
}
&lt;# 					continue; //we are done with the class. 				} 				 				var anInterface = aType as IInterface; 				if (anInterface != null) 				{ 					//render the interface. #&gt;
public interface &lt;#= anInterface.Name #&gt;
{
&lt;# 					//render the properties. 					foreach(var prop in anInterface.OwnedAttributes) 					{ #&gt;
public &lt;#= prop.Type.Name #&gt; &lt;#= prop.Name #&gt; { get; set; }
&lt;#					} 					//render the methods. 					foreach(var op in anInterface.OwnedOperations) 					{ #&gt;
&lt;#= GetReturnType(op)#&gt; &lt;#= op.Name #&gt;(&lt;#= GetMethodParameters(op)#&gt;);
&lt;# 					} 					#&gt;
}
&lt;# 					continue; 				} //end of interfaces. 				 				var anEnumeration = aType as IEnumeration; 				if (anEnumeration != null) 				{ #&gt;
public enum &lt;#= anEnumeration.Name #&gt;
{
&lt;# 					foreach(var enumItem in anEnumeration.OwnedLiterals) 					{ #&gt;
&lt;#= enumItem.Name #&gt;,
&lt;# 					} #&gt;
}
&lt;# 				} 			}#&gt;
}
&lt;# 		} //foreach package 	 #&gt;
&lt;#+
public string GetBaseTypes(IClass c)
{
string generalizations = string.Empty;
foreach(var g in c.Generalizations)
{
if (g.TargetElement as INamedElement != null)
{
if (string.IsNullOrEmpty(generalizations))
generalizations = ": " + ((INamedElement)g.TargetElement).Name;
else
generalizations += ", " + ((INamedElement)g.TargetElement).Name;
}
}
foreach(var i in c.InterfaceRealizations)
{
if (i.TargetElement as INamedElement != null)
{
if (string.IsNullOrEmpty(generalizations))
generalizations = ": " + ((INamedElement)i.TargetElement).Name;
else
generalizations += ", " + ((INamedElement)i.TargetElement).Name;
}
}
return generalizations;
}
public string GetReturnType(IOperation o)
{
string returnType = string.Empty;
if (o.Type == null)
return "void";
else
returnType = o.Type.Name;
//Check if the method returns a collection.
var returnParameter = o.OwnedParameters.Where(p =&gt; p.Direction == ParameterDirectionKind.Return).FirstOrDefault();
if (returnParameter != null  &amp;&amp; returnParameter.UpperValue as ILiteralString != null)
{
if (((ILiteralString)returnParameter.UpperValue).Value == "*")
returnType += "[]";
}
return returnType;
}
public string GetClassModifier(IClass c)
{
if (c.IsAbstract)
return " abstract";
else
return string.Empty;
}
public string GetMethodModifier(IOperation o)
{
if (o.IsAbstract)
return " abstract";
else if (o.IsStatic)
return " static";
else
return "";
}
private string GetMethodParameters(IOperation op)
{
string parameters = string.Empty;
foreach (var para in op.OwnedParameters.Where(p =&gt; p.Direction == ParameterDirectionKind.In))
{
string name = string.IsNullOrEmpty(para.Name) ? para.Type.Name.ToLower() : para.Name;
parameters += string.Format("{0} {1}, ", para.Type.Name, name);
}
if (!string.IsNullOrEmpty(parameters))
return parameters.Substring(0, parameters.Length - 2);
else
return string.Empty;
}
#&gt;
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2010-05-24 03:08:07</wp:post_date>
		<wp:post_date_gmt>2010-05-24 03:08:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vs2010-modeling-project-%e2%80%93-generating-classes-from-uml-%e2%80%93-t4-template</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1274670493]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630285]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[r9m0Sd6cJf8R]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Derdour]]></wp:comment_author>
			<wp:comment_author_email>derdour1@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.123.204</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 08:12:50</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 08:12:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for sample, but how to add the tt file. When I Right click on My ModelingProject, I don't have way to add the tt file.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302566]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Derdour]]></wp:comment_author>
			<wp:comment_author_email>derdour1@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.212.123.204</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 08:25:00</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 08:25:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, I find it. It's in an applicative project (console application for example),]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302567]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.152.68</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 13:15:02</wp:comment_date>
			<wp:comment_date_gmt>2010-06-02 13:15:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool, hope you find it useful.
Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302570]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[afro54]]></wp:comment_author>
			<wp:comment_author_email>hypertoaster@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.3.173.91</wp:comment_author_IP>
			<wp:comment_date>2011-07-03 11:18:22</wp:comment_date>
			<wp:comment_date_gmt>2011-07-03 11:18:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I have tried your code, along with another sample template, against my class model.

The alternative template transform <i> everything <i> in my model into a class, even if the object has no stereotype.  
When I try your code, which I can see is far more comprehensive, it stops part-way through the transformation.

It produces about three classes (out of 30) before giving the error:
<b>
Error	3	Running transformation: System.InvalidOperationException: Operation is not valid due to the current state of the object.
   at Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml.IClassifierExtensions.GetGeneralsValue(IClassifier classifier)
   at Microsoft.VisualStudio.Uml.Interactions.Interaction.GeneralsPropertyHandler.GetValue(Interaction element)
   at Microsoft.VisualStudio.Uml.Interactions.Interaction.get_Generals()
   at Microsoft.VisualStudio.Uml.Interactions.Interaction.SuperClassesPropertyHandler.GetValue(Interaction element)
   at Microsoft.VisualStudio.Uml.Interactions.Interaction.get_SuperClasses()
   at Microsoft.VisualStudio.TextTemplating8D88C7B285BA5335BC795D23B944F2D9.GeneratedTextTransformation.TransformText()
   at Microsoft.VisualStudio.TextTemplating.TransformationRunner.RunTransformation(TemplateProcessingSession session, String source, ITextTemplatingEngineHost host, String&amp; result)
<b>

I've tried using VolatileAssemblyProcessor and noticed that, for this failed template only, there is no temporary .dll produced.  I guess that is part of the failure, though I understood a .dll should always be produced.

Can you make sense of the error message, or how I might complete transformation of my model?

Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302572]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-10-11 14:36:48</wp:comment_date>
			<wp:comment_date_gmt>2011-10-11 14:36:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I honestly haven't gone back to this in a while, but I am pretty sure I didn't have this issue back then.
Regards,
Gustavo]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>21</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302572]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302578]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>WCF - Exception handling and disposing channels</title>
		<link>http://machadogj.com/2010/06/wcf-exception-handling-and-disposing-channels/</link>
		<pubDate>Wed, 02 Jun 2010 01:36:37 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[Looking for a way to avoid duplicating the Exception handling and disposal code of WCF channels, I ran into this <a href="http://old.iserviceoriented.com/blog/post/Indisposable+-+WCF+Gotcha+1.aspx">post</a> which gives an interesting approach. However I needed a way make return values more generic, so here is my little tunning.
<h2>The code</h2>
<code> public static class Service&lt;T&gt;
{
public static ChannelFactory&lt;T&gt; _channelFactory = new ChannelFactory&lt;T&gt;("");
public static TResult Use&lt;TResult&gt;(Func&lt;T, TResult&gt; codeBlock)
{
var proxy = (IClientChannel)_channelFactory.CreateChannel();
bool success = false;
try
{
var result = codeBlock((T)proxy);
proxy.Close();
success = true;
return result;
}
catch(..)
{
//Exception handling here.
}
finally
{
if (!success)
{
proxy.Abort();
}
}
}
}
</code>
<h2>How to use it</h2>
<code>
//Expose this to your system through an interface for proper loosely coupling.
public bool IsUsernameAvailable(string name)
{
return Service&lt;IUserManagementService&gt;.Use&lt;bool&gt;(proxy =&gt; proxy.IsUsernameAvailable(name));
}
</code>

For those of you using <a href="http://blog.davidbarrett.net/archive/2007/11.aspx" target="_blank">disposable Clients</a> (clients that implement IDisposable) you can use a very similar approach, just wrap the code inside the Use method with a using statement.
<h2>With disposable clients</h2>
<code>public static class Service&lt;T&gt; where T : IDisposable, new()
{
public static ChannelFactory&lt;T&gt; _channelFactory = new  ChannelFactory&lt;T&gt;("");
public static TResult Use&lt;TResult&gt;(Func&lt;T, TResult&gt;  codeBlock)
{
using (var proxy = new T())</code><code>
{
bool success = false;
try
{
var result = codeBlock((T)proxy);
proxy.Close();
success = true;
return result;
}
catch(..)
{
//Exception handling here.
}
}
}
}</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2010-06-02 01:36:37</wp:post_date>
		<wp:post_date_gmt>2010-06-02 01:36:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-exception-handling-and-disposing-channels</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1275442602]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[YXx6n4hWt96n]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[585611010]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[seo backlink]]></wp:comment_author>
			<wp:comment_author_email>steve.stefen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xrumerservice.org</wp:comment_author_url>
			<wp:comment_author_IP>46.109.198.133</wp:comment_author_IP>
			<wp:comment_date>2011-11-29 10:33:46</wp:comment_date>
			<wp:comment_date_gmt>2011-11-29 10:33:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[nice to be here machadogj.com owner found your site via Google but it was hard to find and I see you could have more visitors because there are not so many comments yet. I have found site which offer to dramatically increase traffic to your site http://xrumerservice.org they claim they managed to get close to 1000 visitors/day using their services you could also get lot more targeted traffic from search engines as you have now. I used their services and got significantly more visitors to my website. Hope this helps :) They offer improve page rank seo strategies <a href="http://xrumerservice.org" rel="nofollow">backlinks</a> building backlinks Take care. steve]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Using Razor from a Console Application</title>
		<link>http://machadogj.com/2010/07/using-razor-from-a-console-application/</link>
		<pubDate>Wed, 07 Jul 2010 23:42:57 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=168</guid>
		<description></description>
		<content:encoded><![CDATA[I just found out about Microsoft's new View engine <a href="http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx">Razor</a>. As soon as I read Scott's post about it which is great, I wanted to investigate it. One of the things that caught my attention was the fact that Scott said that the view didn't require to be hosted in a web application, and that executing it from a console app was possible.

So I went ahead, and few hours later of Reflector, dynamic compilation and trial and error (why not?), I figured out a way to do it.

First you need to download <a href="http://weblogs.asp.net/scottgu/archive/2010/07/06/introducing-webmatrix.aspx" target="_blank">WebMatrix</a>, the new MS tool for building simple websites fast and easy. We need WebMatrix so that we can pull the dlls we need in order to use Razor. After installing WebMatrix you can find the necessary assemblies in the following folder: C:Program Files (x86)Microsoft ASP.NETASP.NET Web Pagesv1.0Assemblies. In case you don't find them there, you can perform a Publish from WebMatrix and that will copy the dlls into the bin folder. The list of dlls we are looking for is:
Microsoft.WebPages.dll
Microsoft.WebPages.Compilation.dll
Microsoft.WebPages.Configuration.dll
Microsoft.WebPages.Helpers.dll
Microsoft.WebPages.Helpers.Toolkit.dll

Next thing we need to do is add the reference to our project of the following assemblies (you can add more if you want to access from the template cshtml or vbhtml files), and don't forget to mark them as "Copy Always":
System.dll
System.Core.dll
System.Web.dll
System.Web.Mvc.dll
System.Data.dll
System.Web.Extensions.dll
Microsoft.CSharp.dll
Microsoft.WebPages.dll
Microsoft.WebPages.Compilation.dll
Microsoft.WebPages.Configuration.dll
Microsoft.WebPages.Helpers.dll
Microsoft.WebPages.Helpers.Toolkit.dll
Microsoft.Data.Schema.dll

The only way I have found to execute a razor file (cshtml or vbhtml) is to parse the file with the parsers (Razor uses two parsers to parse a file, a MarkupParser, and a CodeParser, in this case I will use an HtmlMarkupParser and a CSharpCodeParser) found in Microsoft.WebPages.Compilation.Parser, and then compiling the result to a temporary assembly, and extracting the type from the new assembly. So I have wrapped this in a class I called RazorFactory like this:

Snippet
<pre>public class RazorFactory
    {
        public List&lt;String&gt; ReferencedAssemblies
        {
            get;
            private set;
        }
        private List&lt;string&gt; errors = new List&lt;string&gt;();
        public string[] Errors
        {
            get
            {
                return errors.ToArray();
            }
        }
        public RazorFactory()
        {
            ReferencedAssemblies = new List&lt;string&gt;();
            ReferencedAssemblies.Add("System.dll");
            ReferencedAssemblies.Add("System.Core.dll");
            ReferencedAssemblies.Add("System.Web.dll");
            ReferencedAssemblies.Add("System.Web.Mvc.dll");
            ReferencedAssemblies.Add("System.Data.dll");
            ReferencedAssemblies.Add("System.Web.Extensions.dll");
            ReferencedAssemblies.Add("Microsoft.CSharp.dll");
            ReferencedAssemblies.Add("Microsoft.WebPages.dll");
            ReferencedAssemblies.Add("Microsoft.WebPages.Compilation.dll");
            ReferencedAssemblies.Add("Microsoft.WebPages.Configuration.dll");
            ReferencedAssemblies.Add("Microsoft.WebPages.Helpers.dll");
            ReferencedAssemblies.Add("Microsoft.WebPages.Helpers.Toolkit.dll");
            ReferencedAssemblies.Add("Microsoft.Data.Schema.dll");
        }
        public T Create&lt;T&gt;(string fileName) where T : class
        {
            using (var reader = new StreamReader(fileName))
            {
                return Create&lt;T&gt;(reader);
            }
        }
        public T Create&lt;T&gt;(TextReader reader) where T : class
        {
            var codeParser = new CSharpCodeParser();
            var markupParser = new HtmlMarkupParser();
            var parser = new InlinePageParser(codeParser, markupParser);

            var listener = new CSharpCodeGeneratorParserListener(
                    "className",
                    "ASP",
                    "System.Web.HttpApplication",
                    "linePragmaFileName",
                    typeof(T).FullName);

            foreach (var n in CodeGeneratorSettings.GetGlobalImports())
                listener.AdditionalImports.Add(n);
            parser.Parse(reader, listener);

            var option = new System.CodeDom.Compiler.CompilerParameters();
            option.ReferencedAssemblies.AddRange(ReferencedAssemblies.ToArray());
            option.GenerateExecutable = false;
            option.GenerateInMemory = true;

            var options = new Dictionary&lt;string, string&gt;();
            options.Add("CompilerVersion", "v3.5");

            var compiler = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#", options);

            var compiled = compiler.CompileAssemblyFromDom(
                option,
                listener.GeneratedCode);

            foreach (var e in compiled.Errors)
                errors.Add(e.ToString());

            if (Errors.Length &gt; 0)
                return null;
            else
            {
                var page = Activator.CreateInstance(compiled.CompiledAssembly.GetTypes().FirstOrDefault()) as T;
                return page;
            }
        }
    }</pre>
With this you can build the "WebPage" you want to execute, and set it's properties as you choose. I have done to Base classes that will render the output in the Console or in a file. Here are the classes:

Snippet
<pre>    public class ConsoleWriter : WebPage
    {
        public new string Model
        {
            get;set;
        }
        public override void Execute()
        {
            this.Context = new HttpContextWrapper(new HttpContext(new HttpRequest(null, null, null), new HttpResponse(Console.Out)));
        }
        public override void WriteLiteral(object o)
        {
            if (o != null)
                Console.Write(o.ToString());
        }
        public override void Write(Microsoft.WebPages.Helpers.HelperResult result)
        {
            Write(result);
        }
        public override void Write(object value)
        {
            if (value != null)
                Console.Write(value.ToString());
        }
    }</pre>
No big deal in the ConsoleWriter. I have added a property called Model to ilustrate that you can add as many properties as you want, and you can use these to render output.
Here is the FileWriter:

Snippet
<pre>public class FileWriter&lt;T&gt; : WebPage, IDisposable
    {
        private string filePath;
        public string FilePath 
        {
            get
            {
                return filePath;
            }
            set
            {
                filePath = value;
                File.WriteAllText(FilePath, string.Empty);
                writer = new StreamWriter(FilePath);
                this.Context = new HttpContextWrapper(new HttpContext(new HttpRequest(null, "http://razor", null), new HttpResponse(writer)));
            }
        }
        private StreamWriter writer;
        public FileWriter()
        {
        }
        public new T Model
        {
            get;
            set;
        }
        public override void Execute()
        {

        }
        public override void WriteLiteral(object o)
        {
            if (o != null)
                writer.Write(o.ToString());
        }
        public override void Write(Microsoft.WebPages.Helpers.HelperResult result)
        {
            Write(result);
        }
        public override void Write(object value)
        {
            if (value != null)
                writer.Write(value.ToString());
        }
        public void Dispose()
        {
            if (writer != null)
            {
                writer.Flush();
                writer.Close();
                writer.Dispose();
            }
        }
    }</pre>
This is one is pretty much the same, but I have added Generics to it, and a property Model that is of type T, again to ilustrate that this is totally valid. I also chose to do this one IDisposable.

Here is how you would use these writers with our RazorFactory:

Snippet
<pre>    class Program
    {

        static void Main(string[] args)
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Test.txt");

            var factory = new RazorClient.RazorFactory();
            factory.ReferencedAssemblies.Add("ConsoleApplication1.exe");

            using (var page = factory.Create&lt;FileWriter&lt;string&gt;&gt;(filePath))
            {

                if (factory.Errors.Length &gt; 0)
                    foreach (var e in factory.Errors)
                        Console.WriteLine(e);
                else
                {
                    page.FilePath = filePath + ".rzr.txt";
                    page.Model = "this is my model";
                    page.Execute();
                }
            }
            Console.ReadKey();

        }
    }</pre>
Check out at how we can do page.Model = "this is my model", this could easily be page.Model = typeof(Customer) or whatever.

Here is the Test.txt file content:

ASP.NET Web Pages makes it easy to build powerful .NET based applications for the web.
Time: @DateTime.Now.ToString()
Model: @Model

And here is the Test.txt.rzr.txt file output:

ASP.NET Web Pages makes it easy to build powerful .NET based applications for the web.
Time: 7/7/2010 4:25:24 PM
Model: this is my model

Conclusion
We have seen how to run a cshtml or a vbhtml file and generate code, and we have encapsulated that into a helper factory that returns an instance of the template. Then we have provided two way to output the generated code, plus adding some typed and generic properties.

Update: check out my other <a href="http://thegsharp.wordpress.com/2010/07/16/razor-from-a-console-calling-child-templates/">post</a> on how to call child razor templates.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date>2010-07-07 23:42:57</wp:post_date>
		<wp:post_date_gmt>2010-07-07 23:42:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-razor-from-a-console-application</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="code-generation"><![CDATA[code generation]]></category>
		<category domain="category" nicename="razor"><![CDATA[Razor]]></category>
		<category domain="post_tag" nicename="razor"><![CDATA[Razor]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1278546177]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1278546178]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630305]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[9FsobpyBqIz0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Nurse]]></wp:comment_author>
			<wp:comment_author_email>andrew@andrewnurse.net</wp:comment_author_email>
			<wp:comment_author_url>http://blog.andrewnurse.net</wp:comment_author_url>
			<wp:comment_author_IP>71.227.174.255</wp:comment_author_IP>
			<wp:comment_date>2010-07-08 14:48:11</wp:comment_date>
			<wp:comment_date_gmt>2010-07-08 14:48:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very very cool! You beat me to it :).  I'll be posting a more detailed sample of using Razor from a Console App, but thanks for posting your initial explorations!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302585]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Tom]]></wp:comment_author>
			<wp:comment_author_email>tomb@tombell.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://tombell.org.uk</wp:comment_author_url>
			<wp:comment_author_IP>87.102.109.45</wp:comment_author_IP>
			<wp:comment_date>2010-07-09 11:28:53</wp:comment_date>
			<wp:comment_date_gmt>2010-07-09 11:28:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great post, and was something I was initially looking to do for a project I wish to work on once Razor is released outside of WebMatrix.  However when I run the code samples you've provided, I get an Exception saying it cannot find the compiler csc.exe, have you come across this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302590]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2010-07-10 17:58:44</wp:comment_date>
			<wp:comment_date_gmt>2010-07-10 17:58:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Tom, I haven't come across that error. Feel free to send me the project to machadogj@gmail.com.

Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>24</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302590]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302688]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Tom]]></wp:comment_author>
			<wp:comment_author_email>tomb@tombell.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://tombell.org.uk</wp:comment_author_url>
			<wp:comment_author_IP>188.222.201.93</wp:comment_author_IP>
			<wp:comment_date>2010-07-10 23:01:31</wp:comment_date>
			<wp:comment_date_gmt>2010-07-10 23:01:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It was my fault, I put "3.5" instead of "v3.5" in the options!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>25</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302688]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302710]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Razor from a console &#8211; calling child templates &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/07/16/razor-from-a-console-calling-child-templates/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.136</wp:comment_author_IP>
			<wp:comment_date>2010-07-16 14:09:54</wp:comment_date>
			<wp:comment_date_gmt>2010-07-16 14:09:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] LinQ          &larr; Using Razor from a Console&nbsp;Application [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Mahesh Raja Velaga]]></wp:comment_author>
			<wp:comment_author_email>maheshraja_v@yahoo.co.in</wp:comment_author_email>
			<wp:comment_author_url>http://maheshrajavelaga.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>121.242.106.34</wp:comment_author_IP>
			<wp:comment_date>2010-07-23 12:30:53</wp:comment_date>
			<wp:comment_date_gmt>2010-07-23 12:30:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The idea of thinking of using Razor like this, by itself, fascinates me.

Great Job !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302587]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[nitzzzu]]></wp:comment_author>
			<wp:comment_author_email>nitzzzu@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.79.121.102</wp:comment_author_IP>
			<wp:comment_date>2010-07-28 08:20:01</wp:comment_date>
			<wp:comment_date_gmt>2010-07-28 08:20:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[As the templates are compiled in memory, is it possible to release them to not produce memory leaks?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302588]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2010-07-28 13:15:11</wp:comment_date>
			<wp:comment_date_gmt>2010-07-28 13:15:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Nitzzzu, once you load an assembly you can't unload it, however that won't produce memory leaks. If you want to release all the assemblies that have been generated you can kick this entire process inside it's own application domain, and then unload the application domain. However if you run this from a console app, I don't think it will be necessary. If you have a special scenario, or if you are planning to kick this process from a winforms application, feel free to provide me with more details.

In order to avoid memory leaks during the execution of a template, templates themselves are IDisposable so you can enclose the template variable in a using() statement.

Hope this helps!
Gus]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>29</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302588]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302687]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[nitzzzu]]></wp:comment_author>
			<wp:comment_author_email>nitzzzu@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.79.121.102</wp:comment_author_IP>
			<wp:comment_date>2010-07-29 08:37:14</wp:comment_date>
			<wp:comment_date_gmt>2010-07-29 08:37:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the fast response. I would like to use Razor as a reporting engine because it has a lot of potential, but the only problem that I see now is this "memory leak" caused by the inmemory compilation in the same app domain as the main application. I couldn't find a good solution to this (to work both in ASP .NET and Desktop apps) as running in a separate app domain and still having access to the "model" is quite a complex scenario. It's really sad that the dynamic assemblies cannot be unloaded.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>30</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302687]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302711]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2010-07-29 12:17:51</wp:comment_date>
			<wp:comment_date_gmt>2010-07-29 12:17:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nitzzzu, you only need to compile the assembly the first time you are going to execute the template. In this case, since I'm using Razor from a Console app I didn't have the need to store the dll in my disk (even though I am already working on caching the assembly).

In your case you could compile the template into an assembly and save it to the hard drive, and then add the reference of the dll to your website or desktop app. That way you won't be compiling anything in runtime, thus being much faster, and no extra dlls will be loaded.

Hope this helps!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>31</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302711]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302723]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Mikael Söderström]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/mikaelsoderstrom/archive/2010/08/03/use-razor-for-t4-templates.aspx</wp:comment_author_url>
			<wp:comment_author_IP>66.129.67.214</wp:comment_author_IP>
			<wp:comment_date>2010-08-03 13:01:28</wp:comment_date>
			<wp:comment_date_gmt>2010-08-03 13:01:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Use Razor for T4 Templates...</strong>

Razor, the new ASP.NET MVC View Engine from Microsoft, makes it possible to write much cleaner views...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Mikael Söderström]]></wp:comment_author>
			<wp:comment_author_email>vimpyboy@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/mikaelsoderstrom</wp:comment_author_url>
			<wp:comment_author_IP>194.132.255.132</wp:comment_author_IP>
			<wp:comment_date>2010-08-03 13:12:55</wp:comment_date>
			<wp:comment_date_gmt>2010-08-03 13:12:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Gustavo,

I couldn´t find you mail address anywhere, so I post here instead. :-)

I used your code to create a T4 Text Templating Engine Host which uses Razor instead of the original T4 syntax.

You can find it here:
http://bit.ly/91lhdS

Good job btw! :-)

/Mikael Söderström]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302591]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[2carz]]></wp:comment_author>
			<wp:comment_author_email>tocarz@live.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.2carz.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>41.196.206.147</wp:comment_author_IP>
			<wp:comment_date>2010-08-07 23:34:16</wp:comment_date>
			<wp:comment_date_gmt>2010-08-07 23:34:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[good post]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302592]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Gunnar Peipman]]></wp:comment_author>
			<wp:comment_author_email>gpeipman@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/gunnarpeipman/</wp:comment_author_url>
			<wp:comment_author_IP>46.131.1.155</wp:comment_author_IP>
			<wp:comment_date>2010-12-05 00:14:49</wp:comment_date>
			<wp:comment_date_gmt>2010-12-05 00:14:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Gustavo!
Thanks for great post, this is exactly what I was looking for. I plan to blog about the topic and it is good if some technical work is already done. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302593]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Blog J.Schweiss]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jschweiss.de/blog/post/2011/02/12/Hosting-the-Razor-Engine-for-Templating-in-Non-Web-Applications.aspx</wp:comment_author_url>
			<wp:comment_author_IP>81.201.103.33</wp:comment_author_IP>
			<wp:comment_date>2011-02-12 13:17:58</wp:comment_date>
			<wp:comment_date_gmt>2011-02-12 13:17:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Hosting the Razor Engine for Templating in Non-Web Applications...</strong>

Hosting the Razor Engine for Templating in Non-Web Applications...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Dan Maharry]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.hmobius.com/post/2011/03/04/Reflector-Giveaway-Wrap-Up.aspx</wp:comment_author_url>
			<wp:comment_author_IP>87.117.223.199</wp:comment_author_IP>
			<wp:comment_date>2011-03-06 22:09:21</wp:comment_date>
			<wp:comment_date_gmt>2011-03-06 22:09:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Reflector Giveaway Wrap Up...</strong>

Reflector Giveaway Wrap Up...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Reflector Giveaway Wrap Up - Genel | Zeytin.Net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://site.zeytin.net/genel/reflector-giveaway-wrap-up.html</wp:comment_author_url>
			<wp:comment_author_IP>93.89.23.24</wp:comment_author_IP>
			<wp:comment_date>2011-06-23 20:10:27</wp:comment_date>
			<wp:comment_date_gmt>2011-06-23 20:10:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Using Razor from a Console Application : http://thegsharp.wordpress.com/2010/07/07/using-razor-from-a-console-application/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Razor from a console - calling child templates</title>
		<link>http://machadogj.com/2010/07/razor-from-a-console-calling-child-templates/</link>
		<pubDate>Fri, 16 Jul 2010 14:09:48 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[In my previous <a href="http://thegsharp.wordpress.com/2010/07/07/using-razor-from-a-console-application/">post</a> I showed how to run a Razor template (.NET's new view engine) from a console app in order to generate code. In this post I will demostrate how to run another razor template from within a razor template.

This is actually quiet simple, and since we already have the "RazorClient.dll" referenced in the RazorFactory code, we can achieve this with the following code (this goes inside a razor template):

Snippet
<pre>@{
	var factory = new RazorClient.RazorFactory();

	using (var template = factory.Create&lt;RazorClient.FileWriter&gt;(@"C:UsersGusDocumentsVisual Studio 2010ProjectsConsoleApplication1ConsoleApplication1Test2.txt"))
	{

		if(factory.Errors.Length &gt; 0)
		{
			//do something
		}
		else
		{
			template.FilePath = @"C:UsersGusDocumentsVisual Studio 2010ProjectsConsoleApplication1ConsoleApplication1Test2.txt.out.txt";
			template.Execute();
		}
	}
}
</pre>
Notice how we need to include the namespace of the classes like in RazorClient.RazorFactory.

This code being so easy led me to the idea of having a main razor file to act as a project and fire the rest of the templates. And I took advantage of the fact that we are firing the rest of the templates from a Razor file to generate a report that showed the status of each template in HTML format. Here is a sample:

Snippet
<pre>&lt;html&gt;
&lt;head&gt;
	&lt;style type="text/css"&gt;
	.success
	{
		background-color: green;
	}

	.failed
	{
		color: white;
		background-color: red;
	}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;My project name here&lt;/h1&gt;
&lt;p&gt;
Project generated on @DateTime.Now
&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;Template&lt;/td&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Errors&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Test2.cshtml&lt;/td&gt;
@{
	try
	{
		//this is my block code.
		var factory = new RazorClient.RazorFactory();
		using (var template = factory.Create&lt;RazorClient.FileWriter&gt;(@"C:UsersGusDocumentsVisual Studio 2010ProjectsConsoleApplication1ConsoleApplication1Test2.txt"))
		{
 			if(factory.Errors.Length &gt; 0)
			{
				this.Write("&lt;td class='failed'&gt;Failed&lt;/td&gt;");
				this.Write("&lt;td&gt;");
				foreach(var t in factory.Errors)
				{
					this.Write(t);
					this.Write("&lt;br /&gt;");
				}
				this.Write("&lt;/td&gt;");
			}
			else
			{
				template.FilePath = @"C:UsersGusDocumentsVisual Studio 2010ProjectsConsoleApplication1ConsoleApplication1Test2.txt.out.txt";
				template.Execute();
				this.Write("&lt;td class='success'&gt;Successful&lt;/td&gt;&lt;td&gt;&lt;/td&gt;");
			}
		}
	}
	catch(Exception ex)
	{
		this.Write("&lt;td class='failed'&gt;Failed&lt;/td&gt;");
		this.Write("&lt;td&gt;");
		this.Write(ex.ToString());
		this.Write("&lt;/td&gt;");
	}
}
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
When I ran this main template, the following html was generated (you might want to tune it up a little, html design is not my thing :)):
<h1>My project name</h1>
Project generated on 7/16/2010 10:44:33 AM
<table>
<tbody>
<tr>
<td>Template</td>
<td>Status</td>
<td>Errors</td>
</tr>
<tr>
<td>Test2.txt</td>
<td>Successful</td>
<td></td>
</tr>
</tbody>
</table>
So in this post I showed that having a main template to fire the rest of the child templates is a good idea.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2010-07-16 14:09:48</wp:post_date>
		<wp:post_date_gmt>2010-07-16 14:09:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>razor-from-a-console-calling-child-templates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-generation"><![CDATA[code generation]]></category>
		<category domain="category" nicename="razor"><![CDATA[Razor]]></category>
		<category domain="post_tag" nicename="razor"><![CDATA[Razor]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1279289388]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1279289389]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[OQZvXRaeEYS5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630293]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Using Razor from a Console Application &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/07/07/using-razor-from-a-console-application/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.2.48</wp:comment_author_IP>
			<wp:comment_date>2010-07-16 14:21:16</wp:comment_date>
			<wp:comment_date_gmt>2010-07-16 14:21:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] LinQ          &larr; WCF &#8211; Exception handling and disposing&nbsp;channels Razor from a console &#8211; calling child&nbsp;templates &rarr; [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Introduction to MVP in ASP .NET</title>
		<link>http://machadogj.com/2010/08/introduction-to-mvp-in-asp-net/</link>
		<pubDate>Wed, 04 Aug 2010 13:23:31 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[First we’ll remember a few things about the pattern Model View Presenter. The model represents your business rules, or business model. The View is the form that the user will be using, and the Presenter will be the connection between the Model and the View. To simplify things, we are going to say that the View’s responsibilities are two: to expose the data to the user and the presenter, and to notify of events to the presenter. The presenter will act upon this events based on the View state, and consume the model in order to update the state of the view.

Let’s look at the first example, we need a page where I can see my account settings. We’ll need the UserName and the roles of our account. We’ll start by building our View:
<pre>&lt;form id="form1" runat="server"&gt;
 &lt;label&gt;User name&lt;/label&gt;
 &lt;asp:Label runat="server" ID="lblUserName"&gt;&lt;/asp:Label&gt;
 &lt;br /&gt;
 &lt;label&gt;Roles&lt;/label&gt;
 &lt;ul&gt;
  &lt;%= RenderRoles() %&gt;
 &lt;/ul&gt;
&lt;/form&gt;</pre>
Now we need a way to expose the UserName and Roles to the presenter. In this case we’ll create some properties in the code behind:
<pre>public string UserName
 {
 get { return lblUserName.Text; }
 set { lblUserName.Text = value; }
 }

 public string[] Roles
 {
 get { return (string[])ViewState["Roles"]; }
 set { ViewState["Roles"] = value; }
 }</pre>
This is what we want to expose to the presenter. So we’ll create an IAccountView like that looks like this:
<pre> interface IAccountView
 {
  string UserName { get; set; }
  string[] Roles { get; set; }
 }</pre>
In order to render the Roles we’ll add the following method:
<pre> protected string RenderRoles()
 {
  if (Roles != null)
 {
  var sb = new StringBuilder();
  foreach (var role in Roles)
   sb.AppendLine(string.Format("&lt;li&gt;{0}&lt;/li&gt;", role));
  return sb.ToString();
 }
 else
  return string.Empty;
 }</pre>
Now we need a Presenter for our view. The only thing we need to notify to the presenter is that we are rendering for the first time, and we need to load the form. So we’ll need a presenter that conforms to this interface:
<pre> interface IAccountPresenter
 {
  void OnInitialize();
 }</pre>
There’s a very good reason for naming the method OnInitialize and not Load, or Initialize. We’ll make a design choice here and whenever it’s possible (and convenient) we’ll start our presenter interface methods with “On” to illustrate that it’s an event. This will make the presenter code cleaner by dividing notification methods from other helper methods.

So here is how the Page_Load might look like:
<pre> IAccountPresenter presenter;
 protected void Page_Load(object sender, EventArgs e)
 {
  presenter = new AccountPresenter(this);
  if (!IsPostBack)
  {
   presenter.OnInitialize();
  }
 }</pre>
And that’s it for our View for now. Now let’s build this AccountPresenter. Notice that the Presenter depends on the View, and that’s why it receives the view in the constructor. As for the OnInitialize, that’s where the presenter has to go over to the model to get that information and manipulate the view in order to update the status of the View. Here’s our presenter:
<pre> public class AccountPresenter : IAccountPresenter
 {
  IAccountView view;
  AccountModel model;
  public AccountPresenter(IAccountView account)
  {
   view = account;
   model = new AccountModel();
  }

  internal void OnInitialize()
  {
   view.UserName = model.GetUserName();
   view.Roles = model.GetUserRoles(view.UserName);
  }
 }</pre>
How the model retrieves the user name and the roles doesn’t matter, that’s your business rules. You might even have a return “Gustavo”; hardcoded in the GetUserName as far as I’m concerned ;)

Up to here, we have the same MVP example you’ll find everywhere. The advantages so far are: that you have your model out of your code behind; you have your presenter and view loosely coupled so you could even mock or IoC these; and you divided the code and the classes responsibilities thus minimizing the classes complexity. But there are a lot of other reasons to use MVP. Let’s see how we can start building up this MVP example a little.
<h2>Base Interfaces and Base Classes</h2>
I usually consider it a good practice to have both base interfaces and base classes in my code. It adds extensibility and reusability points in the code. I think we could use some base interfaces in here.
<h3>IView</h3>
IView will contain whatever we want to expose to every presenter. The only thing that comes to my mind right now is the Title of the page, but we can get anything like stuff you would usually keep in the session or take from the MasterPage.
<pre> public interface IView
 {
  string Title { get; set; }
 }</pre>
<h3>IPresenter</h3>
The view depends on the presenter, and from the view’s perspective the first thing we need from a presenter is to be able to set its view. So our IPresenter will have a method for doing this (here is our first exception to our “On” prefix rule):
<pre> public interface IPresenter
 {
  void SetView(Views.IView view);
  void OnInitialize();
 }</pre>
<h3>BaseView</h3>
BaseView will be our base class for all our views. This class will implement IView, and will have some of the things we do in every page. Such as the Page_Load method. There’s a high chance that for every form we do using MVP we’ll want to create our presenter in the Page_Load, and set the View pretty much like we did in our AccountView. So let’s refactor our code so we don’t have to handle this in every codebehind.
<pre> public abstract class BaseView&lt;T&gt; : Page, IView where T : IPresenter, new()
 {

  public virtual T Presenter { get; set; }
  protected void Page_Load(object sender, EventArgs e)
  {
   Presenter = new T();
   Presenter.SetView(this);
   if (!IsPostBack)
   {
    Initialize();
    Presenter.OnInitialize();
   }
  }
  public virtual void Initialize(){}
 }</pre>
We could easily get rid of the “new()” constraint over T if we had an IoC container, but in this case for the sake of simplicity we’ll omit that part.
<h3>BasePresenter</h3>
Our BasePresenter will implement the IPresenter and solve the SetView so we don’t have to take of this in every presenter.
<pre> public class BasePresenter&lt;T&gt; : IPresenter where T : IView 
 {
  public T View { get; set; }
  public virtual void SetView(Views.IView view)
  {
   if (view == null)
   throw new ArgumentNullException("view");
   if (!view is T)
    throw new ArgumentException("view parameter must be of type: " + typeof(T).Name, "view");

   View = (T)view;
  }
  public virtual void OnInitialize(){}
 }</pre>
<h2>The result</h2>
Next we should inherit IAccountView from IView, IAccountPresenter from IPresenter, Account from BaseView and AccountPresenter from BasePresenter. And here’s how Account looks like:
<pre> public partial class Account : BaseView&lt;AccountPresenter&gt;
 {

  public string UserName
  {
   get { return lblUserName.Text; }
   set { lblUserName.Text = value; }
  }

  public string[] Roles
  {
   get { return (string[])ViewState["Roles"]; }
   set { ViewState["Roles"] = value; }
  }

  #region render methods
  protected string RenderRoles()
  {
   if (Roles != null)
   {
    var sb = new StringBuilder();
    foreach (var role in Roles)
     sb.AppendLine(string.Format("&lt;li&gt;{0}&lt;/li&gt;", role));
    return sb.ToString();
   }
   else
    return string.Empty;
  }
  #endregion

 }</pre>
As you can see, it only has the specific implementation of IAccountView, and no Page_Load method! Now let’s look at our AccountPresenter:
<pre> public class AccountPresenter : BasePresenter&lt;IAccountView&gt;
 {
  AccountModel model;
  public AccountPresenter()
  {
   model = new AccountModel();
  }

  public override void OnInitialize()
  {
   View.UserName = model.GetUserName();
   View.Roles = model.GetUserRoles(View.UserName);
  }
 }</pre>
As you can see we can take care of our Model and our events only without worrying about the SetView plumbing.

In this post we have showed how we could take advantage of MVP and base classes in order to create extensibility and reusability points for our web pages. As an example of this, we have centralized the Presenter instantiation and initialization.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2010-08-04 13:23:31</wp:post_date>
		<wp:post_date_gmt>2010-08-04 13:23:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction-to-mvp-in-asp-net</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP .NET]]></category>
		<category domain="post_tag" nicename="mvp"><![CDATA[MVP]]></category>
		<category domain="category" nicename="patterns-source-code"><![CDATA[Patterns]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[patterns]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1280928211]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1280928211]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[cS76vx00SvkL]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[546619313]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CodeCampBA Presentacion</title>
		<link>http://machadogj.com/2010/09/codecampba-presentacion/</link>
		<pubDate>Mon, 06 Sep 2010 12:06:21 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[Luego de la presentacion de RESTful Services a la carte en el CodeCamp Buenos Aires 2010, algunos de los participantes preguntaron por el material de la presentacion, asi que aqui les dejo el power point.

<a href="http://machadogj.com/wp-content/uploads/2010/09/restful_services_codecamp_2010.pptx">RESTful_Services_Codecamp_2010</a>

Saludos!]]></content:encoded>
		<excerpt:encoded><![CDATA[Luego de la presentacion de RESTful Services a la carte en el CodeCamp Buenos Aires 2010, algunos de los participantes preguntaron por el material de la presentacion, asi que aqui les dejo el power point.]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2010-09-06 12:06:21</wp:post_date>
		<wp:post_date_gmt>2010-09-06 12:06:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codecampba-presentacion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codecamp"><![CDATA[CodeCamp]]></category>
		<category domain="post_tag" nicename="dataservices"><![CDATA[DataServices]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="post_tag" nicename="restful-services"><![CDATA[RESTful Services]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1283774781]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1283774783]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ozOGMD6arx1d]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Codecamp BA - RESTful Services</title>
		<link>http://machadogj.com/2010/09/codecamp-ba-restful-services/</link>
		<pubDate>Fri, 17 Sep 2010 13:48:16 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[Since I already had the presentation from the CodeCamp Buenos Aires, I thought I’d translate it to English and explain what the presentation was about.

REST has earned a place amongst applications that consume ‘resource-centric’ services. Microsoft has addressed this by giving WCF REST capabilities, and then took their commitment even further by lunching WCF DataServices and the OData Protocol. In this presentation we cover how to build RESTful services with WCF REST, WCF DataServices and even with ASP .NET MVC.
<a href="http://machadogj.com/wp-content/uploads/2010/09/restful_services_codecamp_2010_en.pptx">RESTful Services Codecamp 2010 English</a>
<h1>REST</h1>
REST which stands for “Representational State Transfer” is an architectural style for building web services over HTTP. By saying “architectural style” we mean that there are no specifications or standards that we need to follow in order to make a service RESTful; instead we have principles to adhere. The fact that these principles are not mandatory gives us a sense of RESTfulness, the more and the better we adhere to these principles, the more RESTful our service will be.
<h2>The five REST principles are:</h2>
<ol>
	<li>Identify resources with URIs.</li>
	<li>Use the standard HTTP verbs (GET, POST, PUT, DELETE) to operate over the resources.</li>
	<li>Link resources using their URIs.</li>
	<li>Expose the resource representation in multiple formats (xml, json, etc)</li>
	<li>Stateless Communication.</li>
</ol>
Here there are some examples of Principle number 1:

<strong><a href="http://miservice/rooms">http://</a><a href="http://miservice/rooms">myservice/rooms</a></strong> this could be the link to the list of all the rooms in a building.
<strong><a href="http://miservice/roomS/3">http://</a><a href="http://miservice/roomS/3">myservice/roomS/3</a> </strong>this could be the link to the room number 3..

<strong><a href="http://miservice/Colors/red">http://</a><a href="http://miservice/Colors/red">myservice/Colors/red</a></strong> this could be the link to the color red.

<strong><a href="http://miservice/Transaction/1145001">http://</a><a href="http://miservice/Transaction/1145001">myservice/Transaction/1145001</a></strong> and this could be our way of representing transactions in REST, by exposing the transaction as a resource and providing a proper representation.

The four HTTP standard verbs could be used in the following way:
<ul>
	<li><strong>GET</strong>: <em>Returns a representation of the resource</em></li>
	<li><strong>PUT</strong>: <em>Updates the resource</em></li>
	<li><strong>POST</strong>: <em>Creates a resource </em></li>
	<li><strong>DELETE</strong>: <em>Deletes a resource</em></li>
</ul>
Whe can link resources to form higher-order resources:

&lt;order self=’http://example.com/orders/1234’&gt;

&lt;amount&gt;23&lt;/amount&gt;

&lt;product ref=’http://example.com/products/4554’ /&gt;

&lt;customer ref=’http://example.com/customers/1234’ /&gt;

&lt;/order&gt;

Notice how the id is represented by a Uri to itself.

Ideally we should offer our consumers different formats of the representation of our resources. Upon their request of a particular format, the service should return the resource accordingly.

GET /accounts('UBS')

Host: restsamples.com

Accept: application/<strong>atom+xml</strong>

…

GET /accounts('UBS')

Host: restsamples.com

Accept: application/<strong>json</strong>

…

And as for stateless communications, we should not keep a state of the communication, and this means no server-side sessions, and no client-side cookies. The service should act upon request.

GET /accounts('ubs')

Host: restsamples.com

Accept: application/account+xml

&lt;account&gt;&lt;contact ref="/contacts('ubs-12345')"&gt;...&lt;/contact&gt;&lt;/account&gt;

…

GET /contacts('ubs-12345')

Host: restsamples.com

Accept: application/contact+xml

&lt;contact id="ubs-12345"&gt;...&lt;/contact&gt;
<h1>Microsoft &amp; REST</h1>
Microsoft currently offers three different flavors of RESTful services. Two of them are under the WCF umbrella: WCF WebHttp and WCF DataServices; and the other is ASP .NET MVC (yes, apart from websites being REST applications, MVC supports REST principles for services). In the next posts we'll take a look at each one:
<ul>
	<li><a href="http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-restful-services-part-2/">WCF WebHttp</a>. Full control over the Uri, Formats and protocols.</li>
	<li><a href="http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-%E2%80%93-restful-services-part-3/">WCF DataServices</a>. We design based on a Data Model, and we expose both IQueryables&lt;T&gt; members and IUpdatable behavior.</li>
	<li><a href="http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-%E2%80%93-restful-services-part-4/">ASP .NET MVC</a>. Apart from websites being REST, we explore how we can offer other formats like json.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[REST has earned a place amongst applications that consume ‘resource-centric’ services. Microsoft has addressed this by giving WCF REST capabilities, and then took their commitment even further by lunching WCF DataServices and the OData Protocol. In this presentation we cover how to build RESTful services with WCF REST, WCF DataServices and even with ASP .NET MVC.]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2010-09-17 13:48:16</wp:post_date>
		<wp:post_date_gmt>2010-09-17 13:48:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codecamp-ba-restful-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codecamp"><![CDATA[CodeCamp]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284731297]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1284731299]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ciDiVhUP6l6D]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Codecamp BA - RESTful Services part 2</title>
		<link>http://machadogj.com/2010/09/codecamp-ba-restful-services-part-2/</link>
		<pubDate>Fri, 17 Sep 2010 13:52:52 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[In the previous post I have explained what REST is and it's principles. In this post we'll see how we can make RESTful services in WCF WebHttp and how to implement each of the principles.
<h2>WCF WebHttp</h2>
WCF WebHttp is the new name for the System.ServiceModel.Web namespace where most of the support for services over HTTP is. As part of the WCF it relies in the usual constructs such as ServiceContract, DataContract, bindings, channels, etc.

Since WCF WebHttp has been designed to work over HTTP, it gives us more control over the Uris, formats and the protocols based on HTTP than any other programming model inside WCF.

While working on .NET 3.5, you will have to download the WCF REST Starter Kit Preview 2 if you want to build RESTful services. The starter kit comes with a lot of samples that show how to implement each of the principles, and even more!

As for the .NET 4.0 we already have many of the classes of the starter kit in the System.Service.Model namespace. And we even have out of the box support for the UrlRoutingModule, in order to build Uri templates, pretty much like we build them in MVC. However if what you want is to develop a client of a REST service, then I recommend downloading and including the starter kit assemblies too, because we’ll find some very useful extensions in there.

Now let’s look at a very simple example of a REST service that exposes contacts as resources. From visual studio 2010 you can download the “WCF REST Service Template 40 (CS)” extension and you’ll get a new project type in the create project dialog.

<a href="http://machadogj.com/wp-content/uploads/2010/09/wcf-rest-service-app-template2.png"><img class="alignnone size-full wp-image-222" title="wcf rest service app template" src="http://machadogj.com/wp-content/uploads/2010/09/wcf-rest-service-app-template2.png" alt="" width="630" height="89" /></a>

The first thing you’ll notice from this project once you create one, is the lack of an .svc file. This is because we are using the UrlRoutingModule as you can see in the web.config file:
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">modules</span> <span style="color:#274796;">runAllManagedModulesForAllRequests</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">true</span><span style="color:#0000e6;">"</span><span style="color:#a65700;">&gt;</span>
      <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">add</span> <span style="color:#274796;">name</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">UrlRoutingModule</span><span style="color:#0000e6;">"</span> <span style="color:#274796;">type</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">System.Web.Routing.UrlRoutingModule, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</span><span style="color:#0000e6;">"</span> <span style="color:#a65700;">/&gt;</span>
<span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">modules</span><span style="color:#a65700;">&gt;</span></pre>
And the url you’ll have to type into the browser will depend on what has been registered in the Global.asax (just like in ASP .NET MVC).
<pre><span style="color:#800000;font-weight:bold;">private</span> <span style="color:#800000;font-weight:bold;">void</span> RegisterRoutes<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
<span style="color:#800080;">{</span>
<span style="color:#696969;">// Edit the base address of Service1 by replacing the "Service1" string below</span>
RouteTable<span style="color:#808030;">.</span>Routes<span style="color:#808030;">.</span>Add<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> ServiceRoute<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Service1</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">new</span> WebServiceHostFactory<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">typeof</span><span style="color:#808030;">(</span>ContactsService<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#800080;">}</span></pre>
<a href="http://machadogj.com/wp-content/uploads/2010/09/url-routing1.png"><img class="alignnone size-full wp-image-230" title="url routing" src="http://machadogj.com/wp-content/uploads/2010/09/url-routing1.png" alt="" width="630" height="125" /></a>

As you’ll see, the service contract looks pretty much like any other service contract:
<pre>[ServiceContract<span style="color:#808030;">]</span>
interface IContactsService
{

[WebGet<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
List&lt;Contact&gt; GetCollection();

[WebInvoke<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Method <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">POST</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
Contact Create(Contact instance);

[WebGet<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
Contact Get(string id);

[WebInvoke<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Method <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">PUT</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
Contact Update(string id, Contact instance);

[WebInvoke<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Method <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">DELETE</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
void Delete(string id);

}</pre>
Except for these two attributes WebGet, and WebInvoke. The interesting part of these attributes are the UriTemplate and the Method. The UriTemplate defines the way the Uris will look. So for instance if you do a GET to our service you will get the collection of contacts. But if you perform a GET with “/anyid” then you will get the contact with id “anyid”. As for the Method is pretty simple, it specifies the HTTP verb that’s being requested over the resource.

And nothing special about the Contact data contract:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> Contact
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Id <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span>  set<span style="color:#800080;">;</span><span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Name <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> LastName <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Email <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Location <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span></pre>
The service implementation doesn’t have anything special. You would have to implement this interface, and either retrieve the contacts, or update/delete/insert contacts into a repository.

If we wanted to make good use of HTTP protocol, and somebody requested a resource that doesn't exist, then we should return a status code 404. We can accomplish that by throwing a WebFaultException like this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">        public</span> Contact Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> id<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            var contact <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> ContactRepository<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span>id<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>contact <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> WebFaultException<span style="color:#808030;">&lt;</span><span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Contact not found.</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> System<span style="color:#808030;">.</span>Net<span style="color:#808030;">.</span>HttpStatusCode<span style="color:#808030;">.</span>NotFound<span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">return</span> contact<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
If we want to support multiple formats, WCF comes with an out of the box auto format selection option that can easily be enabled from the the web.config:

<a href="http://machadogj.com/wp-content/uploads/2010/09/automatic-format.png"><img class="alignnone size-full wp-image-232" title="automatic format" src="http://machadogj.com/wp-content/uploads/2010/09/automatic-format.png" alt="" width="630" height="168" /></a>

And last as a bonus, the WCF team added some support for a help page which helps you describe the operations you have available in your service so that others can build their clients (REST does not support WSDL or anything like that). So if you look at your service model configuration you will see a new property:

<a href="http://machadogj.com/wp-content/uploads/2010/09/help-enabled1.png"><img class="alignnone size-full wp-image-225" title="help enabled" src="http://machadogj.com/wp-content/uploads/2010/09/help-enabled1.png" alt="" width="630" height="168" /></a>

And thanks to this, if you browse <a href="http://server/myservice/help">http://server/myservice/help</a> you’ll see a help page. Pretty much like this one:

<a href="http://machadogj.com/wp-content/uploads/2010/09/help-page2.png"><img class="alignnone size-full wp-image-226" title="help page" src="http://machadogj.com/wp-content/uploads/2010/09/help-page2.png" alt="" width="621" height="289" /></a>
<h2>REST Client</h2>
Now that we have the help page, we are ready to build our client application. Here you can download the WCF REST Starter Kit Preview 2 that comes with some very interesting extensions that make client development a lot easier. You'll have to include Microsoft.Http and Microsoft.Http.Extensions dlls to your project.

We can use the client library to read the service response as a string like this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpClient client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>SERVICE_URL<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#696969;">// Getting the response as a string </span>
                client<span style="color:#808030;">.</span>DefaultHeaders<span style="color:#808030;">.</span>ContentType <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">text/json</span><span style="color:#800000;">"</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span> <span style="color:#696969;">// no need for a url.</span>
                <span style="color:#800080;">{</span>
                    System<span style="color:#808030;">.</span>Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Getting all contacts</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    var stringResponse <span style="color:#808030;">=</span> response<span style="color:#808030;">.</span>Content<span style="color:#808030;">.</span>ReadAsString<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    System<span style="color:#808030;">.</span>Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span>stringResponse<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span></pre>
Notice the use of the extension method ReadAsString(). You also have a ReadAsXElement extension method to query the response using Linq to XML; and my favorite extension method ReadAsDataContract that will deserialize the response using the DataContract Serializer and return an instance of T. Here's how we would query our Contacts service:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpClient client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>SERVICE_URL<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    var contacts <span style="color:#808030;">=</span> response<span style="color:#808030;">.</span>Content<span style="color:#808030;">.</span>ReadAsDataContract<span style="color:#808030;">&lt;</span>ContactList<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    <span style="color:#800000;font-weight:bold;">foreach</span> <span style="color:#808030;">(</span>var contact <span style="color:#800000;font-weight:bold;">in</span> contacts<span style="color:#808030;">)</span>
                        System<span style="color:#808030;">.</span>Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">.</span>Format<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Name: {0}</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> contact<span style="color:#808030;">.</span>Name<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
            System<span style="color:#808030;">.</span>Console<span style="color:#808030;">.</span>ReadKey<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span></pre>
And here are the DataContracts:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>CollectionDataContract<span style="color:#808030;">(</span>Namespace <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">http://schemas.datacontract.org/2004/07/Contacts.Lib</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Name<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">ArrayOfContact</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> ItemName<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Contact</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
    <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> ContactList <span style="color:#808030;">:</span> List<span style="color:#808030;">&lt;</span>Contact<span style="color:#808030;">&gt;</span> <span style="color:#800080;">{</span> <span style="color:#800080;">}</span>

    <span style="color:#808030;">[</span>DataContract<span style="color:#808030;">(</span>Namespace <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">http://schemas.datacontract.org/2004/07/Contacts.Lib</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
    <span style="color:#800000;font-weight:bold;">public</span> partial <span style="color:#800000;font-weight:bold;">class</span> Contact
    <span style="color:#800080;">{</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Id<span style="color:#800080;">;</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Name<span style="color:#800080;">;</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Email<span style="color:#800080;">;</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> LastName<span style="color:#800080;">;</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Location<span style="color:#800080;">;</span>
        <span style="color:#808030;">[</span>DataMember<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Ref<span style="color:#800080;">;</span>
    <span style="color:#800080;">}</span></pre>
And for the client side bonus, you can wrap the GET, PUT, POST and DELETE into a base class:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Collections<span style="color:#808030;">.</span>Generic<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Linq<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Text<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> Microsoft<span style="color:#808030;">.</span>Http<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Runtime<span style="color:#808030;">.</span>Serialization<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Configuration<span style="color:#800080;">;</span>

<span style="color:#800000;font-weight:bold;">namespace</span> Contacts<span style="color:#808030;">.</span>Client
<span style="color:#800080;">{</span>
    <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">abstract</span> <span style="color:#800000;font-weight:bold;">class</span> RestClient
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">private</span> <span style="color:#800000;font-weight:bold;">string</span> url<span style="color:#800080;">;</span>

        <span style="color:#800000;font-weight:bold;">public</span> RestClient<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            url <span style="color:#808030;">=</span> ConfigurationManager<span style="color:#808030;">.</span>AppSettings<span style="color:#808030;">[</span><span style="color:#800000;">"</span><span style="color:#0000e6;">ContactsSvcUrl</span><span style="color:#800000;">"</span><span style="color:#808030;">]</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">.</span>IsNullOrEmpty<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> ConfigurationErrorsException<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">ContactsSvcUrl application setting is null.</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> RestClient<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> serviceUrl<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">.</span>IsNullOrEmpty<span style="color:#808030;">(</span>serviceUrl<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> ArgumentNullException<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">serviceUrl</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>url <span style="color:#808030;">=</span> serviceUrl<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">protected</span> T ExecuteGet<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> operation<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span>operation<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    <span style="color:#800000;font-weight:bold;">return</span> response<span style="color:#808030;">.</span>Content<span style="color:#808030;">.</span>ReadAsDataContract<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">protected</span> T ExecutePut<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> operation<span style="color:#808030;">,</span> T entity<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                HttpContent content <span style="color:#808030;">=</span> HttpContentExtensions<span style="color:#808030;">.</span>CreateDataContract<span style="color:#808030;">(</span>entity<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Put<span style="color:#808030;">(</span>operation<span style="color:#808030;">,</span> content<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    <span style="color:#800000;font-weight:bold;">return</span> response<span style="color:#808030;">.</span>Content<span style="color:#808030;">.</span>ReadAsDataContract<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">protected</span> T ExecutePost<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> operation<span style="color:#808030;">,</span> T entity<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                HttpContent content <span style="color:#808030;">=</span> HttpContentExtensions<span style="color:#808030;">.</span>CreateDataContract<span style="color:#808030;">(</span>entity<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Post<span style="color:#808030;">(</span>operation<span style="color:#808030;">,</span> content<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    <span style="color:#800000;font-weight:bold;">return</span> response<span style="color:#808030;">.</span>Content<span style="color:#808030;">.</span>ReadAsDataContract<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">protected</span> <span style="color:#800000;font-weight:bold;">void</span> ExecuteDelete<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> operation<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpClient<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>HttpResponseMessage response <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Delete<span style="color:#808030;">(</span>operation<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    response<span style="color:#808030;">.</span>EnsureStatusIsSuccessful<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span>
<span style="color:#800080;">}</span></pre>
... so that we can define our Contacts proxy like this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Collections<span style="color:#808030;">.</span>Generic<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Linq<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> System<span style="color:#808030;">.</span>Text<span style="color:#800080;">;</span>
<span style="color:#800000;font-weight:bold;">using</span> Microsoft<span style="color:#808030;">.</span>Http<span style="color:#800080;">;</span>

<span style="color:#800000;font-weight:bold;">namespace</span> Contacts<span style="color:#808030;">.</span>Client
<span style="color:#800080;">{</span>
    <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> ContactsClient <span style="color:#808030;">:</span> RestClient
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">public</span> ContactsClient<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> serviceUrl<span style="color:#808030;">)</span> <span style="color:#808030;">:</span> <span style="color:#800000;font-weight:bold;">base</span><span style="color:#808030;">(</span>serviceUrl<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> ContactList GetAll<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> ExecuteGet<span style="color:#808030;">&lt;</span>ContactList<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> Contact Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> id<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> ExecuteGet<span style="color:#808030;">&lt;</span>Contact<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span>id<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> Contact Update<span style="color:#808030;">(</span>Contact contact<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> ExecutePut<span style="color:#808030;">&lt;</span>Contact<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span>contact<span style="color:#808030;">.</span>Id<span style="color:#808030;">,</span> contact<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">void</span> Delete<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> id<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            ExecuteDelete<span style="color:#808030;">(</span>id<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

    <span style="color:#800080;">}</span>
<span style="color:#800080;">}</span></pre>
Not so hard after all hu? So in this post we saw how to build our first REST service in which we expose basic CRUD operations for our Contacts; and then how to consume this service from our clients.]]></content:encoded>
		<excerpt:encoded><![CDATA[In the previous post I have explained what REST is and it's principles. In this post we'll see how we can make RESTful services in WCF WebHttp and how to implement each of the principles.]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2010-09-17 13:52:52</wp:post_date>
		<wp:post_date_gmt>2010-09-17 13:52:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codecamp-ba-restful-services-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="webhttp"><![CDATA[WebHttp]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284731575]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1284731577]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630297]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[8w7YOe5mmn44]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Codecamp BA &#8211; RESTful Services &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-restful-services/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.232</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 14:03:50</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 14:03:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] LinQ          &larr; CodeCampBA&nbsp;Presentacion Codecamp BA &#8211; RESTful Services part&nbsp;2 &rarr; [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[maria]]></wp:comment_author>
			<wp:comment_author_email>mrstrk12@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.youripadcenter.com</wp:comment_author_url>
			<wp:comment_author_IP>72.229.231.130</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 17:53:14</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 17:53:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hey,these information was very useful,thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302577]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Rest Service | AllGraphicsOnline.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://allgraphicsonline.com/wordpress/?p=79822</wp:comment_author_url>
			<wp:comment_author_IP>208.70.78.16</wp:comment_author_IP>
			<wp:comment_date>2011-05-24 07:17:26</wp:comment_date>
			<wp:comment_date_gmt>2011-05-24 07:17:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] REST service that exposes thegsharp.wordpress.com [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Codecamp BA – RESTful Services part 3</title>
		<link>http://machadogj.com/2010/09/codecamp-ba-%e2%80%93-restful-services-part-3/</link>
		<pubDate>Fri, 17 Sep 2010 13:56:04 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>WCF DataServices</h1>
In our previous example we showed how to create a RESTful service for exposing Contacts as resources. This included the ability to add, delete, modify and get the contacts; which are the basic CRUD operations. By doing this we designed our own little protocol for CRUDs for ourselves. If you want to communicate effectively with our service then you should know, and implement this protocol. If instead of building our own “protocol” from scratch we used a standardized protocol, then it would be easier for others to consume our services. The WCF DataServices team realized this and decided to make use of a protocol that handles the CRUD operations very well, AtomPub. AtomPub is a syndication protocol derived from Atom (similar to RSS) which apart from syndicating information, it allows for CRUD operations, and all this in a RESTful way. However the WCF DataServices team did not settle with this and decided to take it one step further, creating a protocol based on AtomPub, that apart from advanced CRUD operations, it could also handle complex querying capabilities, and that’s how Open Data Protocol was born. So WCF DataServices team, provided an interface (IUpdatable) that when implemented can be exposed as an AtomPub feed, and decided to make IQueryable&lt;T&gt; members available on the service through the OData protocol.
<h2>IQueryable&lt;T&gt;</h2>
Let’s build our first dataservice for exposing the files inside a folder. In this case, we are not going to modify the files, so we just need to be able to query the files. In Visual Studio create a WCF service, and add a new item “WCF Data Service”
<a href="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-item.png"><img class="alignnone size-full wp-image-243" title="wcf data service item" src="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-item.png" alt="" width="628" height="153" /></a>
We’ll name it FileDataService, and when we open the file, the first thing we’ll notice is that there’s a generic parameter that needs to be completed:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> FileDataServices <span style="color:#808030;">:</span> DataService<span style="color:#808030;">&lt;</span> <span style="color:#696969;">/* </span><span style="color:#ffffff;background:#808000;">TODO: put your data source class name here </span><span style="color:#696969;">*/</span> <span style="color:#808030;">&gt;</span>
    <span style="color:#800080;">{</span>
    <span style="color:#800080;">}</span>
</pre>
Where we see the TODO comment, we need to put our data source/container/context class, basically, the class that will hold the IQueryable&lt;T&gt; members we want to expose. So let’s build our FileContext class, which will contain a property of type IQueryable&lt;FileDataContract&gt;, and let’s add a simple class FileDataContract that will contain the information we want the service to expose.
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> FileContext
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> DirectoryPath <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> <span style="color:#800000;font-weight:bold;">private</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> FileContext<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> dir<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            DirectoryPath <span style="color:#808030;">=</span> dir<span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span><span style="color:#808030;">!</span>Directory<span style="color:#808030;">.</span>Exists<span style="color:#808030;">(</span>DirectoryPath<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> ArgumentException<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Directory doesn't exist</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">dir</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            Files <span style="color:#808030;">=</span> Directory<span style="color:#808030;">.</span>GetFiles<span style="color:#808030;">(</span>dir<span style="color:#808030;">)</span>
                <span style="color:#808030;">.</span>Select<span style="color:#808030;">(</span>f <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> <span style="color:#800000;font-weight:bold;">new</span> FileDataContract
                <span style="color:#800080;">{</span>
                    Id <span style="color:#808030;">=</span> Path<span style="color:#808030;">.</span>GetFileName<span style="color:#808030;">(</span>f<span style="color:#808030;">)</span><span style="color:#808030;">.</span>Replace<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">.</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">-</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                    Name <span style="color:#808030;">=</span> Path<span style="color:#808030;">.</span>GetFileNameWithoutExtension<span style="color:#808030;">(</span>f<span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                    Extension <span style="color:#808030;">=</span> Path<span style="color:#808030;">.</span>GetExtension<span style="color:#808030;">(</span>f<span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                    CreatedOn <span style="color:#808030;">=</span> File<span style="color:#808030;">.</span>GetCreationTime<span style="color:#808030;">(</span>f<span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                    Size <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> FileInfo<span style="color:#808030;">(</span>f<span style="color:#808030;">)</span><span style="color:#808030;">.</span>Length
                <span style="color:#800080;">}</span><span style="color:#808030;">)</span>
                <span style="color:#808030;">.</span>AsQueryable<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> IQueryable<span style="color:#808030;">&lt;</span>FileDataContract<span style="color:#808030;">&gt;</span> Files <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> <span style="color:#800000;font-weight:bold;">private</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span>

    <span style="color:#808030;">[</span>DataServiceKey<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Id</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
    <span style="color:#808030;">[</span>DataContract<span style="color:#808030;">]</span>
    <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> FileDataContract
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Id <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Name <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">string</span> Extension <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> DateTime CreatedOn <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">long</span> Size <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span>
</pre>
The only special thing about the FileDataContract class is it’s class-level attribute DataServiceKey. In REST every resource must be identifiable through an Uri. So the DataService needs to know which property to use as the key to build the Uri. By setting “Id” we are saying that the Id property will be the primary key.

And also notice that when building the Id property in the FileContext, we are replacing dots “.” with hyphens “-“, that’s because dataservice keys are better off without dots.

Here we have our DataService
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> FileDataServices <span style="color:#808030;">:</span> DataService<span style="color:#808030;">&lt;</span> FileContext <span style="color:#808030;">&gt;</span>
    <span style="color:#800080;">{</span>
        <span style="color:#696969;">// This method is called only once to initialize service-wide policies.</span>
        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">static</span> <span style="color:#800000;font-weight:bold;">void</span> InitializeService<span style="color:#808030;">(</span>DataServiceConfiguration config<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#696969;">// TODO: set rules to indicate which entity sets and service operations are visible, updatable, etc.</span>
            <span style="color:#696969;">// Examples:</span>
            config<span style="color:#808030;">.</span>SetEntitySetAccessRule<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Files</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> EntitySetRights<span style="color:#808030;">.</span>AllRead<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#696969;">// config.SetServiceOperationAccessRule("MyServiceOperation", ServiceOperationRights.All);</span>
            config<span style="color:#808030;">.</span>DataServiceBehavior<span style="color:#808030;">.</span>MaxProtocolVersion <span style="color:#808030;">=</span> DataServiceProtocolVersion<span style="color:#808030;">.</span>V2<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">protected</span> <span style="color:#800000;font-weight:bold;">override</span> FileContext CreateDataSource<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">new</span> FileContext<span style="color:#808030;">(</span>@<span style="color:#800000;">"</span><span style="color:#0000e6;">D:Files</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span>
</pre>
Since our data source doesn’t have a parameterless constructor, then we have to override the CreateDataSource in order to provide the FileContext.

And also we are setting the access rule to allow to read all the EntitySet “Files”, you need to do this in order to query Files.

And now we are ready to start our service and browse it. The first thing we’ll see it’s the Default view of the service and it lists all the entity sets available in the service.
<a href="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-default1.png"><img class="alignnone size-full wp-image-245" title="wcf data service default" src="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-default1.png" alt="" width="311" height="184" /></a>
And if you browse to $metadata you will find enough metadata to create the datacontracts, and create your service proxy (in Visual Studio you can do this by adding the service reference).
<a href="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-metadata.png"><img class="alignnone size-full wp-image-246" title="wcf data service metadata" src="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-metadata.png" alt="" width="557" height="324" /></a>
Once you add the service reference to your client application, you can start querying the dataservice using Linq against datacontracts.
<pre style="color:#000000;background:#ffffff;">var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> FileDataService<span style="color:#808030;">.</span>FileContext<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> Uri<span style="color:#808030;">(</span>svcUrl<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            var query <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Files<span style="color:#808030;">.</span>Where<span style="color:#808030;">(</span>f <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> f<span style="color:#808030;">.</span>CreatedOn <span style="color:#808030;">&lt;</span> DateTime<span style="color:#808030;">.</span>Now<span style="color:#808030;">.</span>Date
                &amp;&amp; f<span style="color:#808030;">.</span>Extension <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">.xml</span><span style="color:#800000;">"</span>
                &amp;&amp; f<span style="color:#808030;">.</span>Size <span style="color:#808030;">&gt;</span> <span style="color:#008c00;">1024</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">foreach</span> <span style="color:#808030;">(</span>var file <span style="color:#800000;font-weight:bold;">in</span> query<span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#696969;">//do stuff.</span>
            <span style="color:#800080;">}</span>
</pre>
<h2>IUpdatable</h2>
If we were to implement IUpdatable in our FileContext then we would have the ability to create, update and delete FileDataContracts. Fortunately, WCF DataService shipped with a few contexts that are IUpdatable: Entity Framework and Linq to Sql.

<a href="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-ef.png"><img class="alignnone size-full wp-image-250" title="wcf data service ef" src="http://machadogj.com/wp-content/uploads/2010/09/wcf-data-service-ef.png" alt="" width="630" height="146" /></a>

Notice how we can use the DirectoryContainer that has been generated through the Directory.edmx directly in the DataService generic parameter. Now that we have an IUpdatable container we can use the dataservice like this:
<pre style="color:#000000;background:#ffffff;">var client <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> DirectoryDataService<span style="color:#808030;">.</span>DirectoryContainer<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> Uri<span style="color:#808030;">(</span>svcUrl<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            var query <span style="color:#808030;">=</span> client<span style="color:#808030;">.</span>Contacts<span style="color:#808030;">.</span>Where<span style="color:#808030;">(</span>c <span style="color:#808030;">=</span>&amp;gt<span style="color:#800080;">;</span> c<span style="color:#808030;">.</span>Id <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">1</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            var contact <span style="color:#808030;">=</span> query<span style="color:#808030;">.</span>FirstOrDefault<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            contact<span style="color:#808030;">.</span>Name <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Gustavo</span><span style="color:#800000;">"</span><span style="color:#800080;">;</span>

            client<span style="color:#808030;">.</span>SaveChanges<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
</pre>
Pretty much like EntityFramework itself right?

And last, as a bonus, we also get something that the OData protocol calls Service Operations, and that allows us to expose a certain query to a resource. This is very simple to understand by looking at one example. In our DataService class we can add one public method like this one:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>WebGet<span style="color:#808030;">]</span>
<span style="color:#800000;font-weight:bold;">public</span> IQueryable&amp;lt<span style="color:#800080;">;</span>Contact&amp;gt<span style="color:#800080;">;</span> LocalContacts<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> currentLocation<span style="color:#808030;">)</span>
<span style="color:#800080;">{</span>
<span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>CurrentDataSource<span style="color:#808030;">.</span>Contacts
<span style="color:#808030;">.</span>Include<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Location</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span>
<span style="color:#808030;">.</span>Where<span style="color:#808030;">(</span>c <span style="color:#808030;">=</span>&amp;gt<span style="color:#800080;">;</span> c<span style="color:#808030;">.</span>Location<span style="color:#808030;">.</span>Name <span style="color:#808030;">=</span><span style="color:#808030;">=</span> currentLocation<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#800080;">}</span>
</pre>
So if you perform a GET to LocalContacts with a valid currentLocation, then you will get the result of performing that query in the EntityFramework container.

So that's an introduction to WCF DataServices, and how to build your own containers or take advantage of all the stuff EntityFramework and Linq to SQL has got for us.]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post we explore how to create REST services using WCF DataService and the OData protocol.]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2010-09-17 13:56:04</wp:post_date>
		<wp:post_date_gmt>2010-09-17 13:56:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codecamp-ba-%e2%80%93-restful-services-part-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dataservices"><![CDATA[DataServices]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284731766]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1284731767]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[k6JYvd0aS4YU]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Codecamp BA &#8211; RESTful Services &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-restful-services/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.232</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 14:03:58</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 14:03:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] WCF DataServices. We design based on a Data Model, and we expose both IQueryables&lt;T&gt; members and IUpdatable behavior. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Codecamp BA – RESTful Services part 4</title>
		<link>http://machadogj.com/2010/09/codecamp-ba-%e2%80%93-restful-services-part-4/</link>
		<pubDate>Fri, 17 Sep 2010 13:58:50 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>ASP .NET MVC</h1>
In this post we will see how we can apply REST in ASP .NET MVC pages. And even though websites are REST applications, they expose representation of resources (html files); and that they handle various HTTP Verbs, with MVC you can also expose resources like json, xml, atom, etc. What’s even more, you can return an html representation or a json representation depending on the HTTP headers.
<h2>MVC</h2>
MVC stands for Model View Controller, and basically what this means is that we should model our business in a Model layer, and then act upon user requests in our Controller layer returning the corresponding View that will be rendered to the user. As for our Model, we will think of it as our business logic, and in this example, we will have two entities: Contacts and Locations. One contact resides in one location, and our locations will hold multiple contacts.
We want our MVC web page to do is handle two scenarios, the possibility to see a list of Locations and the possibility to edit a contact (and the contact’s location). The first one is easy, and it’s just as you would do any other webpage in MVC. We would have controller for locations:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> LocationsController <span style="color:#808030;">:</span> Controller
    <span style="color:#800080;">{</span>

        <span style="color:#800000;font-weight:bold;">public</span> Models<span style="color:#808030;">.</span>ContactsModel Model <span style="color:#800080;">{</span> get<span style="color:#800080;">;</span> <span style="color:#800000;font-weight:bold;">private</span> set<span style="color:#800080;">;</span> <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> LocationsController<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            Model <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> Models<span style="color:#808030;">.</span>ContactsModel<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#696969;">// GET: /Locations/</span>
        <span style="color:#800000;font-weight:bold;">public</span> ActionResult Index<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            var locations <span style="color:#808030;">=</span> Model<span style="color:#808030;">.</span>GetLocations<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>ToList<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">return</span> View<span style="color:#808030;">(</span>locations<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

    <span style="color:#800080;">}</span>
</pre>
Notice that the Index() method will return a View that holds a list of the locations. Here could be such a view:
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;">@ Page Title</span><span style="color:#808030;background:#ffffe8;">=</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;"> Language</span><span style="color:#808030;background:#ffffe8;">=</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;">C#</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;"> MasterPageFile</span><span style="color:#808030;background:#ffffe8;">=</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;">~/Views/Shared/Site.Master</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;"> Inherits</span><span style="color:#808030;background:#ffffe8;">=</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;">System.Web.Mvc.ViewPage&lt;IEnumerable&lt;Directory.Website.DirectoryService.Location&gt;&gt;</span><span style="color:#808030;background:#ffffe8;">"</span><span style="color:#000000;background:#ffffe8;"> </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span>
<span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">asp:Content</span><span style="color:#274796;"> </span><span style="color:#074726;">ID</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"Content1"</span><span style="color:#274796;"> ContentPlaceHolderID</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"TitleContent"</span><span style="color:#274796;"> runat</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"server"</span><span style="color:#a65700;">&gt;</span>
    Locations
<span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">asp:Content</span><span style="color:#a65700;">&gt;</span>
<span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">asp:Content</span><span style="color:#274796;"> </span><span style="color:#074726;">ID</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"Content2"</span><span style="color:#274796;"> ContentPlaceHolderID</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"MainContent"</span><span style="color:#274796;"> runat</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"server"</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">h2</span><span style="color:#a65700;">&gt;</span>Locations<span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">h2</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">table</span><span style="color:#a65700;">&gt;</span>
        <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">tr</span><span style="color:#a65700;">&gt;</span>
            <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">th</span><span style="color:#a65700;">&gt;</span>Id<span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">th</span><span style="color:#a65700;">&gt;</span>
            <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">th</span><span style="color:#a65700;">&gt;</span>Name<span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">th</span><span style="color:#a65700;">&gt;</span>
        <span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">tr</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;"> foreach </span><span style="color:#808030;background:#ffffe8;">(</span><span style="color:#000000;background:#ffffe8;">var item </span><span style="color:#800000;background:#ffffe8;font-weight:bold;">in</span><span style="color:#000000;background:#ffffe8;"> Model</span><span style="color:#808030;background:#ffffe8;">)</span><span style="color:#000000;background:#ffffe8;"> { </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span>
        <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">tr</span><span style="color:#a65700;">&gt;</span>
            <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">td</span><span style="color:#a65700;">&gt;</span><span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;">: item</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">Id </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span><span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">td</span><span style="color:#a65700;">&gt;</span>
            <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">td</span><span style="color:#a65700;">&gt;</span><span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;">: item</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">Name </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span><span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">td</span><span style="color:#a65700;">&gt;</span>
        <span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">tr</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;"> } </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span>
    <span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">table</span><span style="color:#a65700;">&gt;</span>
<span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">asp:Content</span><span style="color:#a65700;">&gt;</span>
</pre>
Nothing special so far, but in the second scenario it will get more interesting.  Now, I need an Edit Contact form that will present the locations as a dropdown list to the user. The user will be able to choose the location and then save the changes on the Contact. Clearly, the controller will be a ContactsController where we are going to return a view with the contact information. But as for the Locations, we might be able to use our LocationsController if we wanted to load the dropdown list through AJAX. In that case we need the website to return a json with the list of locations. As for contact view, here is how we could render the location field:
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">div</span><span style="color:#274796;"> </span><span style="color:#074726;">class</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"editor-field"</span><span style="color:#a65700;">&gt;</span>
                <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">select</span><span style="color:#274796;"> </span><span style="color:#074726;">id</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"LocationID"</span><span style="color:#274796;"> </span><span style="color:#074726;">name</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"LocationId"</span><span style="color:#a65700;">&gt;</span><span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">select</span><span style="color:#a65700;">&gt;</span>
                <span style="color:#a65700;">&lt;</span><span style="color:#800000;font-weight:bold;">script language="</span><span style="color:#0000e6;">javascript</span><span style="color:#800000;font-weight:bold;">" type="text/javascript"</span><span style="color:#a65700;">&gt;</span>
                    $<span style="color:#808030;">.</span>getJSON<span style="color:#808030;">(</span><span style="color:#0000e6;">"Locations"</span><span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">function</span> <span style="color:#808030;">(</span>data<span style="color:#808030;">)</span> <span style="color:#800080;">{</span>
                        <span style="color:#800000;font-weight:bold;">var</span> items <span style="color:#808030;">=</span> <span style="color:#0000e6;">"&lt;option selected&gt;&lt;/option&gt;"</span><span style="color:#800080;">;</span>
                        $<span style="color:#808030;">.</span>each<span style="color:#808030;">(</span>data<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">function</span> <span style="color:#808030;">(</span>i<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">item</span><span style="color:#808030;">)</span> <span style="color:#800080;">{</span>
                            items <span style="color:#808030;">+=</span> <span style="color:#0000e6;">"&lt;option value='"</span> <span style="color:#808030;">+</span> <span style="color:#800000;font-weight:bold;">item</span><span style="color:#808030;">.</span>Value <span style="color:#808030;">+</span> <span style="color:#0000e6;">"'&gt;"</span> <span style="color:#808030;">+</span> <span style="color:#800000;font-weight:bold;">item</span><span style="color:#808030;">.</span>Text <span style="color:#808030;">+</span> <span style="color:#0000e6;">"&lt;/option&gt;"</span><span style="color:#800080;">;</span>
                        <span style="color:#800080;">}</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                        $<span style="color:#808030;">(</span><span style="color:#0000e6;">"#LocationID"</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>html<span style="color:#808030;">(</span>items<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                        $<span style="color:#808030;">(</span><span style="color:#0000e6;">"#LocationID"</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>val<span style="color:#808030;">(</span><span style="color:#0000e6;">'</span><span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;">: Model</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">Location</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">Id</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">ToString</span><span style="color:#808030;background:#ffffe8;">(</span><span style="color:#808030;background:#ffffe8;">)</span><span style="color:#000000;background:#ffffe8;"> </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span><span style="color:#0000e6;">'</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    <span style="color:#800080;">}</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">script</span><span style="color:#a65700;">&gt;</span>
                <span style="color:#a65700;background:#ffffe8;">&lt;%</span><span style="color:#000000;background:#ffffe8;">: Html</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">ValidationMessageFor</span><span style="color:#808030;background:#ffffe8;">(</span><span style="color:#000000;background:#ffffe8;">model </span><span style="color:#808030;background:#ffffe8;">=</span><span style="color:#808030;background:#ffffe8;">&gt;</span><span style="color:#000000;background:#ffffe8;"> model</span><span style="color:#008c00;background:#ffffe8;">.</span><span style="color:#000000;background:#ffffe8;">LocationId</span><span style="color:#808030;background:#ffffe8;">)</span><span style="color:#000000;background:#ffffe8;"> </span><span style="color:#a65700;background:#ffffe8;">%&gt;</span>
            <span style="color:#a65700;">&lt;/</span><span style="color:#800000;font-weight:bold;">div</span><span style="color:#a65700;">&gt;</span>
</pre>
Basically, we request a json to the server, and then build all the options of the dropdown list, and finally, we set the contact’s current location with the .val(..);
But now we need to handle the case where the LocationsController needs to return the json response. Here’s how we do that:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> ActionResult Index<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            var locations <span style="color:#808030;">=</span> Model<span style="color:#808030;">.</span>GetLocations<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>ToList<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span><span style="color:#808030;">!</span>HttpContext<span style="color:#808030;">.</span>Request<span style="color:#808030;">.</span>IsAjaxRequest<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">return</span> View<span style="color:#808030;">(</span>locations<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">else</span>
                <span style="color:#800000;font-weight:bold;">return</span> Json<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> SelectList<span style="color:#808030;">(</span>locations<span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Id</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Name</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">,</span> JsonRequestBehavior<span style="color:#808030;">.</span>AllowGet<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>
</pre>
The JsonRequestBehavior.AllowGet is just so that you can see the json’s response in the browser.
So that is how you can start exposing not only html content but also json, and other formats in MVC, reusing the Model logic, and the controllers.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2010-09-17 13:58:50</wp:post_date>
		<wp:post_date_gmt>2010-09-17 13:58:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>codecamp-ba-%e2%80%93-restful-services-part-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="asp-net"><![CDATA[ASP .NET]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1284731934]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1284731936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[iPqr68JanNlU]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[Codecamp BA &#8211; RESTful Services &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/09/17/codecamp-ba-restful-services/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.232</wp:comment_author_IP>
			<wp:comment_date>2010-09-17 14:04:04</wp:comment_date>
			<wp:comment_date_gmt>2010-09-17 14:04:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] ASP .NET MVC. Apart from websites being REST, we explore how we can offer other formats like json. [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NotNull Method Extension</title>
		<link>http://machadogj.com/2010/10/notnull-met-hod-extension/</link>
		<pubDate>Mon, 04 Oct 2010 21:23:38 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[My friend blogged about one his favorite method extensions for applying an action to a collection <a href="http://codelikehell.wordpress.com/2010/09/23/observablecollection-foreach/" target="_blank">here</a>. This got me thinking about my favorite method extensions, and here's one I'd actually like to share.

There are classes that are meant to hold a certain state, they may not have logic in it, and they usually have a very simple instantiation logic (or none). These classes are known as DTO (data transfer objects), and a very common DTO is the DataContract on WCF services. It's a good practice to wrap a certain request inside a Message (DTO), and the parameters of the operation in a Request (another DTO). For example, here is how we could call a CancelOrder operation:
<pre style="color:#000000;background:#ffffff;">var service <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> OrdersService<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
var message <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> CancelOrderMessage<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
var request <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> CancelOrderRequest<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
var orderId <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">123456XX</span><span style="color:#800000;">"</span><span style="color:#800080;">;</span>
request<span style="color:#808030;">.</span>OrderId <span style="color:#808030;">=</span> orderId<span style="color:#800080;">;</span>
message<span style="color:#808030;">.</span>Body <span style="color:#808030;">=</span> request<span style="color:#800080;">;</span>
service<span style="color:#808030;">.</span>CancelOrder<span style="color:#808030;">(</span>message<span style="color:#808030;">)</span><span style="color:#800080;">;</span></pre>
From the service operation point of view, we are only interested in the OrderId, but still we would have to check for the message not being null, and the request not being null and finally validate if we have a valid order id. With these two simple method extensions:

Snippet
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">    public</span> <span style="color:#800000;font-weight:bold;">static</span> <span style="color:#800000;font-weight:bold;">class</span> Extensions
    <span style="color:#800080;">{</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">static</span> <span style="color:#800000;font-weight:bold;">bool</span> IsNotNullOrEmpty<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">this</span> <span style="color:#800000;font-weight:bold;">string</span> from<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>from <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">false</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">else</span>
                <span style="color:#800000;font-weight:bold;">return</span> from<span style="color:#808030;">.</span>Trim<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>Length <span style="color:#808030;">&gt;</span> <span style="color:#008c00;">0</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">static</span> T NotNull<span style="color:#808030;">&lt;</span>T<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">this</span> T from<span style="color:#808030;">)</span> where T <span style="color:#808030;">:</span> <span style="color:#800000;font-weight:bold;">class</span><span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">new</span><span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>from <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
                <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">new</span> T<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">else</span>
                <span style="color:#800000;font-weight:bold;">return</span> from<span style="color:#800080;">;</span>

        <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span></pre>
We can now check for a valid order id like this:
Snippet
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">        public</span> CancelOrderResponseMessage CancelOrder<span style="color:#808030;">(</span>CancelOrderMessage message<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>message<span style="color:#808030;">.</span>NotNull<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>Body<span style="color:#808030;">.</span>NotNull<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>OrderId<span style="color:#808030;">.</span>IsNotNullOrEmpty<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#696969;">//cancel order.</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2010-10-04 21:23:38</wp:post_date>
		<wp:post_date_gmt>2010-10-04 21:23:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notnull-met-hod-extension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="extension-methods"><![CDATA[Extension Methods]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286227420]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286227421]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630312]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ngPv6pSxDAP8]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[Gunnar Peipman]]></wp:comment_author>
			<wp:comment_author_email>gpeipman@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/gunnarpeipman/</wp:comment_author_url>
			<wp:comment_author_IP>46.131.1.155</wp:comment_author_IP>
			<wp:comment_date>2010-12-05 00:46:01</wp:comment_date>
			<wp:comment_date_gmt>2010-12-05 00:46:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good idea! Can you develop it further so instead of default(T) we can use null object pattern?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302598]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2011-02-16 22:27:55</wp:comment_date>
			<wp:comment_date_gmt>2011-02-16 22:27:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Gunnar, I'm glad you liked it. Can you further explain what you mean by "null object pattern"? Maybe drop me a sample of what you would like to accomplish.
Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>46</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302598]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302694]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[Gunnar]]></wp:comment_author>
			<wp:comment_author_email>gunnar@dt.ee</wp:comment_author_email>
			<wp:comment_author_url>http://weblogs.asp.net/gunnarpeipman/</wp:comment_author_url>
			<wp:comment_author_IP>90.190.0.195</wp:comment_author_IP>
			<wp:comment_date>2011-02-17 08:00:15</wp:comment_date>
			<wp:comment_date_gmt>2011-02-17 08:00:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi!
Here are some references: http://en.wikipedia.org/wiki/Null_Object_pattern and http://martinfowler.com/eaaCatalog/specialCase.html. Martin Fowler calls this thing Special Case Pattern. In both cases the idea is simple - instead of fighting with null references we have dummy objects that we use instead of null. Maybe one of the most simple examples here is string.Empty :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302597]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2011-02-17 14:14:15</wp:comment_date>
			<wp:comment_date_gmt>2011-02-17 14:14:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Gunnar, I see what you mean. The most common example of that is a Logger property which you don't want to check for null everytime you want to log something, so you create a "dummy" Logger with nothing in it.

However, if you look at the code, you'll see that I'm doing something very similar. I'm not using default(T) which would result in null, I am doing new T() which will result in an empty T, kinda like a dummy T when used over DTOs.

In order to extend this to interfaces, we could mock a T with some mockery framework, and return that instead. Could be an interesting approach, but adding the reference of  a mockery framework is probably not a good idea in the majority of projects.

Does it make sense?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>48</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302597]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302695]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>SO-Aware - Putting OData to work</title>
		<link>http://machadogj.com/2010/10/so-aware-putting-odata-to-work/</link>
		<pubDate>Thu, 07 Oct 2010 19:52:32 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[In my previous posts I have explained about REST and the different options we have in .NET for building RESTful services. One of these options is to use WCF DataServices, a WCF programming model with which you can expose a data model in a RESTful way using the new OData protocol. OData is a protocol that extends AtomPub to provide complex querying capabilities.

Here is a real case: SO-Aware, a service repository tool by Tellago Studios that provides an OData-based RESTful API. With SO-Aware you can keep your WCF services information and configuration in one place, and have your services and clients consume this through a RESTful API.

Here are some useful links:
<ul>
	<li>Read more about it <a href="http://www.tellagostudios.com/products/so-aware%E2%84%A2">here</a>.</li>
	<li>Download an express edition <a href="http://www.tellagostudios.com/download">here</a>.</li>
	<li>Download a Virtual PC image <a href="http://www.tellagostudios.com/resources/so-aware-virtual-pc">here</a>.</li>
	<li>Watch a video from channel 9 <a href="http://channel9.msdn.com/shows/Endpoint/endpointtv-Meet-SO-Aware-Part-1/">here</a>.</li>
</ul>
So go ahead and check it out, you'll learn two cool things: how OData can be used in real products, and an excellent tool for service governance.
<div id="_mcePaste" class="mcePaste" style="position:absolute;left:-10000px;top:80px;width:1px;height:1px;overflow:hidden;">http://www.tellagostudios.com/resources/so-aware-virtual-pc</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2010-10-07 19:52:32</wp:post_date>
		<wp:post_date_gmt>2010-10-07 19:52:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-aware-putting-odata-to-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="post_tag" nicename="tellago"><![CDATA[Tellago]]></category>
		<category domain="post_tag" nicename="tellago-studios"><![CDATA[Tellago Studios]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286481152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286481153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[CpzLXBB7eYrJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[643000614]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SO-Aware - Setting up your first service</title>
		<link>http://machadogj.com/2010/10/so-aware-setting-up-your-first-service/</link>
		<pubDate>Wed, 13 Oct 2010 14:59:27 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[SO-Aware the new tool from Tellago Studios is a Service repository, that allows you to centralize the configuration so that it can be consumed by both the service and the client. This helps you solve things like versioning, environment specific configuration and integration problems. In this post we'll go through creating the configuration for our service and then setting up the service and the client.
<h2>Service configuration</h2>
Creating the service configuration in SO-Aware is pretty straight forward thanks to the website that is provided with SO-Aware installation. But if you want/need to set up the services programatically, you can do that through the OData RESTful API provided.

For this example, we'll use the service and client provided in the SO-Aware SDK which you can download from this <a href="http://www.tellagostudios.com/resources/so-aware-sdk-samples-and-utilities">link</a>. You will need to add the following dlls to your service project:
Tellago.ServiceModel.Governance.Hosting
Tellago.ServiceModel.Governance.ServiceConfiguration

And add the following references to your client:
Tellago.ServiceModel.Governance.Resources.Client
Tellago.ServiceModel.Governance.ServiceConfiguration
(all of the dlls are available in the SDK)
<h3>Creating the service</h3>
In order to set up your service, first you need to create the service. In our example we'll name our service "People Finder", you can see the form here:

<a href="http://machadogj.com/wp-content/uploads/2010/10/services-create1.png"><img class="alignnone size-full wp-image-293" title="Services-create" src="http://machadogj.com/wp-content/uploads/2010/10/services-create1.png" alt="" width="630" height="362" /></a>

The namespace field should be the namespace of the ServiceContract. the Messaging style should be one of: SOAP, REST or OData. Categories can be any type of categorization you might find useful.

After you create the service, a new section "Service Versions" will appear. SO-Aware helps you keep your services versioned by managing these "Service Versions" right here. So next thing we'll do is create our first version (1.0).

<a href="http://machadogj.com/wp-content/uploads/2010/10/service-version-create.png"><img class="alignnone size-full wp-image-294" title="Service-version-create" src="http://machadogj.com/wp-content/uploads/2010/10/service-version-create.png" alt="" width="630" height="385" /></a>

After you enter the WSDL Url, you have to paste the WSDL xml into the WSDL field. SO-Aware will process this information and store it so it can later create either the service or the client's endpoint.

When creating a service version in SO-Aware you might have a notification in the upper right corner like the following.

<a href="http://machadogj.com/wp-content/uploads/2010/10/error-notification.png"><img class="alignnone size-full wp-image-296" title="Error Notification" src="http://machadogj.com/wp-content/uploads/2010/10/error-notification.png" alt="" width="630" height="380" /></a>

This notification has a very cool feature, which is that it will give you access to more detailed information about the error. If you hit the "more details" link, it will show you the stack trace of the error.

In case you have an exception like the following:

... at
System.Data.Services.DataService`1.BatchDataService.HandleBatchContent(Stream
responseStream) <strong>XML Parsing: line 1, character 8, text/xmldecl not at the beginning </strong>
<strong>of input</strong> System.Data.SqlClient.SqlException at
...

<a href="http://machadogj.com/wp-content/uploads/2010/10/xml-parsing-error.png"><img class="alignnone size-full wp-image-295" title="XML Parsing error" src="http://machadogj.com/wp-content/uploads/2010/10/xml-parsing-error.png" alt="" width="630" height="424" /></a>

This might be due to blank spaces at the beginning of your WSDL field. You might get one of these errors if you copy and paste the wsdl from IE. The character number 8 might change, and depends on the amount of blank spaces.

If the details contain the following XML Parsing error:

"line 1, character 39, unable to switch the encoding"

Then all you have to do is remove the encoding attribute from the xml declaration,

For example:
original: &lt;?xml version="1.0" encoding="utf-8" ?&gt;
fixed: &lt;?xml version="1.0" ?&gt;

Once we have our Service Version in place, we can set the binding and behavior configurations, and also set up tests for each operation (not covered in this post). In our example (and despite of the endpoint name), we will set up the endpoint to use "basicHttp".

<a href="http://machadogj.com/wp-content/uploads/2010/10/endpoints-edit.png"><img class="alignnone size-full wp-image-298" title="Endpoints-edit" src="http://machadogj.com/wp-content/uploads/2010/10/endpoints-edit.png" alt="" width="545" height="342" /></a>

SO-Aware comes with quite a few endpoint bindings out of the box, and  you can create your own templates too.

Now that we have our endpoint configuration covered, we'll go ahead and consume this from the service and the client.
<h3>Using configuration from the WCF Service</h3>
In order to use the configuration stored in SO-Aware from our service, we will have to use the ServiceHostFactory provided by SO-Aware and set up a minimum configuration in the config file.

In order to use the ServiceHostFactory provided by SO-Aware, you have to go to your .svc file, right click on it, and hit on View Markup. In your markup you will add a "Factory" attribute with SO-Aware's factory as shown in the following code:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">&lt;</span><span style="color:#808030;">%</span>@ ServiceHost
   Language<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">C#</span><span style="color:#800000;">"</span>
   Service<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Tellago.ServiceModel.Governance.SDK.PeopleFinderService</span><span style="color:#800000;">"</span>
   CodeBehind<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">PeopleFinder.svc.cs</span><span style="color:#800000;">"</span>
   Factory<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Tellago.ServiceModel.Governance.Hosting.ConfigurableServiceHostFactory</span><span style="color:#800000;">"</span>
<span style="color:#808030;">%</span><span style="color:#808030;">&gt;</span></pre>
Our new factory needs to know the url for the Service Repository, and which service we are trying to expose. We can do that by adding SO-Aware configuration in the web.config. Inside Configuration/ConfigSections add the following
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">section</span> <span style="color:#274796;">name</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">serviceRepository</span><span style="color:#0000e6;">"</span> <span style="color:#274796;">
type</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">Tellago.ServiceModel.Governance.ServiceConfiguration.ServiceRepositoryConfigurationSection, Tellago.ServiceModel.Governance.ServiceConfiguration</span><span style="color:#0000e6;">"</span> <span style="color:#a65700;">/&gt;</span></pre>
And the serviceRepository section looks like:
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">serviceRepository</span> <span style="color:#274796;">url</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">http://localhost/soaware/ServiceRepository.svc</span><span style="color:#0000e6;">"</span><span style="color:#a65700;">&gt;</span>
  <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">services</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">service</span> <span style="color:#274796;">name</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">ref: People Finder(1.0)</span><span style="color:#0000e6;">"</span>
      <span style="color:#274796;">type</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">Tellago.ServiceModel.Governance.SDK.PeopleFinderService, PeopleFinderService</span><span style="color:#0000e6;">"</span> <span style="color:#a65700;">/&gt;</span>
  <span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">services</span><span style="color:#a65700;">&gt;</span>
<span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">serviceRepository</span><span style="color:#a65700;">&gt;</span></pre>
Notice how the name of the service contains the version of the service that should be used.

And finally in order to use this service from the client using SO-Aware configuration, we need to create the proxy in the following way:
<pre style="color:#000000;background:#ffffff;">var resolver <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> ConfigurationResolver<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> Uri<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">http://localhost/soaware/ServiceRepository.svc</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
var binding <span style="color:#808030;">=</span> resolver<span style="color:#808030;">.</span>ResolveBinding<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">basicHttp</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
var endpoint <span style="color:#808030;">=</span> resolver<span style="color:#808030;">.</span>ResolveEndpoint<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">People Finder(1.0)</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">WSHttpBinding_IPeopleFinderService</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#696969;">//here is our new way of creating the proxy.</span>
var proxy <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> PeopleFinderServiceClient<span style="color:#808030;">(</span>binding<span style="color:#808030;">,</span> endpoint<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
<span style="color:#696969;">//now we can use the proxy.</span>
proxy<span style="color:#808030;">.</span>CallMyOperation<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span></pre>
So in this post, we have seen how to set up our first service in SO-Aware and then how to use this configuration from the service and the client.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2010-10-13 14:59:27</wp:post_date>
		<wp:post_date_gmt>2010-10-13 14:59:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-aware-setting-up-your-first-service</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="post_tag" nicename="tellago"><![CDATA[Tellago]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286981967]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286981968]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[2LFsDshxKK7H]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[662923519]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SO-Aware - Centralizing WCF Configuration</title>
		<link>http://machadogj.com/2010/10/so-aware-centralizing-wcf-configuration/</link>
		<pubDate>Tue, 12 Oct 2010 13:12:28 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.tellagostudios.com/products/so-aware%E2%84%A2" target="_blank">SO-Aware</a>, is a Service Repository recently launched by Tellago Studios. With this tool you can centralize your WCF configuration, and consume this configuration from both services and clients (among other very interesting things like monitoring and testing). In this post we'll take a look at how SO-Aware service repository works.

At a high level of abstraction, we can say that SO-Aware service repository is broken down into the following components: A ServiceRepository database (SQL Server), an OData webservice that exposes all the configurations as resources, an ASP .NET website for managing everything in SO-Aware, and an SDK package which provides the necessary dlls to consume SO-Aware from both service and client. Roughly this is how it's layed out

<a href="http://machadogj.com/wp-content/uploads/2010/10/so-aware.png"><img class="alignnone size-full wp-image-313" title="so-aware" src="http://machadogj.com/wp-content/uploads/2010/10/so-aware.png" alt="" width="630" height="350" /></a>
<h2>How it's used</h2>
So the common work flow for managing your service configuration through SO-Aware would be to use the website (or the available OData API) to create your services, then add service versions to it (such as 1.0, 1.1, etc), and then configure the behaviors and bindings for the specific version. As a bonus, you can also add a category to the configuration so that you can have multiple configurations for the same service version. This comes very handy when having more than one environment.

After you have the configuration ready, you need to start using this configuration in two places, in the WCF service, and in your WCF Service clients. For your WCF Service to use SO-Aware's configuration, you need to use a special ServiceHostFactory that is provided in the <a href="http://www.tellagostudios.com/resources/so-aware-sdk-samples-and-utilities" target="_blank">SO-Aware  SDK toolkit</a>, and then configure just about enough for the factory to know the url of the Service Repository, the service name, version and category (way better than dozens of lines of &lt;system.ServiceModel&gt;, right?)

For the client to start using the centralized configuration, you need to use the ConfigurationResolver provided in the SDK as well with which you can resolve both the binding and the endpoint so you can use it with your service proxy. (you can click on the image above to see a small sample). Or you can use the swutil.exe tool provided in the SDK to generate the proxy using SO-Aware's ConfigurableClientBase.

SO-Aware supports the three types of web services currently available through the WCF stack: SOAP, REST and OData; and comes with a bunch of bindings out of the box for you to start using right away.

So that's how we can keep all of our WCF configuration centralized with this new tool. For further information you can go <a href="http://www.tellagostudios.com/" target="_blank">Tellago Studios</a> website.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2010-10-12 13:12:28</wp:post_date>
		<wp:post_date_gmt>2010-10-12 13:12:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-aware-centralizing-wcf-configuration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tellago-studios"><![CDATA[Tellago Studios]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286889148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286889149]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630329]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[qu6juK4GEHey]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[Diego]]></wp:comment_author>
			<wp:comment_author_email>diegogravi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://codelikehell.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>155.201.20.54</wp:comment_author_IP>
			<wp:comment_date>2010-10-12 19:06:46</wp:comment_date>
			<wp:comment_date_gmt>2010-10-12 19:06:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds really interesting. One thing that pops to the top of the concerns about this is if you have a solution to define your services and how they go from the db to the GUI. It would be very interesting to see a life cycle of a simple CRUD screen from the interface to the bottom layer or the other way round. Good post, keep it up mate!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302606]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.169.186</wp:comment_author_IP>
			<wp:comment_date>2010-10-12 20:18:43</wp:comment_date>
			<wp:comment_date_gmt>2010-10-12 20:18:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Diego, thanks for your comment, I'll be answering to your question in a new post to give out a clear explanation. Stay tuned.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>50</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[SO-Aware &#8211; Life cycle of a service call &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2010/10/13/so-aware-life-cycle-of-a-service-call/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.8</wp:comment_author_IP>
			<wp:comment_date>2010-10-13 12:17:33</wp:comment_date>
			<wp:comment_date_gmt>2010-10-13 12:17:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] LinQ          &larr; SO-Aware &#8211; Centralizing WCF&nbsp;Configuration [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>257</wp:comment_id>
			<wp:comment_author><![CDATA[Diegogravi]]></wp:comment_author>
			<wp:comment_author_email>diegogravi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.135.7.140</wp:comment_author_IP>
			<wp:comment_date>2012-05-04 05:21:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-04 05:21:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seems like a good product, but the thing that always bugged me was the usage of svcutil and the amount of time it takes to generate for hundreds of services. Does the swutil uses the same as svcutil, generates contract and/or operation from the IWsdlImportExtension? I am thinking in big scale enterprise architectures where the onion architecture is not applied and where no duplex channel factory can be created. Just the old school wcf proxies with corresponding namespaces for the contracts (grouped in regular domains)...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[518457717]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>SO-Aware - Life cycle of a service call</title>
		<link>http://machadogj.com/2010/10/so-aware-life-cycle-of-a-service-call/</link>
		<pubDate>Wed, 13 Oct 2010 12:17:30 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=325</guid>
		<description></description>
		<content:encoded><![CDATA[In my previous post about <a href="http://thegsharp.wordpress.com/2010/10/12/so-aware-centralizing-wcf-configuration/">centralizing WCF configuration with SO-Aware</a>, I was asked about the life-cycle of a hypothetical CRUD application request. So in this post we will go through the different steps in a simple user request to this application.

Roughly, the steps for a simple request are depicted in the following diagram.

<a href="http://machadogj.com/wp-content/uploads/2010/10/so-aware-high-level-cycle.png"><img class="alignnone size-full wp-image-326" title="so-aware high level cycle" src="http://machadogj.com/wp-content/uploads/2010/10/so-aware-high-level-cycle.png" alt="" width="630" height="347" /></a>

In our example, the box "MyService" represents the WCF Service for our CRUD application. However it can be any type of WCF Service (REST, SOAP or OData) with any type of operations.

Here is the description step by step.
<ol>
	<li>First we have a user that fires a request to the CRUD website. This website acts as the client for our WCF service. So, as we discussed in our previous post, we can use the resolver shipped with SO-Aware SDK in order to look for the binding and the endpoint of our WCF service. Notice that even though this requires a webservice call, the resolver will cache the bindings and endpoints in memory, so it might be a good idea to keep your instance of the resolver statically.</li>
	<li>The resolver makes a call to the ServiceRepository.svc looking for the right binding and endpoint.</li>
	<li>The ServiceRepository service makes a network call to the SQL Server where the configuration is stored.</li>
	<li>With the binding and endpoint at hand, we can now create an instance of the service proxy. The proxy will let us invoke a service operation.</li>
	<li>If the service was not actively running yet, and the host was not instanciated, then the Service Host Factory provided by the SO-Aware toolkit will fetch the necessary configuration from the Service Repository in order to instanciate the Service Host. This config is only fetched once for as long as the service lives. With the service up and running we can now establish the connection with the client and serve the requests.</li>
</ol>
The interesting part of this cycle is that the WCF configuration was taken out of a centralized repository. This means that in the config files of the website and the web service, we don’t really need to have the serviceModel section any more.

Apart from the configuration, we could also take advantage of SO-Aware and monitor our service and even set up some tests to run periodically to make sure that our services are correctly integrated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2010-10-13 12:17:30</wp:post_date>
		<wp:post_date_gmt>2010-10-13 12:17:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-aware-life-cycle-of-a-service-call</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="post_tag" nicename="tellago"><![CDATA[Tellago]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286972250]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286972251]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ojiVzMtPfI5L]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[502196988]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Biztalk Governance with SO-Aware - Webinar</title>
		<link>http://machadogj.com/2010/10/biztalk-governance-with-so-aware-webinar/</link>
		<pubDate>Thu, 21 Oct 2010 11:15:33 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=338</guid>
		<description></description>
		<content:encoded><![CDATA[The Biztalk Governance with SO-Aware webinar is going to be repeated on <strong>Thursday, October 28 at 2:00 ET. </strong>Some of the topics that are covered:
<ul>
	<li>The SO-Aware resolver for the BizTalk ESB toolkit</li>
	<li>Cataloging BizTalk-WCF services using SO-Aware</li>
	<li>Centralizing WCF adapters configuration using SO-Aware</li>
	<li>Centralizing WCF-LOB adapters configuration using SO-Aware</li>
	<li>Monitoring BizTalk-hosted WCF services using SO-Aware</li>
	<li>Testing BizTalk-hosted WCF services using SO-Aware</li>
</ul>
You can register for the webinar in Tellago Studios website <a href="http://tellagostudios.com/blog/biztalk-governance-using-so-aware-0" target="_blank">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2010-10-21 11:15:33</wp:post_date>
		<wp:post_date_gmt>2010-10-21 11:15:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>biztalk-governance-with-so-aware-webinar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="biztalk"><![CDATA[Biztalk]]></category>
		<category domain="post_tag" nicename="governance"><![CDATA[Governance]]></category>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1287659734]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1287659736]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[TIXqAeNTK1Lf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[508112851]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET Parallel Extensions - For and ForEach methods</title>
		<link>http://machadogj.com/2010/11/net-parallel-extensions-for-and-foreach-methods/</link>
		<pubDate>Mon, 01 Nov 2010 14:34:59 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to make this post to show to those that are not familiar with Parallel Extensions, how easy it is to go parallel with it. Parallel extensions were introduced in .NET 4.0 and it provides two new methods in the class System.Threading.Tasks.Parallel: For and ForEach. These methods allow you to perform tasks in parallel based on a collection of data. Here is a very simple example that clearly illustrates this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#696969;">            //collection of data to iterate on</span>
            <span style="color:#800000;font-weight:bold;">int</span><span style="color:#808030;">[</span><span style="color:#808030;">]</span> numbers <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> <span style="color:#800000;font-weight:bold;">int</span><span style="color:#808030;">[</span><span style="color:#808030;">]</span><span style="color:#800080;">{</span><span style="color:#008c00;">1</span><span style="color:#808030;">,</span> <span style="color:#008c00;">2</span><span style="color:#808030;">,</span> <span style="color:#008c00;">3</span><span style="color:#808030;">,</span> <span style="color:#008c00;">4</span><span style="color:#808030;">,</span> <span style="color:#008c00;">5</span><span style="color:#800080;">}</span><span style="color:#800080;">;</span>
            var watch <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> Stopwatch<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#696969;">//Run the tasks sequentially</span>
            watch<span style="color:#808030;">.</span>Start<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">foreach</span><span style="color:#808030;">(</span> <span style="color:#800000;font-weight:bold;">int</span> i <span style="color:#800000;font-weight:bold;">in</span> numbers<span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                WaitForSeconds<span style="color:#808030;">(</span>i<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>
            watch<span style="color:#808030;">.</span>Stop<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Running sequentially:</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Elapsed: </span><span style="color:#800000;">"</span> <span style="color:#808030;">+</span> watch<span style="color:#808030;">.</span>ElapsedMilliseconds<span style="color:#808030;">.</span>ToString<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#696969;">//close to 15000</span>

            watch<span style="color:#808030;">.</span>Reset<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#696969;">//Now run them in parallel</span>
            watch<span style="color:#808030;">.</span>Start<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Parallel<span style="color:#808030;">.</span>ForEach<span style="color:#808030;">(</span>numbers<span style="color:#808030;">,</span> i <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> WaitForSeconds<span style="color:#808030;">(</span>i<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            watch<span style="color:#808030;">.</span>Stop<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Running in parallel:</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Elapsed: </span><span style="color:#800000;">"</span> <span style="color:#808030;">+</span> watch<span style="color:#808030;">.</span>ElapsedMilliseconds<span style="color:#808030;">.</span>ToString<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span> <span style="color:#696969;">//close to 5000 (depending on the # of cores)</span></pre>
Notice how easy it is to go from a foreach loop, to a a ForEach method call using a lambda expression. The real secret behind all this is to identify and make sure that the calls that are made to each element in the collection are independent from one another (which is why they can be done in Parallel). If you don't ensure this, you might get random bugs, and different behaviors for the same input (usually something not desireable at all).

In adition to For and ForEach methods, parallel extensions also add some extension methods to make IEnumerable into ParallelQuery, and from ParallelQuery to IEnumerable.

So if you haven't done so, go ahead and import the System.Threading.Tasks namespace to your project and start playing with it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2010-11-01 14:34:59</wp:post_date>
		<wp:post_date_gmt>2010-11-01 14:34:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-parallel-extensions-for-and-foreach-methods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="extensions"><![CDATA[Extensions]]></category>
		<category domain="post_tag" nicename="parallel"><![CDATA[Parallel]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1288622099]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1288622101]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[oSm1wHoiGKl9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[614075576]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WCF QueryTranslator</title>
		<link>http://machadogj.com/2011/01/wcf-querytranslator/</link>
		<pubDate>Fri, 07 Jan 2011 15:49:28 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=348</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I will show you how to resolve a Linq query from an OData formatted url. As from the <a title="http://wcf.codeplex.com/" href="http://wcf.codeplex.com/" target="_blank">WCF WebHttp</a> release in codeplex, the logic to perform this was moved from the WCF DataServices dlls into a stand alone dll called "Microsoft.QueryComposition". This dll required for this sample can be found in the libs folder of the WCF WebHttp source code.

First we are going to take a look at a static function taken from the source code of the UrlQueryComposer from the System.ServiceModel namespace:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">        public</span> <span style="color:#800000;font-weight:bold;">virtual</span> IEnumerable ComposeQuery<span style="color:#808030;">(</span>IEnumerable rootedQuery<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">string</span> url<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            Debug<span style="color:#808030;">.</span>Assert<span style="color:#808030;">(</span>rootedQuery <span style="color:#808030;">!</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">queryableRoot should not be null</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            Debug<span style="color:#808030;">.</span>Assert<span style="color:#808030;">(</span><span style="color:#808030;">!</span>String<span style="color:#808030;">.</span>IsNullOrEmpty<span style="color:#808030;">(</span>url<span style="color:#808030;">)</span><span style="color:#808030;">,</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">url should not be null or empty</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#696969;">// cast the queryableRoot to an IQueryable type to further compose the query</span>
            IQueryable queryable <span style="color:#808030;">=</span> rootedQuery <span style="color:#800000;font-weight:bold;">as</span> IQueryable<span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>queryable <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                queryable <span style="color:#808030;">=</span> rootedQuery<span style="color:#808030;">.</span>AsQueryable<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>queryable <span style="color:#808030;">!</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                IQueryable finalQueryable <span style="color:#808030;">=</span> QueryTranslator<span style="color:#808030;">.</span>Translate<span style="color:#808030;">(</span>queryable<span style="color:#808030;">,</span> url<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">return</span> finalQueryable<span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">return</span> rootedQuery<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
So basically, we can pass any IEnumerable, and an OData formatted url, and it will return another IEnumerable that will filter the original one. We can easily use this from any type of project, including a console app. Add a reference to the Microsoft.QueryComposition dll to your project, and then try something like this:
<pre style="color:#000000;background:#ffffff;">            var list <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> List<span style="color:#808030;">&lt;</span>Product<span style="color:#808030;">&gt;</span> <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">new</span> Product <span style="color:#800080;">{</span> ID <span style="color:#808030;">=</span> <span style="color:#008c00;">1</span><span style="color:#808030;">,</span> Name <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Tenis Ball</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Category <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span>  Category <span style="color:#800080;">{</span> ID <span style="color:#808030;">=</span> <span style="color:#008c00;">1</span><span style="color:#808030;">,</span> Name <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Sports</span><span style="color:#800000;">"</span><span style="color:#800080;">}</span> <span style="color:#800080;">}</span><span style="color:#808030;">,</span>
                <span style="color:#800000;font-weight:bold;">new</span> Product <span style="color:#800080;">{</span> ID <span style="color:#808030;">=</span> <span style="color:#008c00;">2</span><span style="color:#808030;">,</span> Name <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Electric Guitar</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> Category <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> Category <span style="color:#800080;">{</span> ID <span style="color:#808030;">=</span> <span style="color:#008c00;">2</span><span style="color:#808030;">,</span> Name <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">Music</span><span style="color:#800000;">"</span><span style="color:#800080;">}</span> <span style="color:#800080;">}</span> <span style="color:#800080;">}</span><span style="color:#800080;">;</span>

            <span style="color:#696969;">//Filter your IEnumerable using OData syntax. (ie x =&gt; x.ID == 2).</span>
            var url <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">http://localhost/service/products/?$filter=ID%20eq%202</span><span style="color:#800000;">"</span><span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">foreach</span> <span style="color:#808030;">(</span>var i <span style="color:#800000;font-weight:bold;">in</span> ComposeQuery<span style="color:#808030;">(</span>list<span style="color:#808030;">,</span> url<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                Console<span style="color:#808030;">.</span>WriteLine<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Name: {0}</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> <span style="color:#808030;">(</span><span style="color:#808030;">(</span>Product<span style="color:#808030;">)</span>i<span style="color:#808030;">)</span><span style="color:#808030;">.</span>Name<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            Console<span style="color:#808030;">.</span>ReadKey<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span></pre>
I think this is very cool, and can be very useful for cases in which you want to allow the user to define a filter of some sort, and you want an easy way to store the filter serialized in some repository. Could be a "save search" feature in a search screen, or a security filter to  allow or deny access, etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2011-01-07 15:49:28</wp:post_date>
		<wp:post_date_gmt>2011-01-07 15:49:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-querytranslator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="odata"><![CDATA[odata]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1294415370]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1294415371]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[aFmGgxVnHKIu]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[557518217]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WCF HTTP Native types support</title>
		<link>http://machadogj.com/2011/02/wcf-http-native-types-support/</link>
		<pubDate>Wed, 02 Feb 2011 20:33:08 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=360</guid>
		<description></description>
		<content:encoded><![CDATA[If you are using the new <a href="http://wcf.codeplex.com/" target="_blank">WCF HTTP</a> stack, you might have noticed that there is no support for native types (current version 01.15.2011) in the variables defined in the UriTemplate of WebGet and WebInvoke. For example this will not work because of the int type of the id parameter (only string is supported):
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>WebGet<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
<span style="color:#800000;font-weight:bold;">public</span> Contact Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span> id<span style="color:#808030;">,</span> HttpResponseMessage response<span style="color:#808030;">)</span>
<span style="color:#800080;">{</span>
<span style="color:#696969;">  //logic here.
</span><span style="color:#800080;">}</span></pre>
This shouldn't be a problem since the WCF HTTP team has commited to providing support for native types in the future, but if you are eager you can use this as a workaround.

Thanks to the new Pipeline provided in WCF HTTP we can build ourselves a Processor that will take the parameters returned by the UriTemplate and apply the conversion from string to the right native type (such as int, bool, etc).  Here is the code for the processor:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">        public</span> <span style="color:#800000;font-weight:bold;">class</span> NativeTypesSupportProcessor <span style="color:#808030;">:</span> Processor
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">private</span> HttpOperationDescription operation<span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">private</span> ProcessorArgument<span style="color:#808030;">[</span><span style="color:#808030;">]</span> inArguments<span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">private</span> ProcessorArgument<span style="color:#808030;">[</span><span style="color:#808030;">]</span> outArguments<span style="color:#800080;">;</span>

            <span style="color:#800000;font-weight:bold;">public</span> NativeTypesSupportProcessor<span style="color:#808030;">(</span>HttpOperationDescription operation<span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>operation <span style="color:#808030;">=</span> operation<span style="color:#800080;">;</span>

                outArguments <span style="color:#808030;">=</span> operation<span style="color:#808030;">.</span>GetUriTemplate<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>PathSegmentVariableNames
                    <span style="color:#808030;">.</span>Join<span style="color:#808030;">(</span>operation<span style="color:#808030;">.</span>InputParameters<span style="color:#808030;">,</span>
                        o <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> o<span style="color:#808030;">.</span>ToUpper<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                        i <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> i<span style="color:#808030;">.</span>Name<span style="color:#808030;">.</span>ToUpper<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">,</span>
                        <span style="color:#808030;">(</span>i<span style="color:#808030;">,</span> o<span style="color:#808030;">)</span> <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> <span style="color:#800000;font-weight:bold;">new</span> ProcessorArgument<span style="color:#808030;">(</span>i<span style="color:#808030;">,</span> o<span style="color:#808030;">.</span>ParameterType<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>ToArray<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

                inArguments <span style="color:#808030;">=</span> outArguments
                    <span style="color:#808030;">.</span>Select<span style="color:#808030;">(</span>x <span style="color:#808030;">=</span><span style="color:#808030;">&gt;</span> <span style="color:#800000;font-weight:bold;">new</span> ProcessorArgument<span style="color:#808030;">(</span>x<span style="color:#808030;">.</span>Name<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">typeof</span><span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                    <span style="color:#808030;">.</span>ToArray<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">protected</span> <span style="color:#800000;font-weight:bold;">override</span> IEnumerable<span style="color:#808030;">&lt;</span>ProcessorArgument<span style="color:#808030;">&gt;</span> OnGetInArguments<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">return</span> inArguments<span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">protected</span> <span style="color:#800000;font-weight:bold;">override</span> IEnumerable<span style="color:#808030;">&lt;</span>ProcessorArgument<span style="color:#808030;">&gt;</span> OnGetOutArguments<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">return</span> outArguments<span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">protected</span> <span style="color:#800000;font-weight:bold;">override</span> ProcessorResult OnExecute<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">object</span><span style="color:#808030;">[</span><span style="color:#808030;">]</span> input<span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>inArguments<span style="color:#808030;">.</span>Count<span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#808030;">!</span><span style="color:#808030;">=</span> input<span style="color:#808030;">.</span>Length<span style="color:#808030;">)</span>
                    <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> ArgumentException<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Input does not contain the right amount of items.</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>

                var output <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> <span style="color:#800000;font-weight:bold;">object</span><span style="color:#808030;">[</span>input<span style="color:#808030;">.</span>Length<span style="color:#808030;">]</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">for</span> <span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span> i <span style="color:#808030;">=</span> <span style="color:#008c00;">0</span><span style="color:#800080;">;</span> i <span style="color:#808030;">&lt;</span> input<span style="color:#808030;">.</span>Length<span style="color:#800080;">;</span> i<span style="color:#808030;">+</span><span style="color:#808030;">+</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                     output<span style="color:#808030;">[</span>i<span style="color:#808030;">]</span> <span style="color:#808030;">=</span> Convert<span style="color:#808030;">.</span>ChangeType<span style="color:#808030;">(</span>input<span style="color:#808030;">[</span>i<span style="color:#808030;">]</span><span style="color:#808030;">,</span> outArguments<span style="color:#808030;">[</span>i<span style="color:#808030;">]</span><span style="color:#808030;">.</span>ArgumentType<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>

                <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">new</span> ProcessorResult<span style="color:#808030;">(</span><span style="color:#808030;">)</span> <span style="color:#800080;">{</span> Output <span style="color:#808030;">=</span> output <span style="color:#800080;">}</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span></pre>
And here is how to plug it into the pipeline:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">    public</span> <span style="color:#800000;font-weight:bold;">class</span> RestHostConfiguration <span style="color:#808030;">:</span> HttpHostConfiguration<span style="color:#808030;">,</span> IProcessorProvider
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">private</span> RestHostConfiguration<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">void</span> RegisterRequestProcessorsForOperation<span style="color:#808030;">(</span>System<span style="color:#808030;">.</span>ServiceModel<span style="color:#808030;">.</span>Description<span style="color:#808030;">.</span>HttpOperationDescription operation<span style="color:#808030;">,</span> IList<span style="color:#808030;">&lt;</span>System<span style="color:#808030;">.</span>ServiceModel<span style="color:#808030;">.</span>Dispatcher<span style="color:#808030;">.</span>Processor<span style="color:#808030;">&gt;</span> processors<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            processors<span style="color:#808030;">.</span>Add<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> NativeTypesSupportProcessor<span style="color:#808030;">(</span>operation<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">void</span> RegisterResponseProcessorsForOperation<span style="color:#808030;">(</span>System<span style="color:#808030;">.</span>ServiceModel<span style="color:#808030;">.</span>Description<span style="color:#808030;">.</span>HttpOperationDescription operation<span style="color:#808030;">,</span> IList<span style="color:#808030;">&lt;</span>System<span style="color:#808030;">.</span>ServiceModel<span style="color:#808030;">.</span>Dispatcher<span style="color:#808030;">.</span>Processor<span style="color:#808030;">&gt;</span> processors<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
        <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span></pre>
So now you can enjoy your int parameters ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2011-02-02 20:33:08</wp:post_date>
		<wp:post_date_gmt>2011-02-02 20:33:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-http-native-types-support</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1296678790]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1296678791]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[J7FjmUxcjR6R]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[498170852]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WCF HTTP - Start using it!</title>
		<link>http://machadogj.com/2011/02/wcf-http-start-using-it/</link>
		<pubDate>Wed, 16 Feb 2011 14:44:43 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[WCF HTTP the new MS project in codeplex, is the new programming model to bring the HTTP closer to our Webservices. It’s still in the prototyping phase, but there’s already enough interesting code in there to give it a try and provide some feedback to the WCF team.

They have done an amazing job in making our lives easier to plug HTTP specific code into the WCF stack as we’ll see in this post. We are going to go through some of the major changes in this new programming model:
<ul>
	<li>Setting up our service</li>
	<li>Service routing</li>
	<li>Service contract</li>
	<li>Host configuration</li>
	<li>Media types support</li>
</ul>
<h1>Setting up our service</h1>
The first thing you’ll need obviously is to download the latest release from <a href="http://wcf.codeplex.com/">http://wcf.codeplex.com</a> (at this point the current release is the “WCF HTTP 01.15.2011”). You’ll find the code under the “Http” folder, and a visual studio solution “Http.sln”. You can start using any of the sample projects included there, or if you want to start your own web project from scratch you can compile the solution and use the dlls from the “build” folder.

Notice that there’s a change on how to set up WCF HTTP in the web.config, the only thing that is required now is the routing module, and ASP .NET compatibility:
<pre style="color:#000000;background:#ffffff;"><span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">configuration</span><span style="color:#a65700;">&gt;</span>
  <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">system.webServer</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">modules</span> <span style="color:#274796;">runAllManagedModulesForAllRequests</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">true</span><span style="color:#0000e6;">"</span><span style="color:#a65700;">&gt;</span>
      <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">add</span> <span style="color:#274796;">name</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">UrlRoutingModule</span><span style="color:#0000e6;">"</span> <span style="color:#274796;">type</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">System.Web.Routing.UrlRoutingModule, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</span><span style="color:#0000e6;">"</span> <span style="color:#a65700;">/&gt;</span>
    <span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">modules</span><span style="color:#a65700;">&gt;</span>
  <span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">system.webServer</span><span style="color:#a65700;">&gt;</span>
  <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">system.serviceModel</span><span style="color:#a65700;">&gt;</span>
    <span style="color:#a65700;">&lt;</span><span style="color:#5f5035;">serviceHostingEnvironment</span> <span style="color:#274796;">aspNetCompatibilityEnabled</span><span style="color:#808030;">=</span><span style="color:#0000e6;">"</span><span style="color:#0000e6;">true</span><span style="color:#0000e6;">"</span> <span style="color:#a65700;">/&gt;</span>
  <span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">system.serviceModel</span><span style="color:#a65700;">&gt;</span>
<span style="color:#a65700;">&lt;/</span><span style="color:#5f5035;">configuration</span><span style="color:#a65700;">&gt;</span></pre>
<h1>Service routing</h1>
When working with the WCF HTTP bits, you are going to route the requests to a certain service using routes. You can use the AddServiceRoute extension method, to define the prefix of the service, the type of the service, and an HttpHostConfiguration (more on this later). So here’s the basic setup:
<pre style="color:#000000;background:#ffffff;">var configuration <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> HttpHostConfiguration<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
RouteTable<span style="color:#808030;">.</span>Routes<span style="color:#808030;">.</span>AddServiceRoute<span style="color:#808030;">&lt;</span>ContactsResource<span style="color:#808030;">&gt;</span><span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">contacts</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> configuration<span style="color:#808030;">)</span><span style="color:#800080;">;</span></pre>
So if the web app is running on our 5555 port, then all of the calls done to <a href="http://localhost:5555/contacts">http://localhost:5555/contacts</a> will be routed to the ContactsResource service. You can add as many routes as you need routing to as many services as you need. The ContactsResource is a typical REST service contract like:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>ServiceContract<span style="color:#808030;">]</span>
    <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> ContactsResource
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">private</span> <span style="color:#800000;font-weight:bold;">readonly</span> IContactRepository repository<span style="color:#800080;">;</span>

        <span style="color:#800000;font-weight:bold;">public</span> ContactsResource<span style="color:#808030;">(</span>IContactRepository repository<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>repository <span style="color:#808030;">=</span> repository<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

        <span style="color:#808030;">[</span>WebGet<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> Contact Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">string</span> id<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>repository<span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span><span style="color:#808030;">.</span>Parse<span style="color:#808030;">(</span>id<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>

    <span style="color:#800080;">}</span></pre>
This brings us to the next topic…
<h1>Service contract</h1>
In WCF HTTP you have the ability to add two optional parameters to your operations and they will be “magically” injected there: HttpRequestMessage and HttpResponseMessage. This is very convient for manipulating the StatusCode and content of the response. This allows us to do something like this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>WebGet<span style="color:#808030;">(</span>UriTemplate <span style="color:#808030;">=</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">{id}</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> Contact Get<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span> id<span style="color:#808030;">,</span> HttpResponseMessage response<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>

            var contact <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>repository<span style="color:#808030;">.</span>Get<span style="color:#808030;">(</span>id<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>contact <span style="color:#808030;">=</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                response<span style="color:#808030;">.</span>StatusCode <span style="color:#808030;">=</span> HttpStatusCode<span style="color:#808030;">.</span>NotFound<span style="color:#800080;">;</span>
                response<span style="color:#808030;">.</span>Content <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> StringContent<span style="color:#808030;">(</span><span style="color:#800000;">"</span><span style="color:#0000e6;">Contact not found</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>

            <span style="color:#800000;font-weight:bold;">return</span> contact<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
Notice how you can set the StatusCode in the response directly, and how you can manipulate the content from within the service. In a transport-agnostic platform like WCF, it was quite difficult to do something like this. By adding a HttpRequestMessage parameter to your operation you can also gain access to stuff like headers and Urls, which can also be convient to have.

The other awesome feature they brought us in this release is the QueryComposition attribute which you can use over IEnumerable&lt;T&gt; operations like this:
<pre style="color:#000000;background:#ffffff;"><span style="color:#808030;">[</span>WebGet<span style="color:#808030;">(</span>UriTemplate<span style="color:#808030;">=</span><span style="color:#800000;">"</span><span style="color:#800000;">"</span><span style="color:#808030;">)</span><span style="color:#808030;">]</span>
        <span style="color:#808030;">[</span>QueryComposition<span style="color:#808030;">]</span>
        <span style="color:#800000;font-weight:bold;">public</span> IEnumerable<span style="color:#808030;">&lt;</span>Contact<span style="color:#808030;">&gt;</span> Get<span style="color:#808030;">(</span><span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">return</span> contacts<span style="color:#808030;">.</span>AsQueryable<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
By doing this you can now compose filters over this resource using the OData protocol. In our contacts sample you could filter the contacts by Name by browsing this Url:

<a href="http://localhost:5555/Contacts?$filter=Name%20eq%20'First Contact'">http://localhost:5555/Contacts?$filter=Name eq ‘First Contact’</a> (you might have to encode the espace with %20)

You can even compose filters by navigating relationships using the OData syntax. Here’s how you could get all the contacts from US:

<a href="http://localhost:5555/Contacts?$filter=Address/City/State/Country%20eq%20'US'">http://localhost:5555/Contacts?$filter=Address/City/State/Country eq ‘US’</a>

This only applies to filtering, sorting and paging, so you can also use the $top, $skip, $orderby, but you can’t use $select (for projections) and $expand.
<h1>Host configuration</h1>
WCF HTTP made our lives easy for some of the common tasks when working with HTTP web services like: IoC/DI containers integration, media types support, serialization, etc. In order to shape your web service, all you need to do is provide a custom HttpHostConfiguration instance. Let’s look at the Contacts sample that ships in the WCF HTTP download. The ContactManagerConfiguration class uses IoC/DI with MEF to instantiate the services. It takes a CompositionContainer and implements IInstanceFactory interface that defines the following two methods:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">interface</span> IInstanceFactory
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">object</span> GetInstance<span style="color:#808030;">(</span>Type serviceType<span style="color:#808030;">,</span> InstanceContext instanceContext<span style="color:#808030;">,</span> Message message<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
         <span style="color:#800000;font-weight:bold;">void</span> ReleaseInstance<span style="color:#808030;">(</span>InstanceContext instanceContext<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">object</span> service<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
    <span style="color:#800080;">}</span></pre>
The serviceType parameter is the one we need to get an instance of and return it in the GetInstance method. Here’s how it’s don using MEF’s CompositionContainer:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">object</span> GetInstance<span style="color:#808030;">(</span>Type serviceType<span style="color:#808030;">,</span> InstanceContext instanceContext<span style="color:#808030;">,</span> Message message<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            var contract <span style="color:#808030;">=</span> AttributedModelServices<span style="color:#808030;">.</span>GetContractName<span style="color:#808030;">(</span>serviceType<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            var identity <span style="color:#808030;">=</span> AttributedModelServices<span style="color:#808030;">.</span>GetTypeIdentity<span style="color:#808030;">(</span>serviceType<span style="color:#808030;">)</span><span style="color:#800080;">;</span>

            <span style="color:#696969;">// force non-shared so that every service doesn't need to have a [PartCreationPolicy] attribute.</span>
            var definition <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> ContractBasedImportDefinition<span style="color:#808030;">(</span>contract<span style="color:#808030;">,</span> identity<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">,</span> ImportCardinality<span style="color:#808030;">.</span>ExactlyOne<span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">false</span><span style="color:#808030;">,</span> <span style="color:#800000;font-weight:bold;">false</span><span style="color:#808030;">,</span> CreationPolicy<span style="color:#808030;">.</span>NonShared<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;font-weight:bold;">this</span><span style="color:#808030;">.</span>container<span style="color:#808030;">.</span>GetExports<span style="color:#808030;">(</span>definition<span style="color:#808030;">)</span><span style="color:#808030;">.</span>First<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#808030;">.</span>Value<span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
You could easily change this implementation to use Windsor, Unity, StructureMap, Sprint.NET, etc. The other extremely useful thing we can do in the HttpHostConfiguration is to shape the operations processors list (both for request and response), but we’ll see how to do that in the next section.
<h1>Media types support</h1>
One of the important things about REST services is to provide a useful representation of the resources based on what the clients are requesting in the Accept header. So if a client “understands” only the json format, there’s no point in returning an xml representation. In order to make our lives easier, WCF HTTP ships with a base type called MediaTypeProcessor that allows us to define the media types we can handle, and serialize/deserialize to a certain format if the client accepts it. We can take the PngProcessor from the “Contacts” sample project for instance:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">class</span> PngProcessor <span style="color:#808030;">:</span> MediaTypeProcessor
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">public</span> PngProcessor<span style="color:#808030;">(</span>HttpOperationDescription operation<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span>
            <span style="color:#808030;">:</span> <span style="color:#800000;font-weight:bold;">base</span><span style="color:#808030;">(</span>operation<span style="color:#808030;">,</span> mode<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">override</span> IEnumerable&amp;lt<span style="color:#800080;">;</span><span style="color:#800000;font-weight:bold;">string</span>&amp;gt<span style="color:#800080;">;</span> SupportedMediaTypes
        <span style="color:#800080;">{</span>
            get
            <span style="color:#800080;">{</span>
                yield <span style="color:#800000;font-weight:bold;">return</span> <span style="color:#800000;">"</span><span style="color:#0000e6;">image/png</span><span style="color:#800000;">"</span><span style="color:#800080;">;</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">override</span> <span style="color:#800000;font-weight:bold;">void</span> WriteToStream<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">object</span> instance<span style="color:#808030;">,</span> Stream stream<span style="color:#808030;">,</span> HttpRequestMessage request<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            var contact <span style="color:#808030;">=</span> instance <span style="color:#800000;font-weight:bold;">as</span> Contact<span style="color:#800080;">;</span>
            <span style="color:#800000;font-weight:bold;">if</span> <span style="color:#808030;">(</span>contact <span style="color:#808030;">!</span><span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">null</span><span style="color:#808030;">)</span>
            <span style="color:#800080;">{</span>
                var path <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">string</span><span style="color:#808030;">.</span>Format<span style="color:#808030;">(</span>CultureInfo<span style="color:#808030;">.</span>InvariantCulture<span style="color:#808030;">,</span> @<span style="color:#800000;">"</span><span style="color:#0000e6;">{0}binImagesImage{1}.png</span><span style="color:#800000;">"</span><span style="color:#808030;">,</span> AppDomain<span style="color:#808030;">.</span>CurrentDomain<span style="color:#808030;">.</span>BaseDirectory<span style="color:#808030;">,</span> <span style="color:#808030;">(</span>contact<span style="color:#808030;">.</span>ContactId <span style="color:#808030;">%</span> <span style="color:#008c00;">3</span><span style="color:#808030;">)</span> <span style="color:#808030;">+</span> <span style="color:#008c00;">1</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800000;font-weight:bold;">using</span> <span style="color:#808030;">(</span>var fileStream <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> FileStream<span style="color:#808030;">(</span>path<span style="color:#808030;">,</span> FileMode<span style="color:#808030;">.</span>Open<span style="color:#808030;">)</span><span style="color:#808030;">)</span>
                <span style="color:#800080;">{</span>
                    <span style="color:#800000;font-weight:bold;">byte</span><span style="color:#808030;">[</span><span style="color:#808030;">]</span> bytes <span style="color:#808030;">=</span> <span style="color:#800000;font-weight:bold;">new</span> <span style="color:#800000;font-weight:bold;">byte</span><span style="color:#808030;">[</span>fileStream<span style="color:#808030;">.</span>Length<span style="color:#808030;">]</span><span style="color:#800080;">;</span>
                    fileStream<span style="color:#808030;">.</span>Read<span style="color:#808030;">(</span>bytes<span style="color:#808030;">,</span> <span style="color:#008c00;">0</span><span style="color:#808030;">,</span> <span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span><span style="color:#808030;">)</span>fileStream<span style="color:#808030;">.</span>Length<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                    stream<span style="color:#808030;">.</span>Write<span style="color:#808030;">(</span>bytes<span style="color:#808030;">,</span> <span style="color:#008c00;">0</span><span style="color:#808030;">,</span> <span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">int</span><span style="color:#808030;">)</span>fileStream<span style="color:#808030;">.</span>Length<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
                <span style="color:#800080;">}</span>
            <span style="color:#800080;">}</span>
        <span style="color:#800080;">}</span>

        <span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">override</span> <span style="color:#800000;font-weight:bold;">object</span> ReadFromStream<span style="color:#808030;">(</span>Stream stream<span style="color:#808030;">,</span> HttpRequestMessage request<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            <span style="color:#800000;font-weight:bold;">throw</span> <span style="color:#800000;font-weight:bold;">new</span> NotImplementedException<span style="color:#808030;">(</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span>
    <span style="color:#800080;">}</span></pre>
The SupportedMediaTypes property gives WCF a hint of what formats we can serilialize/deserialize. If a user sends a request with an Accept header of “image/png”, then the PngProcessor will be called to serialize the response to png, thus the code in the WriteToStream. And if the client send a POST/PUT with a Content-type of “image/png”, then the ReadFromStream will be executed in the PngProcessor. Which in this case throws a NotImplementedException.

The PngProcessor is a special type of Processor (it’s a MediaTypeProcessor), so it can be added to the processors pipeline through the HttpHostConfiguration by implementing IProcessorProvider:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">interface</span> IProcessorProvider
    <span style="color:#800080;">{</span>
        <span style="color:#800000;font-weight:bold;">void</span> RegisterRequestProcessorsForOperation<span style="color:#808030;">(</span>HttpOperationDescription operation<span style="color:#808030;">,</span> IList&amp;lt<span style="color:#800080;">;</span>Processor&amp;gt<span style="color:#800080;">;</span> processors<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span><span style="color:#800080;">;</span>

        <span style="color:#800000;font-weight:bold;">void</span> RegisterResponseProcessorsForOperation<span style="color:#808030;">(</span>HttpOperationDescription operation<span style="color:#808030;">,</span> IList&amp;lt<span style="color:#800080;">;</span>Processor&amp;gt<span style="color:#800080;">;</span> processors<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span><span style="color:#800080;">;</span>
    <span style="color:#800080;">}</span></pre>
And finally adding a new instance of the processor in the response pipeline:
<pre style="color:#000000;background:#ffffff;"><span style="color:#800000;font-weight:bold;">public</span> <span style="color:#800000;font-weight:bold;">void</span> RegisterResponseProcessorsForOperation<span style="color:#808030;">(</span>HttpOperationDescription operation<span style="color:#808030;">,</span> IList&amp;lt<span style="color:#800080;">;</span>Processor&amp;gt<span style="color:#800080;">;</span> processors<span style="color:#808030;">,</span> MediaTypeProcessorMode mode<span style="color:#808030;">)</span>
        <span style="color:#800080;">{</span>
            processors<span style="color:#808030;">.</span>Add<span style="color:#808030;">(</span><span style="color:#800000;font-weight:bold;">new</span> PngProcessor<span style="color:#808030;">(</span>operation<span style="color:#808030;">,</span> mode<span style="color:#808030;">)</span><span style="color:#808030;">)</span><span style="color:#800080;">;</span>
        <span style="color:#800080;">}</span></pre>
There are all nice-to-have features that are made a lot easier to implement using WCF. Of course we keep on having the rest of the extensibility points WCF provides, however the WCF HTTP team is making an excellent job keeping us away from those :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2011-02-16 14:44:43</wp:post_date>
		<wp:post_date_gmt>2011-02-16 14:44:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-http-start-using-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1297867484]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1297867486]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630336]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[K49AYwcEa5y4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[QhbQReg8hEBO]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[My Technobabble]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/gblock/archive/2011/03/07/wcf-web-apis-roundup-volume-2.aspx</wp:comment_author_url>
			<wp:comment_author_IP>65.55.59.10</wp:comment_author_IP>
			<wp:comment_date>2011-03-07 00:38:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 00:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>WCF Web APIs Roundup–Volume 2...</strong>

Been a while since our last roundup and since my last blog post for that matter! Fortunately there’s...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[The .NET Endpoint]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/endpoint/archive/2011/03/07/wcf-web-apis-roundup-volume-2.aspx</wp:comment_author_url>
			<wp:comment_author_IP>65.55.59.10</wp:comment_author_IP>
			<wp:comment_date>2011-03-07 00:42:11</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 00:42:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>WCF Web APIs Roundup–Volume 2...</strong>

Been a while since our last roundup and since my last blog post for that matter! Fortunately there’s...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Dotson]]></wp:comment_author>
			<wp:comment_author_email>matt.dotson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mattdotson.com</wp:comment_author_url>
			<wp:comment_author_IP>76.169.50.173</wp:comment_author_IP>
			<wp:comment_date>2011-05-12 22:27:51</wp:comment_date>
			<wp:comment_date_gmt>2011-05-12 22:27:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[what namespace is AddServiceRoute extension method in? I can't find the object that has that method so I can add a using statement.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302613]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-05-13 13:46:40</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 13:46:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Matt,

The namespace depends on the version of WCF HTTP you are using. In preview 3 the namespace is "Microsoft.ServiceModel.Http". If you are using the current latest version (Preview 4) it's "Microsoft.ApplicationServer.Http.Activation".

Cheers!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>55</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302613]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302698]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Glenn Block]]></wp:comment_author>
			<wp:comment_author_email>gblock@twitter.example.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/gblock</wp:comment_author_url>
			<wp:comment_author_IP>24.19.234.114</wp:comment_author_IP>
			<wp:comment_date>2011-06-16 07:44:33</wp:comment_date>
			<wp:comment_date_gmt>2011-06-16 07:44:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The method is now MapServiceRoute in Preview 4. Also processors have been replaced by operation handlers and formatters. If you check out the drop at wcf.codeplex.com you will see samples showing how to use the newer apis.

Thanks
Glenn]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302611]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>WCF HTTP – Processors under the hood</title>
		<link>http://machadogj.com/2011/02/wcf-http-processors-under-the-hood/</link>
		<pubDate>Thu, 17 Feb 2011 21:52:30 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/02/17/wcf-http-processors-under-the-hood/</guid>
		<description></description>
		<content:encoded><![CDATA[One of the coolest features of WCF HTTP is this new Processors pipeline that’s been introduced. With processors, you can shape pretty much everything in the request and response pipeline. The request pipeline is in charge of deserializing the request, and the response pipeline is responsible for serializing the response. These pipelines are used from the HttpPipelineFormatter which implements the IDispatchMessageFormatter interface. So here’s a diagram of what the pipelines look like inside the HttpPipelineFormatter:

<a href="http://machadogj.com/wp-content/uploads/2011/02/image.png"><img style="display:inline;border-width:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/02/image_thumb.png" border="0" alt="image" width="244" height="201" /></a>

Each processor takes a list of ProcessorArguments, and returns a list of ProcessorArguments. There are some very common arguments which are provided by the HttpPipeline formatter, so that we can use them out of the box. Here’s a list:
<ul>
	<li>HttpRequestMessage</li>
	<li>HttpResponseMessage</li>
	<li>Uri</li>
	<li>RequestHeaders</li>
	<li>ResponseHeaders</li>
</ul>
One thing to keep in mind, is that processors are added in a per-operation basis. So you are going to have a different request/response pipeline for each operation. You can choose which operations you add your processors to.

The pipeline also takes care of arranging the order in which the processors run, so that the output from one processor is the input of the next processor. In order to establish the order, it checks for the arguments’ name and type.
<h1>Our first processor</h1>
So as we can see from our diagram, processors are usually about serializing/deserializing stuff before and after an operation has been executed. There’s a type of processor that’s particularly useful in REST applications, and those are MediaTypeProcessors. MediaTypeProcessor is a base class that inherits from Processor and handles some of the basic plumbing for evaluating the content-type on request and responses, and serialize/deserialize when appropiate. These processors are very easy to implement, since all you have to do is declare the content-type you can handle in your processor and then provide the serialization logic. MediaTypeProcessors sit at the beginning of the request pipeline, and at the end of the response pipeline:

<a href="http://machadogj.com/wp-content/uploads/2011/02/image1.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/02/image_thumb1.png" border="0" alt="image" width="244" height="198" /></a>

WCF HTTP ships with some pre-built media type processors, you can find them in them in here:

<a href="http://machadogj.com/wp-content/uploads/2011/02/image2.png"><img style="display:inline;border-width:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/02/image_thumb2.png" border="0" alt="image" width="176" height="244" /></a>

One of the problems we might find when using the XmlProcessor that ships with WCF HTTP is that it’s using the XmlSerializer underneath, and the client side API for QueryComposition is using DataContractSerializer. So let’s say that we wanted to make our own processor for serializing XML and use the DataContractSerializer instead (just for fun). Here’s how it may look like:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> DataContractProcessor <span style='color:#808030;'>:</span> MediaTypeProcessor
        <span style='color:#800080;'>{</span>
            <span style='color:#800000;font-weight:bold;'>public</span> DataContractProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>,</span> MediaTypeProcessorMode mode<span style='color:#808030;'>)</span>
                <span style='color:#808030;'>:</span> <span style='color:#800000;font-weight:bold;'>base</span><span style='color:#808030;'>(</span>operation<span style='color:#808030;'>,</span> mode<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>&gt;</span> SupportedMediaTypes
            <span style='color:#800080;'>{</span>
                get
                <span style='color:#800080;'>{</span>
                    <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> List<span style='color:#808030;'>&lt;</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>&gt;</span> <span style='color:#800080;'>{</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>text/xml</span><span style='color:#800000;'>"</span><span style='color:#808030;'>,</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>application/xml</span><span style='color:#800000;'>"</span> <span style='color:#800080;'>}</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> <span style='color:#800000;font-weight:bold;'>void</span> WriteToStream<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> System<span style='color:#808030;'>.</span>IO<span style='color:#808030;'>.</span>Stream stream<span style='color:#808030;'>,</span> HttpRequestMessage request<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> DataContractSerializer<span style='color:#808030;'>(</span>Parameter<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                serializer<span style='color:#808030;'>.</span>WriteObject<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> <span style='color:#800000;font-weight:bold;'>object</span> ReadFromStream<span style='color:#808030;'>(</span>System<span style='color:#808030;'>.</span>IO<span style='color:#808030;'>.</span>Stream stream<span style='color:#808030;'>,</span> HttpRequestMessage request<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> DataContractSerializer<span style='color:#808030;'>(</span>Parameter<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800000;font-weight:bold;'>return</span> serializer<span style='color:#808030;'>.</span>ReadObject<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>
</pre>And you would plug that in the processors list through the HttpHostConfiguration as usual (you might want to remove the default XmlProcessor from the processors list too).
<h1>A more advanced processor…</h1>
Ok, so far so good, the DataContractProcessor was really easy to implement because it is a somewhat known type of processor, and WCF HTTP already ships a base class for that. But let’s build our first processor from scratch. In the current WCF HTTP version (01.15.2011) there’s no support for native types in the WebGet/WebInvoke UriTemplates. All the parameters coming from the Url have to be of type “string”, so you can’t do this (because of the “int” parameter):
<pre style='color:#000000;background:#ffffff;'><span style='color:#808030;'>[</span>WebGet<span style='color:#808030;'>(</span>UriTemplate <span style='color:#808030;'>=</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>{id}</span><span style='color:#800000;'>"</span><span style='color:#808030;'>)</span><span style='color:#808030;'>]</span>
        <span style='color:#800000;font-weight:bold;'>public</span> Contact Get<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>int</span> id<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span>
            <span style='color:#696969;'>//code here...</span>
            <span style='color:#800000;font-weight:bold;'>throw</span> <span style='color:#800000;font-weight:bold;'>new</span> NotImplementedException<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
        <span style='color:#800080;'>}</span>
</pre>
So it would actually be cool to have this kind of support, so here’s what we need. We need to create a processor, that will take an argument of type string, with name “id”, and it wil return an argument of type “int” and name “id”. The processors pipeline, tries to match by both argument name, and argument type. So when we return the argument with name “id” and type “int”, it will be processed by the dispatcher of the operation (since that’s what it’s waiting). So this processor is going to sit near the dispatching of the operation:

<a href="http://machadogj.com/wp-content/uploads/2011/02/image3.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/02/image_thumb3.png" border="0" alt="image" width="244" height="207" /></a>

So what we’ll do is “inner join” the parameters coming in the UriTemplate with the parameters on the operation, and take the type from the operation description, finally with the name and the type we are ready to return our out arguments:
<pre style='color:#000000;background:#ffffff;'>var uriTemplateVariables <span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>GetUriTemplate<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>PathSegmentVariableNames
                    <span style='color:#808030;'>.</span>Concat<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>GetUriTemplate<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>QueryValueVariableNames<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                
                outArguments <span style='color:#808030;'>=</span> uriTemplateVariables
                    <span style='color:#808030;'>.</span>Join<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>InputParameters<span style='color:#808030;'>,</span>
                        o <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> o<span style='color:#808030;'>.</span>ToUpper<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>,</span>
                        i <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> i<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>.</span>ToUpper<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>,</span>
                        <span style='color:#808030;'>(</span>i<span style='color:#808030;'>,</span> o<span style='color:#808030;'>)</span> <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>i<span style='color:#808030;'>,</span> o<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>ToArray<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
</pre>
And now we can calculate the in arguments by changing the type of the out argumetns to “string”:
<pre style='color:#000000;background:#ffffff;'>inArguments <span style='color:#808030;'>=</span> outArguments
                    <span style='color:#808030;'>.</span>Select<span style='color:#808030;'>(</span>x <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>x<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
                    <span style='color:#808030;'>.</span>ToArray<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
</pre>
And the final part of the puzzle is to apply the convertion using the Convert class. Here’s the whole thing:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> NativeTypesSupportProcessor <span style='color:#808030;'>:</span> Processor
        <span style='color:#800080;'>{</span>
            <span style='color:#800000;font-weight:bold;'>private</span> HttpOperationDescription operation<span style='color:#800080;'>;</span>
            <span style='color:#800000;font-weight:bold;'>private</span> ProcessorArgument<span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> inArguments<span style='color:#800080;'>;</span>
            <span style='color:#800000;font-weight:bold;'>private</span> ProcessorArgument<span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> outArguments<span style='color:#800080;'>;</span>

            <span style='color:#800000;font-weight:bold;'>public</span> NativeTypesSupportProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>operation <span style='color:#808030;'>=</span> operation<span style='color:#800080;'>;</span>
                var uriTemplateVariables <span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>GetUriTemplate<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>PathSegmentVariableNames
                    <span style='color:#808030;'>.</span>Concat<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>GetUriTemplate<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>QueryValueVariableNames<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                
                outArguments <span style='color:#808030;'>=</span> uriTemplateVariables
                    <span style='color:#808030;'>.</span>Join<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>InputParameters<span style='color:#808030;'>,</span>
                        o <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> o<span style='color:#808030;'>.</span>ToUpper<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>,</span>
                        i <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> i<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>.</span>ToUpper<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>,</span>
                        <span style='color:#808030;'>(</span>i<span style='color:#808030;'>,</span> o<span style='color:#808030;'>)</span> <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>i<span style='color:#808030;'>,</span> o<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>ToArray<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>

                inArguments <span style='color:#808030;'>=</span> outArguments
                    <span style='color:#808030;'>.</span>Select<span style='color:#808030;'>(</span>x <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>x<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
                    <span style='color:#808030;'>.</span>ToArray<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span>ProcessorArgument<span style='color:#808030;'>&gt;</span> OnGetInArguments<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>return</span> inArguments<span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span>ProcessorArgument<span style='color:#808030;'>&gt;</span> OnGetOutArguments<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>return</span> outArguments<span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> ProcessorResult OnExecute<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> input<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>inArguments<span style='color:#808030;'>.</span>Count<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#808030;'>!</span><span style='color:#808030;'>=</span> input<span style='color:#808030;'>.</span>Length<span style='color:#808030;'>)</span>
                    <span style='color:#800000;font-weight:bold;'>throw</span> <span style='color:#800000;font-weight:bold;'>new</span> ArgumentException<span style='color:#808030;'>(</span><span style='color:#800000;'>"</span><span style='color:#0000e6;'>Input does not contain the right amount of items.</span><span style='color:#800000;'>"</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>

                var output <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> <span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>[</span>input<span style='color:#808030;'>.</span>Length<span style='color:#808030;'>]</span><span style='color:#800080;'>;</span>
                <span style='color:#800000;font-weight:bold;'>for</span> <span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>int</span> i <span style='color:#808030;'>=</span> <span style='color:#008c00;'>0</span><span style='color:#800080;'>;</span> i <span style='color:#808030;'>&lt;</span> input<span style='color:#808030;'>.</span>Length<span style='color:#800080;'>;</span> i<span style='color:#808030;'>+</span><span style='color:#808030;'>+</span><span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    output<span style='color:#808030;'>[</span>i<span style='color:#808030;'>]</span> <span style='color:#808030;'>=</span> Convert<span style='color:#808030;'>.</span>ChangeType<span style='color:#808030;'>(</span>input<span style='color:#808030;'>[</span>i<span style='color:#808030;'>]</span><span style='color:#808030;'>,</span> outArguments<span style='color:#808030;'>[</span>i<span style='color:#808030;'>]</span><span style='color:#808030;'>.</span>ArgumentType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>

                <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorResult<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#800080;'>{</span> Output <span style='color:#808030;'>=</span> output <span style='color:#800080;'>}</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>
</pre>
In this post we have seen the new pipelines shipped in the new WCF HTTP and we have seen how we can modify and extend the behavior of our services by building our custom processors.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date>2011-02-17 21:52:30</wp:post_date>
		<wp:post_date_gmt>2011-02-17 21:52:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-http-processors-under-the-hood</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pipeline"><![CDATA[Pipeline]]></category>
		<category domain="post_tag" nicename="processor"><![CDATA[Processor]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1297979552]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1297979553]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630363]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[nij2v1Mf3MhH]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasonyandell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.251.234.83</wp:comment_author_IP>
			<wp:comment_date>2011-03-09 04:38:09</wp:comment_date>
			<wp:comment_date_gmt>2011-03-09 04:38:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Now THIS is a very valuable feature and a seriously handy article.  Thanks!

The fact that there is a processor stack at all is great to know.  The fact that you can use it to some very pragmatic ends (and just how to go about that) is a real winner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302631]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.168.106</wp:comment_author_IP>
			<wp:comment_date>2011-03-09 23:06:16</wp:comment_date>
			<wp:comment_date_gmt>2011-03-09 23:06:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the feedback Jason, it is indeed a very valuable feature, and we should be expecting more to come from the WCF team.
Cheers!
Gus]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>58</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302631]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302702]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[chandermani]]></wp:comment_author>
			<wp:comment_author_email>chandermani@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>124.123.248.187</wp:comment_author_IP>
			<wp:comment_date>2011-03-13 17:24:06</wp:comment_date>
			<wp:comment_date_gmt>2011-03-13 17:24:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, but i have a question. It may sound naive but if WCF HTTP is embracing HTTP has protocol, why not go with ASP.Net MVC itself. Anything done here can be easily done with ASP.Net MVC using some similar concepts. The last sample is a typical work on ModelBinder in ASP.Net MVC. 
ASP.Net MVC seems to be a UI technology but it morphs well into a REST service. I believe ASP.Net MVC and WCF HTTP should converge at some point.
What are your thoughts?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302632]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.193.168.106</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 01:07:08</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 01:07:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi chandermani, excellent question and it's not naive at all. As a matter of fact, this has been a long discussion going back and forth for a while now. My opinion is that eventually they will converge at some point (or some parts), however right now (IMO) MVC is not enough to build REST services, and WCF Web API certainly not enough to build UIs. Nevertheless a smooth transition seems reasonable for all of those who have most of their services in SOAP-based WCF.
The one thing I've learnt the hard way, is that the routing now used by WCF HTTP is not extensible enough to make sub-resources easy. And I am curious myself to see what answers to this the WCF team will come up with, without looking a lot more like MVC :)
And last but not least, the ultimate purpose of WCF HTTP codeplex project is to get our feedback as soon as possible, and that's been one very wise decision if you ask me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>60</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302632]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302638]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[chandermani]]></wp:comment_author>
			<wp:comment_author_email>chandermani@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.248.48.241</wp:comment_author_IP>
			<wp:comment_date>2011-03-15 11:10:55</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 11:10:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Makes sense. There is a part of ASP.Net MVC that lends itself very well for a REST base interface. This seems to be a side effect of design choices that ASP.Net MVC made. The other explanation could be that any time someone tries to model solution around HTTP by embracing it, the solutions would also look similar.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>61</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302638]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302703]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Rich S]]></wp:comment_author>
			<wp:comment_author_email>dexta1984@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.lostjohnnies.com</wp:comment_author_url>
			<wp:comment_author_IP>87.115.137.78</wp:comment_author_IP>
			<wp:comment_date>2011-05-30 13:23:44</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 13:23:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, great article. I was just wondering what needs to be referenced in order to get the operation.GetUriTemplate() method (Line 10, of your full code sample) to work?
Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302634]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-05-30 20:59:25</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 20:59:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Rich,

That is an extension method of the namespace "Microsoft.ServiceModel.Dispatcher". Notice that this code is from the "Preview 3" version of the WCF Web API (formerly known as WCF HTTP). In that version the name of the compiled dll was "Microsoft.ServiceModel.WebHttp".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>63</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302634]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302705]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[Rich S]]></wp:comment_author>
			<wp:comment_author_email>dexta1984@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.lostjohnnies.com</wp:comment_author_url>
			<wp:comment_author_IP>87.115.137.78</wp:comment_author_IP>
			<wp:comment_date>2011-05-30 21:15:50</wp:comment_date>
			<wp:comment_date_gmt>2011-05-30 21:15:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent, thanks! Something felt very wrong about passing integers wrapped in strings into my paged web method :).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>64</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302705]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302716]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>WCF HTTP – Cool processor for enabling navigation!</title>
		<link>http://machadogj.com/2011/02/wcf-http-cool-processor-for-enabling-navigation/</link>
		<pubDate>Thu, 17 Feb 2011 23:26:28 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[In my previous post I have explain the request and response processor pipelines. I have also showed how you can manage the serialization of request and responses. In this post I am going to show a totally different use for Processors, navigating resources.

Say for instance I want to know in which country a certain contact lives. Ideally, I’d like to be able to do something like this: <a href="http://localhost:5555/Contacts/5/Address/City/State/Country">http://localhost:5555/Contacts/5/Address/City/State/Country</a>. The problem in doing a thing like this in WCF HTTP so far, is that you would have to implement a method with a WebGet attribute, and a UriTemplate similar to this one:
<pre style='color:#000000;background:#ffffff;'><span style='color:#808030;'>[</span>WebGet<span style='color:#808030;'>(</span>UriTemplate<span style='color:#808030;'>=</span><span style='color:#800000;'>"</span><span style='color:#0000e6;'>{id}/Address/City/State/Country</span><span style='color:#800000;'>"</span><span style='color:#808030;'>)</span><span style='color:#808030;'>]</span>
        <span style='color:#800000;font-weight:bold;'>public</span> Country GetContactsCountry<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>int</span> id<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span>
            <span style='color:#696969;'>//code here</span>
        <span style='color:#800080;'>}</span>
</pre>
So you can see the problem right away, I need to define a method for each and every possible navigation sequence, and that’s not desired at all. But what if we could do something like this:
<pre style='color:#000000;background:#ffffff;'><span style='color:#808030;'>[</span>WebGet<span style='color:#808030;'>(</span>UriTemplate<span style='color:#808030;'>=</span><span style='color:#800000;'>"</span><span style='color:#0000e6;'>{id}/*</span><span style='color:#800000;'>"</span><span style='color:#808030;'>)</span><span style='color:#808030;'>]</span>
        <span style='color:#800000;font-weight:bold;'>public</span> Contact GetContactsNavigation<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>int</span> id<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span>
            <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>repository<span style='color:#808030;'>.</span>Get<span style='color:#808030;'>(</span>id<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
        <span style='color:#800080;'>}</span>
</pre>
Then we could try to come up with a mechanism to evaluate the rest of the Uri and navigate through the properties of the resource accordingly.
<h1>Cheating death…</h1>
The first big problem we are going to encounter is the fact that media type processors are expecting a value of the type defined in the Operation, so in our example they are expecting a “Contact” instance. Let’s see a bit of code from the XmlProcessor shipped with WCF HTTP:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> <span style='color:#800000;font-weight:bold;'>void</span> WriteToStream<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> System<span style='color:#808030;'>.</span>IO<span style='color:#808030;'>.</span>Stream stream<span style='color:#808030;'>,</span> HttpRequestMessage request<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span> 
            <span style='color:#696969;'>//IQueryable support</span>
            <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>usesQueryComposition<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#696969;'>//wrap it in a list</span>
                instance <span style='color:#808030;'>=</span> Activator<span style='color:#808030;'>.</span>CreateInstance<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>queryCompositionType<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> DataContractSerializer<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>queryCompositionType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                serializer<span style='color:#808030;'>.</span>WriteObject<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
            <span style='color:#800000;font-weight:bold;'>else</span>
            <span style='color:#800080;'>{</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> XmlSerializer<span style='color:#808030;'>(</span>Parameter<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                serializer<span style='color:#808030;'>.</span>Serialize<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>
</pre>
So when it’s not using query composition (our case) it’s using the Parameter.ParameterType (typeof(Contact) in our example). But if we navigate away from the contact instance, we’ll need a different type in the XmlSerializer. So just because the XmlProcessor is so simple, we could easily tweak the code a little bit to use “instance.GetType()” instead (and we can rename it to CustomXmlProcessor):
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> CustomXmlProcessor <span style='color:#808030;'>:</span> MediaTypeProcessor
    <span style='color:#800080;'>{</span>
        <span style='color:#800000;font-weight:bold;'>private</span> <span style='color:#800000;font-weight:bold;'>bool</span> usesQueryComposition<span style='color:#800080;'>;</span>
        <span style='color:#800000;font-weight:bold;'>private</span> Type queryCompositionType<span style='color:#800080;'>;</span>

        <span style='color:#800000;font-weight:bold;'>public</span> XmlProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>,</span> MediaTypeProcessorMode mode<span style='color:#808030;'>)</span>
            <span style='color:#808030;'>:</span> <span style='color:#800000;font-weight:bold;'>base</span><span style='color:#808030;'>(</span>operation<span style='color:#808030;'>,</span> mode<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span>
            var returnType <span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#800080;'>;</span>

            <span style='color:#696969;'>//IQueryable support</span>
            <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>Behaviors<span style='color:#808030;'>.</span>Contains<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span>QueryCompositionAttribute<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                usesQueryComposition <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>true</span><span style='color:#800080;'>;</span>
                var queryCompositionItemType <span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>.</span>GetGenericArguments<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>[</span><span style='color:#008c00;'>0</span><span style='color:#808030;'>]</span><span style='color:#800080;'>;</span>
                queryCompositionType <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span>List<span style='color:#808030;'>&lt;</span><span style='color:#808030;'>&gt;</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>MakeGenericType<span style='color:#808030;'>(</span>queryCompositionItemType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>

        <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>&gt;</span> SupportedMediaTypes
        <span style='color:#800080;'>{</span>
            get
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> List<span style='color:#808030;'>&lt;</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>&gt;</span> <span style='color:#800080;'>{</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>text/xml</span><span style='color:#800000;'>"</span><span style='color:#808030;'>,</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>application/xml</span><span style='color:#800000;'>"</span> <span style='color:#800080;'>}</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>

        <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> <span style='color:#800000;font-weight:bold;'>void</span> WriteToStream<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> System<span style='color:#808030;'>.</span>IO<span style='color:#808030;'>.</span>Stream stream<span style='color:#808030;'>,</span> HttpRequestMessage request<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span> 
            <span style='color:#696969;'>//IQueryable support</span>
            <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>usesQueryComposition<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#696969;'>//wrap it in a list</span>
                instance <span style='color:#808030;'>=</span> Activator<span style='color:#808030;'>.</span>CreateInstance<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>queryCompositionType<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> DataContractSerializer<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>queryCompositionType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                serializer<span style='color:#808030;'>.</span>WriteObject<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
            <span style='color:#800000;font-weight:bold;'>else</span>
            <span style='color:#800080;'>{</span>
                var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> XmlSerializer<span style='color:#808030;'>(</span>instance<span style='color:#808030;'>.</span>GetType<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                serializer<span style='color:#808030;'>.</span>Serialize<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>
        <span style='color:#800080;'>}</span>

        <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>override</span> <span style='color:#800000;font-weight:bold;'>object</span> ReadFromStream<span style='color:#808030;'>(</span>System<span style='color:#808030;'>.</span>IO<span style='color:#808030;'>.</span>Stream stream<span style='color:#808030;'>,</span> HttpRequestMessage request<span style='color:#808030;'>)</span>
        <span style='color:#800080;'>{</span>
            var serializer <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span> XmlSerializer<span style='color:#808030;'>(</span>Parameter<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800000;font-weight:bold;'>return</span> serializer<span style='color:#808030;'>.</span>Deserialize<span style='color:#808030;'>(</span>stream<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
        <span style='color:#800080;'>}</span>
    <span style='color:#800080;'>}</span>
</pre>
 
The other big problem is that the IN argument of the MediaTypeProcessors is the Operation.ReturnValue.Name which is the name given to the return type of an operation. If we want the MediaTypeProcessors to serialize the output of our freaky processor, then we need to match the type and name of the out argument and in argument. The truth is that we don’t know the type of the out argument until we finish evaluating the navigation itself in execution time, so we are going to use something generic: typeof(object). And as for the name of the argument itself, let’s see a diagram of what we need:

On the left side, is the current status of the pipeline, and in the right side is the desired status of the pipeline:

<a href="http://machadogj.com/wp-content/uploads/2011/02/image4.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/02/image_thumb4.png" border="0" alt="image" width="431" height="264" /></a>

So we are going to “cheat” the MediaTypeProcessors into thinking that they will be processing the result of the Dispatching of the operation, but they will be processing the result of the navigation instead. We are going to cheat by receiving a list of processors in the constructor, and accessing the InArguments, and manipulating them:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> NavigateProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>,</span> IList<span style='color:#808030;'>&lt;</span>Processor<span style='color:#808030;'>&gt;</span> processors<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>operation <span style='color:#808030;'>=</span> operation<span style='color:#800080;'>;</span>
                <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>mediaTypeProcessors <span style='color:#808030;'>=</span> processors<span style='color:#808030;'>.</span>Where<span style='color:#808030;'>(</span>p <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> p <span style='color:#800000;font-weight:bold;'>is</span> MediaTypeProcessor<span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>ToList<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>

                <span style='color:#696969;'>//cheat the in argument name of the media type processors.</span>
                <span style='color:#800000;font-weight:bold;'>foreach</span> <span style='color:#808030;'>(</span>var p <span style='color:#800000;font-weight:bold;'>in</span> processors<span style='color:#808030;'>.</span>OfType<span style='color:#808030;'>&lt;</span>MediaTypeProcessor<span style='color:#808030;'>&gt;</span><span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    var argument <span style='color:#808030;'>=</span> p<span style='color:#808030;'>.</span>InArguments<span style='color:#808030;'>.</span>Where<span style='color:#808030;'>(</span>a <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> a<span style='color:#808030;'>.</span>Name <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>First<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                    argument<span style='color:#808030;'>.</span>Name <span style='color:#808030;'>=</span> NAVIGATE_RETURN_VALUE<span style='color:#800080;'>;</span>
                    argument<span style='color:#808030;'>.</span>ArgumentType <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>

            <span style='color:#800080;'>}</span>
</pre>
On the execution of the processor we are going to use the UriTemplate of the operation to search for the wildcard segments, and navigate those segments. For the navigation, since we might be accessing to a database or even a WCF DataService, we are going to abstract the navigation into a PropertyNavigator:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>interface</span> IPropertyNavigator
        <span style='color:#800080;'>{</span>
            <span style='color:#800000;font-weight:bold;'>object</span> Navigate<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>string</span> propertyName<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
        <span style='color:#800080;'>}</span>
</pre>
And obviously we are testing this with a reflection navigator:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> ReflectionPropertyNavigator <span style='color:#808030;'>:</span> IPropertyNavigator
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>object</span> Navigate<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>string</span> propertyName<span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>instance <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span>
                        <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#800080;'>;</span>

                    var prop <span style='color:#808030;'>=</span> instance<span style='color:#808030;'>.</span>GetType<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>GetProperties<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>Where<span style='color:#808030;'>(</span>p <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> p<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>.</span>ToLower<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> propertyName<span style='color:#808030;'>.</span>ToLower<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>FirstOrDefault<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                    <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>prop <span style='color:#808030;'>!</span><span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span>
                    <span style='color:#800080;'>{</span>
                        var newReturnValue <span style='color:#808030;'>=</span> prop<span style='color:#808030;'>.</span>GetValue<span style='color:#808030;'>(</span>instance<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                        <span style='color:#800000;font-weight:bold;'>return</span> newReturnValue<span style='color:#800080;'>;</span>
                    <span style='color:#800080;'>}</span>
                    <span style='color:#800000;font-weight:bold;'>else</span>
                        <span style='color:#800000;font-weight:bold;'>throw</span> <span style='color:#800000;font-weight:bold;'>new</span> InvalidOperationException<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>.</span>Format<span style='color:#808030;'>(</span><span style='color:#800000;'>"</span><span style='color:#0000e6;'>The property name {0} was not found in the type {1}</span><span style='color:#800000;'>"</span><span style='color:#808030;'>,</span> propertyName<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>.</span>GetType<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>Name<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>
            <span style='color:#800080;'>}</span>
</pre>
<h1>The final monster</h1>
Before I show you the entire code, notice that this processor does not support collections, so I did a simple check over the IEnumerable interface on the OnExecute. So back to business:
<pre style='color:#000000;background:#ffffff;'><span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> NavigateProcessor <span style='color:#808030;'>:</span> Processor
        <span style='color:#800080;'>{</span>
            <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>const</span> <span style='color:#800000;font-weight:bold;'>string</span> NAVIGATE_RETURN_VALUE <span style='color:#808030;'>=</span> <span style='color:#800000;'>"</span><span style='color:#0000e6;'>_cheatReturnValue</span><span style='color:#800000;'>"</span><span style='color:#800080;'>;</span>
            <span style='color:#800000;font-weight:bold;'>private</span> HttpOperationDescription operation<span style='color:#800080;'>;</span>
            <span style='color:#800000;font-weight:bold;'>private</span> IPropertyNavigator navigator<span style='color:#800080;'>;</span>

            <span style='color:#800000;font-weight:bold;'>public</span> NavigateProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>,</span> IList<span style='color:#808030;'>&lt;</span>Processor<span style='color:#808030;'>&gt;</span> mediaTypeProcessors<span style='color:#808030;'>)</span><span style='color:#808030;'>:</span><span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>(</span>operation<span style='color:#808030;'>,</span> mediaTypeProcessors<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>new</span> ReflectionPropertyNavigator<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>public</span> NavigateProcessor<span style='color:#808030;'>(</span>HttpOperationDescription operation<span style='color:#808030;'>,</span> IList<span style='color:#808030;'>&lt;</span>Processor<span style='color:#808030;'>&gt;</span> processors<span style='color:#808030;'>,</span> IPropertyNavigator navigator<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>operation <span style='color:#808030;'>=</span> operation<span style='color:#800080;'>;</span>

                <span style='color:#696969;'>//cheat the in argument name of the media type processors.</span>
                <span style='color:#800000;font-weight:bold;'>foreach</span> <span style='color:#808030;'>(</span>var p <span style='color:#800000;font-weight:bold;'>in</span> processors<span style='color:#808030;'>.</span>OfType<span style='color:#808030;'>&lt;</span>MediaTypeProcessor<span style='color:#808030;'>&gt;</span><span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    var argument <span style='color:#808030;'>=</span> p<span style='color:#808030;'>.</span>InArguments<span style='color:#808030;'>.</span>Where<span style='color:#808030;'>(</span>a <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> a<span style='color:#808030;'>.</span>Name <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>First<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                    argument<span style='color:#808030;'>.</span>Name <span style='color:#808030;'>=</span> NAVIGATE_RETURN_VALUE<span style='color:#800080;'>;</span>
                    argument<span style='color:#808030;'>.</span>ArgumentType <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>

                <span style='color:#800000;font-weight:bold;'>this</span><span style='color:#808030;'>.</span>navigator <span style='color:#808030;'>=</span> navigator<span style='color:#800080;'>;</span>

            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> ProcessorResult OnExecute<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> input<span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>

                <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span>IEnumerable<span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>IsAssignableFrom<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorResult<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#800080;'>{</span> Output <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span><span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> <span style='color:#800080;'>{</span> input<span style='color:#808030;'>[</span><span style='color:#008c00;'>0</span><span style='color:#808030;'>]</span> <span style='color:#800080;'>}</span> <span style='color:#800080;'>}</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>

                <span style='color:#800000;font-weight:bold;'>object</span> returnValue <span style='color:#808030;'>=</span> input<span style='color:#808030;'>[</span><span style='color:#008c00;'>0</span><span style='color:#808030;'>]</span><span style='color:#800080;'>;</span>
                HttpRequestMessage request <span style='color:#808030;'>=</span> <span style='color:#808030;'>(</span>HttpRequestMessage<span style='color:#808030;'>)</span>input<span style='color:#808030;'>[</span><span style='color:#008c00;'>1</span><span style='color:#808030;'>]</span><span style='color:#800080;'>;</span>

                var uriTemplate <span style='color:#808030;'>=</span> operation<span style='color:#808030;'>.</span>GetUriTemplate<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                var baseAddress <span style='color:#808030;'>=</span> OperationContext<span style='color:#808030;'>.</span>Current<span style='color:#808030;'>.</span>Host<span style='color:#808030;'>.</span>BaseAddresses<span style='color:#808030;'>.</span>First<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                var navigations <span style='color:#808030;'>=</span> uriTemplate<span style='color:#808030;'>.</span>Match<span style='color:#808030;'>(</span>baseAddress<span style='color:#808030;'>,</span> request<span style='color:#808030;'>.</span>RequestUri<span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>WildcardPathSegments<span style='color:#800080;'>;</span>

                <span style='color:#800000;font-weight:bold;'>object</span> newReturnValue <span style='color:#808030;'>=</span> returnValue<span style='color:#800080;'>;</span>
                <span style='color:#800000;font-weight:bold;'>foreach</span> <span style='color:#808030;'>(</span>var segment <span style='color:#800000;font-weight:bold;'>in</span> navigations<span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    newReturnValue <span style='color:#808030;'>=</span> navigator<span style='color:#808030;'>.</span>Navigate<span style='color:#808030;'>(</span>newReturnValue<span style='color:#808030;'>,</span> segment<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>
                
                <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorResult<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#800080;'>{</span> Output <span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>new</span><span style='color:#808030;'>[</span><span style='color:#808030;'>]</span> <span style='color:#800080;'>{</span> newReturnValue <span style='color:#800080;'>}</span> <span style='color:#800080;'>}</span><span style='color:#800080;'>;</span>
                
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span>ProcessorArgument<span style='color:#808030;'>&gt;</span> OnGetInArguments<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                yield <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>,</span> operation<span style='color:#808030;'>.</span>ReturnValue<span style='color:#808030;'>.</span>ParameterType<span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                yield <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>HttpPipelineFormatter<span style='color:#808030;'>.</span>ArgumentHttpRequestMessage<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span>HttpRequestMessage<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>protected</span> <span style='color:#800000;font-weight:bold;'>override</span> IEnumerable<span style='color:#808030;'>&lt;</span>ProcessorArgument<span style='color:#808030;'>&gt;</span> OnGetOutArguments<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span>
            <span style='color:#800080;'>{</span>
                yield <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>new</span> ProcessorArgument<span style='color:#808030;'>(</span>NAVIGATE_RETURN_VALUE<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>typeof</span><span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span> <span style='color:#696969;'>//operation.ReturnValue.ParameterType);</span>
            <span style='color:#800080;'>}</span>

            <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>class</span> ReflectionPropertyNavigator <span style='color:#808030;'>:</span> IPropertyNavigator
            <span style='color:#800080;'>{</span>
                <span style='color:#800000;font-weight:bold;'>public</span> <span style='color:#800000;font-weight:bold;'>object</span> Navigate<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>object</span> instance<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>string</span> propertyName<span style='color:#808030;'>)</span>
                <span style='color:#800080;'>{</span>
                    <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>instance <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span>
                        <span style='color:#800000;font-weight:bold;'>return</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#800080;'>;</span>

                    var prop <span style='color:#808030;'>=</span> instance<span style='color:#808030;'>.</span>GetType<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>GetProperties<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>Where<span style='color:#808030;'>(</span>p <span style='color:#808030;'>=</span><span style='color:#808030;'>&gt;</span> p<span style='color:#808030;'>.</span>Name<span style='color:#808030;'>.</span>ToLower<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span> <span style='color:#808030;'>=</span><span style='color:#808030;'>=</span> propertyName<span style='color:#808030;'>.</span>ToLower<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>FirstOrDefault<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                    <span style='color:#800000;font-weight:bold;'>if</span> <span style='color:#808030;'>(</span>prop <span style='color:#808030;'>!</span><span style='color:#808030;'>=</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span>
                    <span style='color:#800080;'>{</span>
                        var newReturnValue <span style='color:#808030;'>=</span> prop<span style='color:#808030;'>.</span>GetValue<span style='color:#808030;'>(</span>instance<span style='color:#808030;'>,</span> <span style='color:#800000;font-weight:bold;'>null</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                        <span style='color:#800000;font-weight:bold;'>return</span> newReturnValue<span style='color:#800080;'>;</span>
                    <span style='color:#800080;'>}</span>
                    <span style='color:#800000;font-weight:bold;'>else</span>
                        <span style='color:#800000;font-weight:bold;'>throw</span> <span style='color:#800000;font-weight:bold;'>new</span> InvalidOperationException<span style='color:#808030;'>(</span><span style='color:#800000;font-weight:bold;'>string</span><span style='color:#808030;'>.</span>Format<span style='color:#808030;'>(</span><span style='color:#800000;'>"</span><span style='color:#0000e6;'>The property name {0} was not found in the type {1}</span><span style='color:#800000;'>"</span><span style='color:#808030;'>,</span> propertyName<span style='color:#808030;'>,</span> instance<span style='color:#808030;'>.</span>GetType<span style='color:#808030;'>(</span><span style='color:#808030;'>)</span><span style='color:#808030;'>.</span>Name<span style='color:#808030;'>)</span><span style='color:#808030;'>)</span><span style='color:#800080;'>;</span>
                <span style='color:#800080;'>}</span>
            <span style='color:#800080;'>}</span>

        <span style='color:#800080;'>}</span>
</pre>
So if you browse a url like this in the Contacts sample we showed before: <a href="http://localhost:5555/contacts/2/Name/Length">http://localhost:5555/contacts/2/Name/Length</a> we are going to get this response:
<pre style='color:#000000;background:#ffffff;'><span style='color:#004a43;'>&lt;?</span><span style='color:#004a43;'>xml</span> <span style='color:#004a43;'>version</span><span style='color:#808030;'>=</span><span style='color:#008c00;'>"1.0"</span> <span style='color:#004a43;'>?&gt;</span> 
  <span style='color:#a65700;'>&lt;</span><span style='color:#5f5035;'>int</span><span style='color:#a65700;'>&gt;</span>11<span style='color:#a65700;'>&lt;/</span><span style='color:#5f5035;'>int</span><span style='color:#a65700;'>&gt;</span>
</pre>
It’s the length on the string property Name of the contact with id 5. So how cool is that????
NOTICE: This code is provided as is, and is not intended to demonstrate good practices, it's merely a demonstration of how flexible and fun working with WCF HTTP can be :)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2011-02-17 23:26:28</wp:post_date>
		<wp:post_date_gmt>2011-02-17 23:26:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-http-cool-processor-for-enabling-navigation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="navigation"><![CDATA[Navigation]]></category>
		<category domain="post_tag" nicename="processor"><![CDATA[Processor]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1297986150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1297986152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630355]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[0KwKhcPcrNer]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[progg.ru]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://progg.ru/WCF-HTTP-Cool-processor-for-enabling-navigation</wp:comment_author_url>
			<wp:comment_author_IP>80.71.44.116</wp:comment_author_IP>
			<wp:comment_date>2011-02-18 09:00:48</wp:comment_date>
			<wp:comment_date_gmt>2011-02-18 09:00:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>WCF HTTP – Cool processor for enabling navigation!...</strong>

Thank you for submitting this cool story - Trackback from progg.ru...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[My Technobabble]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/gblock/archive/2011/03/07/wcf-web-apis-roundup-volume-2.aspx</wp:comment_author_url>
			<wp:comment_author_IP>65.55.59.10</wp:comment_author_IP>
			<wp:comment_date>2011-03-07 00:38:20</wp:comment_date>
			<wp:comment_date_gmt>2011-03-07 00:38:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>WCF Web APIs Roundup–Volume 2...</strong>

Been a while since our last roundup and since my last blog post for that matter! Fortunately there’s...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Jason]]></wp:comment_author>
			<wp:comment_author_email>jasonyandell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.251.234.83</wp:comment_author_IP>
			<wp:comment_date>2011-03-09 04:46:53</wp:comment_date>
			<wp:comment_date_gmt>2011-03-09 04:46:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's ridiculously cool and now my brains are spinning with the possibilities]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302628]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-05-05 20:53:16</wp:comment_date>
			<wp:comment_date_gmt>2011-05-05 20:53:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Jason, I found it kinda cool too!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>68</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302628]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302700]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>REST – GET-less resources(actions): yes or no?</title>
		<link>http://machadogj.com/2011/03/rest-get-less-resourcesactions-yes-or-no/</link>
		<pubDate>Tue, 01 Mar 2011 22:33:36 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=409</guid>
		<description></description>
		<content:encoded><![CDATA[I’ve been reading a lot about hypermedia lately and I must admit that I’m pretty sure that hypermedia is the way to go in REST services. <a href="http://martinfowler.com/articles/richardsonMaturityModel.html">Here</a>’s a pretty cool maturity level explanation by Martin Fowler. In this post you can see how the Level 3 - “Hypermedia Controls” is the way to achieve the glory of REST.

Basically, REST is all about resources and state representation. The beauty of REST is how you can literally GET a representation of a resource’s state in your preferred format, and provided with enough hypermedia, you can “navigate” to other resources. So what happens when I need to change the state of a resource? With a few variations on each, I have two options:
<ul>
	<li>Make a PUT to the resource with the changed stated on it. The problem with this approach is that you might end up sending a big representation of a resource to change just one field. Even if you only send the “modified” field, you could be potentially using the same url for performing different actions on the same resource (somewhat tunneling).</li>
	<li>Make a POST to a different resource that represents this change of state. This one is easier to explain with an example. If I want to step the order <a href="http://localhost/orders/5">http://localhost/orders/5</a> from new to pending status, I could POST to the url <a href="http://localhost/pendingorders">http://localhost/pendingorders</a>, thus creating a new resource: <a href="http://localhost/pendingorders/5">http://localhost/pendingorders/5</a> which is nothing but the order with a different status. This second approach, while a bit more elegant RESTfulwise, it could lead to numerous “fictitious” resources, that the only thing they handle is a change of state (potentially firing some process).</li>
</ul>
<h1>Once upon a time…</h1>
When using SOAP/RPC web services, it’s a common practice to have a “service” business layer. This is almost a perfect match as you can usually match the name of the service contract operation with the name on a service/manager method.
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b4bc2279-0957-47ef-927c-6197f3d3bf8e" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:500px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li>[<span style="color:#2b91af;">ServiceContract</span>]</li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">OrderService</span></li>
	<li>{</li>
	<li style="background:#f3f3f3;">    [<span style="color:#2b91af;">OperationContract</span>]</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">GetOrderResponse</span> GetOrder(<span style="color:#2b91af;">GetOrderRequest</span> request)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">var</span> id = request.OrderId;</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">var</span> orderManager = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">OrderManager</span>();</li>
	<li>        <span style="color:#0000ff;">var</span> order = orderManager.GetOrder(id);</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">var</span> response = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">GetOrderResponse</span>() { Order = order };</li>
	<li>        <span style="color:#0000ff;">return</span> response;</li>
	<li style="background:#f3f3f3;">    }</li>
	<li> </li>
	<li style="background:#f3f3f3;">    [<span style="color:#2b91af;">OperationContract</span>]</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">StepToPendingResponse</span> StepToPending(<span style="color:#2b91af;">StepToPendingRequest</span> order)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">var</span> orderEntity = order.ToEntity();</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">var</span> orderManager = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">OrderManager</span>();</li>
	<li>        orderManager.StepToPending(orderEntity);</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">StepToPendingResponse</span>();</li>
	<li>    }</li>
	<li style="background:#f3f3f3;">}</li>
</ol>
</div>
</div>
</div>
So your business logic would be in the Manager/Service classes, and your business entities would be pretty much like DTOs.

In these type of services, you always POST to the same URL, so there’s no way to “navigate” the service. And this is one of the things that makes REST services so appealing.
<h1>REST and DTOs…</h1>
On the other hand, when we are using REST services, you have the feeling of actual navigating resources, and operating on them. Take this url for example <a href="http://localhost/Orders">http://localhost/Orders</a>, you can be pretty certain than it will return a list of orders. And if you had access to <a href="http://localhost/Orders/5">http://localhost/Orders/5</a>, you can infer that it will return the order with an id of 5. What’s even more interesting, is that if this address existed <a href="http://localhost/orders/5/customer/address/city/state/country">http://localhost/orders/5/customer/address/city/state/country</a>, you could be pretty certain that it will return the country where the customer of the order with an id of 5 lives. This sense of navigation is very similar to navigating classes in OOP. Like this:

<a href="http://machadogj.com/wp-content/uploads/2011/03/image.png"><img style="display:inline;border-width:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb.png" border="0" alt="image" width="638" height="157" /></a>

This gives us the hint that we might be able to model our REST service with classes instead of ServiceContracts. Let’s see how this could work. We could define our Order class like so:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5f79af46-cb71-4af3-a892-07afa2d20a38" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">Order</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">int</span> Id { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt; Items { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">Customer</span> Customer { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">DateTime</span> SubmittedOn { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">OrderStatus</span> Status { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">}</li>
	<li> </li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">enum</span> <span style="color:#2b91af;">OrderStatus</span></li>
	<li>{</li>
	<li style="background:#f3f3f3;">    New,</li>
	<li>    InProcess,</li>
	<li style="background:#f3f3f3;">    Cancelled,</li>
	<li>    Completed</li>
	<li style="background:#f3f3f3;">}</li>
</ol>
</div>
</div>
</div>
When browsing <a href="http://localhost/Store/Orders/5">http://localhost/Store/Orders/5</a> something like this could rendered:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b9c5d135-448b-407e-8682-bfcf76275f79" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Order</span><span style="color:#0000ff;">&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Id</span><span style="color:#0000ff;">&gt;</span>1<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Id</span><span style="color:#0000ff;">&gt;</span></li>
	<li>  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">SubmittedOn</span><span style="color:#0000ff;">&gt;</span>1/1/0001 12:00:00 AM<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">SubmittedOn</span><span style="color:#0000ff;">&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Status</span><span style="color:#0000ff;">&gt;</span>New<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Status</span><span style="color:#0000ff;">&gt;</span></li>
	<li>  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">link</span><span style="color:#0000ff;"> </span><span style="color:#ff0000;">rel</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">OrderItemCollection</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">href</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Items</span>"<span style="color:#0000ff;"> /&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">link</span><span style="color:#0000ff;"> </span><span style="color:#ff0000;">rel</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Customer</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">href</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Customer</span>"<span style="color:#0000ff;"> /&gt;</span></li>
	<li><span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Order</span><span style="color:#0000ff;">&gt;</span></li>
</ol>
</div>
</div>
</div>
Where the href are relative urls for <a href="http://localhost/Store/orders/1/Items">http://localhost/Store/orders/1/Items</a> and <a href="http://localhost/Store/orders/1/Customer">http://localhost/Store/orders/1/Customer</a> respectively (they could be absolute as well).

Now suppose we want to let the user cancel this order. If we want to take the second approach, we would need a new resource that represents this change of state, something like <a href="http://localhost/orders/5/cancellation">http://localhost/orders/5/cancellation</a> which could return 404 status code if the order is not cancelled, and where you can post to if you want to cancel the order. Now how much sense does this make in the OOP world far away from REST and it’s resources? Does it make sense to have a property on the Order for exposing this cancellation logic? How would that look?
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e0ed6b21-5eee-4211-8961-7c79e146cb98" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">Order</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">int</span> Id { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt; Items { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">Customer</span> Customer { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">DateTime</span> SubmittedOn { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">OrderStatus</span> Status { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">Cancellation</span> Cancellation { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>}</li>
	<li style="background:#f3f3f3;"> </li>
	<li><span style="color:#808080;">///</span><span style="color:#008000;"> </span><span style="color:#808080;">&lt;summary&gt;</span></li>
	<li style="background:#f3f3f3;"><span style="color:#808080;">///</span><span style="color:#008000;"> What now???</span></li>
	<li><span style="color:#808080;">///</span><span style="color:#008000;"> </span><span style="color:#808080;">&lt;/summary&gt;</span></li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">Cancellation</span></li>
	<li>{</li>
	<li style="background:#f3f3f3;">}</li>
</ol>
</div>
</div>
</div>
<h1>REST and DDD (Domain Driven Design)</h1>
So it occurs to me, that we have a perfect fit for this cancellation logic in OOP world. This would be to have a “Cancel” method in the order class, and no longer have simple DTOs, but rather have business rules like in Domain Driven Design. Unfortunately we have a mismatch between REST and DDD, because even if we use POST for executing the method on the resource, how could we represent a method as a resource when doing a GET? We would have to expose in our service GET-less resources. Let’s see how this could look:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:03990192-44fc-4bfc-be25-70f55e12484b" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">Order</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">int</span> Id { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">OrderItem</span>&gt; Items { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">Customer</span> Customer { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">DateTime</span> SubmittedOn { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">OrderStatus</span> Status { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    </li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">void</span> Cancel()</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">this</span>.Status = <span style="color:#2b91af;">OrderStatus</span>.Cancelled;</li>
	<li style="background:#f3f3f3;">    }</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
Getting an order (<a href="http://localhost/orders/5">http://localhost/orders/5</a>) could be like this:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b393ecc5-91ba-4996-9049-3055fc940fe4" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Order</span><span style="color:#0000ff;">&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Id</span><span style="color:#0000ff;">&gt;</span>1<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Id</span><span style="color:#0000ff;">&gt;</span></li>
	<li>  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">SubmittedOn</span><span style="color:#0000ff;">&gt;</span>1/1/0001 12:00:00 AM<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">SubmittedOn</span><span style="color:#0000ff;">&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">Status</span><span style="color:#0000ff;">&gt;</span>New<span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Status</span><span style="color:#0000ff;">&gt;</span></li>
	<li>  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">link</span><span style="color:#0000ff;"> </span><span style="color:#ff0000;">rel</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">OrderItemCollection</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">href</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Items</span>"<span style="color:#0000ff;"> /&gt;</span></li>
	<li style="background:#f3f3f3;">  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">link</span><span style="color:#0000ff;"> </span><span style="color:#ff0000;">rel</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Customer</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">href</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Customer</span>"<span style="color:#0000ff;"> /&gt;</span></li>
	<li>  <span style="color:#0000ff;">&lt;</span><span style="color:#a31515;">link</span><span style="color:#0000ff;"> </span><span style="color:#ff0000;">rel</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Order.Cancel</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">href</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">Cancel</span>"<span style="color:#0000ff;"> </span><span style="color:#ff0000;">method</span><span style="color:#0000ff;">=</span>"<span style="color:#0000ff;">POST</span>"<span style="color:#0000ff;"> /&gt;</span></li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">&lt;/</span><span style="color:#a31515;">Order</span><span style="color:#0000ff;">&gt;</span></li>
</ol>
</div>
</div>
</div>
So notice how the link to the Cancel has a rel of type “Order.Cancel”, so that means that the type of resource is the Cancel of an order, and last but not least, checkout the “method” attribute that implies that you should POST to that url if you want to navigate to it. A GET on that Cancel method will make no different, and will show nothing interesting, and probably even throw a 405 (method not allowed) error code.

So how bad is it to break this law in the REST world for the sake of readability and bringing the REST services closer to a Domain Driven world? Why not adopt the sense of GET-less resources (actions on resources like I call them) to make our (and our REST clients) lives easier? After all, can you not POST in a web with a FORM that points to a URL that has no GET handler?
<blockquote>So here’s the my question, GET-less Resources (actions): yes or no? Thoughts?</blockquote>
NOTE: “rel”, “href” and “method” attributes and their contents are just for illustration purpose, I’m not stating they SHOULD look like that.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2011-03-01 22:33:36</wp:post_date>
		<wp:post_date_gmt>2011-03-01 22:33:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rest-get-less-resourcesactions-yes-or-no</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="http"><![CDATA[HTTP]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<category domain="post_tag" nicename="webhttp"><![CDATA[WebHttp]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1302629772]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1302629770]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[z9SThlkwgPJY]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[499032864]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My experience at Tellago...</title>
		<link>http://machadogj.com/2011/03/my-experience-at-tellago/</link>
		<pubDate>Mon, 07 Mar 2011 18:05:54 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://thegsharp.wordpress.com/?p=357</guid>
		<description></description>
		<content:encoded><![CDATA[Now that <a href="http://weblogs.asp.net/gsusx/archive/2011/01/17/we-are-hiring-take-a-minute-to-read-this-is-not-another-bs-talk.aspx" target="_blank">Tellago is hiring again</a>, I thought it was a good opportunity to blog about what I've been telling everyone for while now. So ﻿here are some stuff about working at Tellago.

The thing that impressed me the most when applying for a job at Tellago was the amount of excellent professionals the company has. I was thrilled about the idea of working with so many guys from whom I was going to be able to learn so much. Here are some of the guys I've had the pleasure to work with so far:
<ul>
	<li><a href="http://weblogs.asp.net/gsusx/">Jesus Rodriguez</a></li>
	<li><a href="http://weblogs.asp.net/donxml/">Don Demsak</a></li>
	<li><a href="http://professionalaspnet.com/">Chris Love</a></li>
	<li><a href="http://weblogs.asp.net/cibrax/">Pablo Cibraro</a></li>
	<li>Silvio Massari</li>
	<li><a href="http://weblogs.asp.net/marianor/">Mariano Rodriguez</a></li>
	<li><a href="http://adglopez.wordpress.com/">Adrian Lopez</a></li>
	<li><a href="http://www.leandrodg.com.ar/">Leandro Diaz</a></li>
</ul>
﻿﻿﻿Even though this was enough motivation for me to join Tellago, the story doesn't end there. Tellago is the only company I've ever heard of, that actually is really concerned about our careers, and does a lot of effort so that we can grow ourselves as professionals. Just to give an example, last year's CodeCamp BA sponsorship, which they did while not even having customers in Argentina, but they did it so that we could participate and give out presentations.

Another prove of Tellago's great commitment to their employees, is that Tellago has decided to send me to the TechEd 2011 and pay for the entire thing! As you guessed by now, I can't be more thankful since going to US has been a wish for me for a long time, and now I get to not only go to US but also attend to this amazing conference!

And last but not least, if you like challenges like I do, if you like researching and implementing fun stuff, if writting a Linq provider for Mainframes sounds interesting to you, or maybe a DataService provider for MongoDB, a WCF Channel for Event Broker, or even a load testing library using Rx, and a lot more, then Tellago is the right place for you!

Putted into Jesus words:
<blockquote>WE DO NOT CARE IF YOU DON'T HAVE A GREAT RESUME!!!!!! We care about your talent and passion.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2011-03-07 18:05:54</wp:post_date>
		<wp:post_date_gmt>2011-03-07 18:05:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-experience-at-tellago</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hiring"><![CDATA[hiring]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tellago"><![CDATA[Tellago]]></category>
		<category domain="post_tag" nicename="tellago-studios"><![CDATA[Tellago Studios]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1299521155]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1299521157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[XzsqjEaCUtKf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[511178795]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SO-Aware Test Workbench Release</title>
		<link>http://machadogj.com/2011/03/so-aware-test-workbench-release/</link>
		<pubDate>Wed, 09 Mar 2011 18:23:22 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[Today, <a href="http://www.tellagostudios.com/" target="_blank">Tellago Studios</a> has released the first version of “<a href="http://tellagostudios.com/products/so-aware-test-workbench%E2%84%A2" target="_blank">SO-Aware Test Workbench</a>”. With this new tool, Tellago Studios is bringing service testing world closer to developers. This tool allows you to use SO-Aware service repository to execute both functional and load tests. You can even create your local projects, and later export these to SO-Aware. For an endpoint.tv episode on this tool, you can click <a href="http://tellagostudios.com/products/so-aware-test-workbench%E2%84%A2" target="_blank">here</a>.

Here’s how easy it is to use this tool, after you install and open it, you can browse to your SO-Aware service repository in order to use the service and test configurations.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image1.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb1.png" border="0" alt="image" width="553" height="379" /></a>

Use the SO-Aware explorer to browse your services, and your tests.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image2.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb2.png" border="0" alt="image" width="551" height="378" /></a>

Pick from one of the following options:
<ul>
	<li>Run Test: run the test and visualize the result from this option.</li>
	<li>Run Load Test: pick from one of our 4 different types of load test and watch the results in real-time as the tests are executing.</li>
	<li>Visualize: See the historical records of the test executions stored in SO-Aware.</li>
	<li>Copy: copy one or more tests from your SO-Aware explorer into your local Project.</li>
	<li>Edit: edit the test from this tool and save the changes to the service repository.</li>
	<li>Delete: remove the test from the service repository.</li>
</ul>
So if you don’t have SO-Aware already, you can download the express edition and give it a try!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2011-03-09 18:23:22</wp:post_date>
		<wp:post_date_gmt>2011-03-09 18:23:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-aware-test-workbench-release</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="so-aware"><![CDATA[SO-Aware]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tellago-studios"><![CDATA[Tellago Studios]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1299695126]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1299695128]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[YTxavSGouNdy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630350]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[WCF Load Testing with SO-Aware Test Workbench &laquo; G# blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://thegsharp.wordpress.com/2011/03/10/wcf-load-testing-with-so-aware-test-workbench/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.61.63</wp:comment_author_IP>
			<wp:comment_date>2011-03-10 01:01:57</wp:comment_date>
			<wp:comment_date_gmt>2011-03-10 01:01:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] LinQ          &larr; SO-Aware Test Workbench&nbsp;Release [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>WCF Load Testing with SO-Aware Test Workbench</title>
		<link>http://machadogj.com/2011/03/wcf-load-testing-with-so-aware-test-workbench/</link>
		<pubDate>Thu, 10 Mar 2011 00:57:35 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=434</guid>
		<description></description>
		<content:encoded><![CDATA[As I announced in my previous <a href="http://thegsharp.wordpress.com/2011/03/09/so-aware-test-workbench-release/" target="_blank">post</a>, Tellago Studios has released the <a href="http://tellagostudios.com/products/so-aware-test-workbench%E2%84%A2" target="_blank">SO-Aware Test Workbench</a> tool. And with this tool, WCF services Load Testing has been made easy. You can now use SO-Aware service repository’s service and testing configuration, and execute a load test in one of the 4 load test strategies with just a few clicks.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image3.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb3.png" border="0" alt="image" width="644" height="440" /></a>
<h1>Simple</h1>
The “Simple” (or default) strategy will simulate a certain amount of clients, which will wait for a specified delay between calls to the service. This type of load tests are very common, and they are very good at providing average times, and the average amount of errors too. The graphic of this test will usually look like a horizontal line if the service is stable through the entire test.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image4.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb4.png" border="0" alt="image" width="644" height="458" /></a>

One of the most interesting uses of this type of tests is to provide with some baseline information about your service performance. At the beginning of a sprint, or iteration you can run this test and record the results by exporting the data. After you finish your new features/refactoring, you execute the test with the same parameters, and compare the results with your baseline. You can then decide whether your changes to your service affected it’s performance, and you can do this very early in your development cycle.
<h1>Linear</h1>
Simulates a linear increase (or decrease) in the amount of clients hitting the service. The graphic of the results of this type of test is usually a line going from the initial amount of clients to the final amount of clients, and depending on the service performance, the average time might start to drop (actually increase it’s value) or improve (decreasing it’s value) reaching a certain amount of concurrency.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image5.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb5.png" border="0" alt="image" width="644" height="459" /></a>

Notice how the thread count (yellow) and average time (blue) increases linearly, and the test count (green) decreases with time. When the concurrency level reached 30 (30 concurrent clients) notice how the performance dropped drastically, and then continued to degrade at the previous pace. Turns out that the WCF throttling configuration is set to a maximum of 30 concurrent calls, so when the service reaches that limit, it starts to queue the requests (making the average time bigger as well). As opposed to this, the previous example maintained the average and count pretty much constant, and the fact that it’s hard to see the different lines in the picture is because it had almost no variations (overlapping the dots).
<h1>Burst</h1>
The burst strategy simulates high peaks of traffic followed by a “quiet” period of time. The aim of this test is to see if tests start to fail or timeout, and whether the period of “quiet-ness” is enough for the service to recover. The graphic of this test as you might have guessed by now is of peaks separated of a certain amount of time (seconds). This is very easy to see in the “Passed vs Failed” chart that is below the “Results” chart we have been looking at:

<a href="http://machadogj.com/wp-content/uploads/2011/03/image6.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb6.png" border="0" alt="image" width="644" height="459" /></a>

The test is configured to stress the test with a concurrency level of 20 for 2 seconds (Burst 2000ms), and then stand still for 5 seconds (delay 5000ms). Notice in the second highlighted peak, how the service receives requests in the second number 6, and finishes the last request at second 10, and then requests start appearing again at second number 13. So if we take the 2 seconds of Burst plus 5 seconds of delay those 7 seconds are being illustrated from seconds 6 to 13. In this case, the service handled the load pretty well, since as you can see there were no failed tests, and it handled the load before the next Burst started.
<h1>Saw tooth</h1>
I’m not a big fan of this last strategy, since it may be the more sophisticated one, but it’s also the harder to read. In this test, the number of clients will go from an initial value, to a maximum, then to a minimum, and finally go back to the initial value. This gives the impression of a saw tooth in the graphic.

<a href="http://machadogj.com/wp-content/uploads/2011/03/image7.png"><img style="display:inline;border:0;" title="image" src="http://machadogj.com/wp-content/uploads/2011/03/image_thumb7.png" border="0" alt="image" width="644" height="459" /></a>

It’s very easy to understand this test if you follow the yellow line which is the thread count. In this case it starts in 40 and has a variation of .90 (90%), so it reaches 76, then drops down to 4, and ends with 40. As for the data that it throws, it can be seen as a combination of a burst and linear strategies, meaning that you might be interested in recording at which point the service starts to drop the performance (similar to linear), but you are also interested in whether your service can recover to a drop on the peak of load (similar to burst).
<h1>Conclusion</h1>
As you can see load testing with SO-Aware Test Workbench is extremely easy, and yet the information you can gather from it’s results is very important. And because the service configuration is in SO-Aware, you can change your service configuration and see how that impacts your service performance (extremely useful for tweaking throttling and even binding configuration).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date>2011-03-10 00:57:35</wp:post_date>
		<wp:post_date_gmt>2011-03-10 00:57:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-load-testing-with-so-aware-test-workbench</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="soaware"><![CDATA[soaware]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tellago"><![CDATA[Tellago]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="workbench"><![CDATA[workbench]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1299718909]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1299718911]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[gFu1IOcQrEms]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630376]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[Pablo M Cibraro]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mvplatino.ms/blogs/cibrax/archive/2011/03/10/service-testing-made-easy-with-so-aware-test-workbench.aspx</wp:comment_author_url>
			<wp:comment_author_IP>74.55.37.18</wp:comment_author_IP>
			<wp:comment_date>2011-03-10 17:47:10</wp:comment_date>
			<wp:comment_date_gmt>2011-03-10 17:47:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Service Testing made easy with SO-Aware Test Workbench...</strong>

I happy to announce today a new addition to our SO-Aware service repository toolset, SO-Aware Test Workbench...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[Service Testing made easy with SO-Aware Test Workbench]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ittreats.com/microsoft/aspnet/service-testing-made-easy-with-so-aware-test-workbench.html</wp:comment_author_url>
			<wp:comment_author_IP>173.201.196.148</wp:comment_author_IP>
			<wp:comment_date>2011-03-11 06:20:47</wp:comment_date>
			<wp:comment_date_gmt>2011-03-11 06:20:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Machado, one of the developers behind this project, has written an excellent post describing all the functionality that can find today in the tool. You can also see the tool in [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[Service Testing made easy with SO-Aware Test Workbench - | Positive Pozitive.NeT]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://pozitive.net/2011/03/11/service-testing-made-easy-with-so-aware-test-workbench/</wp:comment_author_url>
			<wp:comment_author_IP>93.89.23.24</wp:comment_author_IP>
			<wp:comment_date>2011-03-11 13:17:27</wp:comment_date>
			<wp:comment_date_gmt>2011-03-11 13:17:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Machado, one of the developers behind this project, has written an excellent post describing all the functionality that can find today in the tool. You can also see the tool in [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Object Oriented Programing &raquo; Service Testing made easy with SO-Aware Test Workbench]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.shinguyen.net/?p=408</wp:comment_author_url>
			<wp:comment_author_IP>209.200.244.231</wp:comment_author_IP>
			<wp:comment_date>2011-04-16 01:47:41</wp:comment_date>
			<wp:comment_date_gmt>2011-04-16 01:47:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Machado, one of the developers behind this project, has written an excellent post describing all the functionality that can find today in the tool. You can also see the tool in [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[Moncler Sito Ufficiale]]></wp:comment_author>
			<wp:comment_author_email>Mrozek9512@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piuminimonclerufficiale.com</wp:comment_author_url>
			<wp:comment_author_IP>108.62.46.252</wp:comment_author_IP>
			<wp:comment_date>2011-11-08 22:22:22</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 22:22:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really enjoy blogs and i also can tell that you in addition really enjoy blogging...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[Moncler Sito Ufficiale]]></wp:comment_author>
			<wp:comment_author_email>Schnur5990@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piuminimonclerufficiale.com</wp:comment_author_url>
			<wp:comment_author_IP>108.62.107.14</wp:comment_author_IP>
			<wp:comment_date>2011-11-09 00:37:01</wp:comment_date>
			<wp:comment_date_gmt>2011-11-09 00:37:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi! I am aware this can be somewhat away from topic but I was wondering which website platform are you currently using for this web site? I am obtaining fed up with Wp because We have experienced issues with hackers and I'm taking a look at choices for one more platform. I would do great in the event you can level me personally in direction of a great platform.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Moncler Piumini Nuovo]]></wp:comment_author>
			<wp:comment_author_email>Krulik798@msn.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piuminimonclerufficiale.com/moncler-piumini-nuovo-c-10.html</wp:comment_author_url>
			<wp:comment_author_IP>108.62.238.239</wp:comment_author_IP>
			<wp:comment_date>2011-11-14 08:44:54</wp:comment_date>
			<wp:comment_date_gmt>2011-11-14 08:44:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Would you mind if I quote a few of your posts provided that Presented credit and options back to your website? My personal blog is within the identical area of interest as your own and my guests would certainly truly benefit from a few of the details a person current right here. Make sure you let me know if this ok with a person. Many thanks!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[giubbotti belstaff]]></wp:comment_author>
			<wp:comment_author_email>Valenta4745@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.giaccabelstaff.com</wp:comment_author_url>
			<wp:comment_author_IP>108.62.46.208</wp:comment_author_IP>
			<wp:comment_date>2011-11-15 09:33:27</wp:comment_date>
			<wp:comment_date_gmt>2011-11-15 09:33:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Directly to the idea and well crafted! Exactly why can not everybody else be similar to this?]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[Moncler Sito ufficiale]]></wp:comment_author>
			<wp:comment_author_email>Amadi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.piuminimonclerufficiale.com</wp:comment_author_url>
			<wp:comment_author_IP>184.82.67.91</wp:comment_author_IP>
			<wp:comment_date>2011-11-18 23:51:03</wp:comment_date>
			<wp:comment_date_gmt>2011-11-18 23:51:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, thanks for the fantastic information..I was searching for the information. to assist me make some important decisions. Thanks for all your advice.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>157</wp:comment_id>
			<wp:comment_author><![CDATA[canada goose vest]]></wp:comment_author>
			<wp:comment_author_email>Jungquist4716@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.jakkecanadagoose.net</wp:comment_author_url>
			<wp:comment_author_IP>66.219.17.212</wp:comment_author_IP>
			<wp:comment_date>2011-11-24 15:50:04</wp:comment_date>
			<wp:comment_date_gmt>2011-11-24 15:50:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A blog including the ones you have needs to be gaining much money from adsense.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[canada goose jacket]]></wp:comment_author>
			<wp:comment_author_email>Slick2793@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.canadagoosejacketinca.com</wp:comment_author_url>
			<wp:comment_author_IP>66.219.17.212</wp:comment_author_IP>
			<wp:comment_date>2011-11-24 23:03:36</wp:comment_date>
			<wp:comment_date_gmt>2011-11-24 23:03:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Woah this is simply an insane measure of facts, will have to for utilized age groups to be able to round up thus thanks for just posting this operating individuals. But if your at any time in any demand for  related data, perhaps a little bit of  education, methods tactics or just common  points, merely visit my own webpage!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[Camisetas de Real Madrid baratas]]></wp:comment_author>
			<wp:comment_author_email>Wrzesinski563@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.camisetadelrealmadrid.com</wp:comment_author_url>
			<wp:comment_author_IP>184.82.67.91</wp:comment_author_IP>
			<wp:comment_date>2011-12-06 03:40:09</wp:comment_date>
			<wp:comment_date_gmt>2011-12-06 03:40:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am just however listening to advice from anyone, even though I will be increasing my own self. I actually surely appreciated reading everything that is definitely created on your web site.Maintain the aarticles coming. We wanted it all!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Yet another Event Aggregator (using Rx)</title>
		<link>http://machadogj.com/2011/03/yet-another-event-aggregator-using-rx/</link>
		<pubDate>Fri, 11 Mar 2011 00:18:20 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[I was really interested in this <a href="http://jfromaniello.blogspot.com/2010/04/event-aggregator-with-reactive.html" target="_blank">post</a> from Jose Romaniello about Event aggregators in Rx, which looks like the perfect fit, and Keith Woods has his own version in this other <a href="http://keith-woods.com/Blog/post/Another-version-of-the-EventAggregator.aspx" target="_blank">post</a>. So  why am I doing yet another post on Event aggregation using Rx? I want to show my (much) simpler version of it, and how you can find different ways to do the same thing in Rx.

Here’s Jose’s definition of an Event aggregator:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:db05b589-b31c-4bea-85d5-3d9622fc4f93" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">interface</span> <span style="color:#2b91af;">IEventPublisher</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">void</span> Publish&lt;TEvent&gt;(TEvent sampleEvent);</li>
	<li style="background:#f3f3f3;">    <span style="color:#2b91af;">IObservable</span>&lt;TEvent&gt; GetEvent&lt;TEvent&gt;();</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
So you can get an IObservable&lt;T&gt; of a certain type of events using the GetEvent method, and you can post events of a certain type using the Publish method. One of the problems with most of the samples that I’ve seen around, is that they don’t handle inheritance very well. So if you wanted to do GetEvent of the Type “ValidationEvent” which is a base class for all validation events, that’s not very well supported because you would need to specify the base class in the Publish method:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f8594ce8-5bc2-422c-8411-4237b2f4ae8a" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">var</span> aggregator = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">EventAggregator</span>();</li>
	<li style="background:#f3f3f3;">aggregator.GetEvent&lt;<span style="color:#2b91af;">ValidationEvent</span>&gt;().Subscribe(x =&gt; <span style="color:#2b91af;">Console</span>.WriteLine(<span style="color:#a31515;">"Validation event: {0}"</span>, x.Message));</li>
	<li>aggregator.Publish&lt;<span style="color:#2b91af;">ValidationEvent</span>&gt;(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">InsufficientFounds</span> { User = <span style="color:#a31515;">"John Doe"</span>, RequestedAmount = 200 });</li>
	<li style="background:#f3f3f3;"><span style="color:#2b91af;">Console</span>.ReadKey();</li>
</ol>
</div>
</div>
</div>
Notice how you specify “ValidationEvent” in the Publish generic parameter, but you pass an “InsufficientFounds”.

I wanted to support inheritance without the need to specify the base class, so I thought I’d share my version of an Event aggregator that handles inheritance, which turned out to be even simpler.
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c1c2fe7c-3489-423b-9e1b-d207ec0231ca" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">EventAggregator</span> : <span style="color:#2b91af;">IEventPublisher</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">private</span> <span style="color:#2b91af;">ISubject</span>&lt;<span style="color:#0000ff;">object</span>&gt; _subject = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">Subject</span>&lt;<span style="color:#0000ff;">object</span>&gt;();</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">IObservable</span>&lt;T&gt; GetEvent&lt;T&gt;()</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> _subject.AsObservable().OfType&lt;T&gt;();</li>
	<li>    }</li>
	<li style="background:#f3f3f3;"> </li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">void</span> Publish&lt;TEvent&gt;(TEvent sampleEvent)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        _subject.OnNext(sampleEvent);</li>
	<li style="background:#f3f3f3;">    }</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
Notice the use of the “OfType” operator that filters the events based on the desired type.

Let’s test this with three different events:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f3d09879-322f-4a1b-8ec8-aca7b98a860b" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:500px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">ValidationEvent</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">virtual</span> <span style="color:#0000ff;">string</span> Message { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">}</li>
	<li> </li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">InsufficientFounds</span> : <span style="color:#2b91af;">ValidationEvent</span></li>
	<li>{</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">string</span> Message</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">get</span></li>
	<li>        {</li>
	<li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">string</span>.Format(<span style="color:#a31515;">"User {0} does not have enough money to pay {1}"</span>, User, RequestedAmount);</li>
	<li>        }</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">set</span></li>
	<li>        {</li>
	<li style="background:#f3f3f3;">            <span style="color:#0000ff;">throw</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">NotImplementedException</span>();</li>
	<li>        }</li>
	<li style="background:#f3f3f3;">    }</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> User { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">decimal</span> RequestedAmount { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li>}</li>
	<li style="background:#f3f3f3;"> </li>
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">SampleEvent</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> Message { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li>
	<li style="background:#f3f3f3;">}</li>
</ol>
</div>
</div>
</div>
And now we can react to all the events derived from ValidationEvent like this:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:42af2841-0185-43d7-8411-4a201ac52a6e" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li>[<span style="color:#2b91af;">TestMethod</span>]</li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">void</span> GetEvent_WhenUsingType_PublishesDerivedTypes()</li>
	<li>{</li>
	<li style="background:#f3f3f3;">    <span style="color:#2b91af;">ValidationEvent</span> published = <span style="color:#0000ff;">null</span>;</li>
	<li>    <span style="color:#0000ff;">var</span> aggregator = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">EventAggregator</span>();</li>
	<li style="background:#f3f3f3;">    aggregator.GetEvent&lt;<span style="color:#2b91af;">ValidationEvent</span>&gt;().Subscribe(x =&gt; published = x);</li>
	<li>    </li>
	<li style="background:#f3f3f3;">    aggregator.Publish(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">InsufficientFounds</span> { User = <span style="color:#a31515;">"John Doe"</span>, RequestedAmount = 200 });</li>
	<li> </li>
	<li style="background:#f3f3f3;">    <span style="color:#2b91af;">Assert</span>.IsInstanceOfType(published, <span style="color:#0000ff;">typeof</span>(<span style="color:#2b91af;">InsufficientFounds</span>));</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
So even though you are asking for ValidationEvents, the aggregator raises events of derived types. In the case of events that are not derived, the event will not be raised:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ba47b968-9346-4822-b2bb-748fa7139a68" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#fff;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0;padding:0 0 0 5px;">
	<li>[<span style="color:#2b91af;">TestMethod</span>]</li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">void</span> GetEvent_WhenUsingType_NoneAssignableTypesAreRaised()</li>
	<li>{</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">string</span> sampleEvent = <span style="color:#a31515;">"Sample event"</span>;</li>
	<li>    <span style="color:#2b91af;">ValidationEvent</span> published = <span style="color:#0000ff;">null</span>;</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">var</span> aggregator = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">EventAggregator</span>();</li>
	<li>    aggregator.GetEvent&lt;<span style="color:#2b91af;">ValidationEvent</span>&gt;().Subscribe(x =&gt; published = x);</li>
	<li style="background:#f3f3f3;">    </li>
	<li>    aggregator.Publish(sampleEvent); <span style="color:#008000;">//non-ValidationEvent</span></li>
	<li style="background:#f3f3f3;"> </li>
	<li>    <span style="color:#2b91af;">Assert</span>.IsNull(published);</li>
	<li style="background:#f3f3f3;">}</li>
</ol>
</div>
</div>
</div>
This demonstrate the power behind the Reactive Extensions and it’s operators.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2011-03-11 00:18:20</wp:post_date>
		<wp:post_date_gmt>2011-03-11 00:18:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yet-another-event-aggregator-using-rx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="reactive-extensions"><![CDATA[reactive extensions]]></category>
		<category domain="post_tag" nicename="rx"><![CDATA[Rx]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1299871102]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1299871103]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[MWXcx2W1iAcU]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[534391341]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[Carina Chau]]></wp:comment_author>
			<wp:comment_author_email>Ebenstein10@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://bestsingaporeguide.com/</wp:comment_author_url>
			<wp:comment_author_IP>111.94.201.232</wp:comment_author_IP>
			<wp:comment_date>2011-11-09 17:37:02</wp:comment_date>
			<wp:comment_date_gmt>2011-11-09 17:37:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Keep up the  great  work , I read few posts  on this  internet site  and I think  that your  web blog  is  rattling interesting and  holds   circles  of  great   information.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[William Tansil]]></wp:comment_author>
			<wp:comment_author_email>Barias@ymail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.doniirawan.com/news-articles/harga-tiket-pesawat-murah/</wp:comment_author_url>
			<wp:comment_author_IP>220.255.2.118</wp:comment_author_IP>
			<wp:comment_date>2011-11-19 04:46:45</wp:comment_date>
			<wp:comment_date_gmt>2011-11-19 04:46:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very  nice  pattern  and  fantastic   content material ,  hardly anything  else we  want  : D.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>262</wp:comment_id>
			<wp:comment_author><![CDATA[Josh Gough]]></wp:comment_author>
			<wp:comment_author_email>jsgough@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>166.248.99.219</wp:comment_author_IP>
			<wp:comment_date>2012-06-17 04:20:00</wp:comment_date>
			<wp:comment_date_gmt>2012-06-17 04:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, this is cool and elegant.

I will need to dig into Rx more.

I want to understand how it deals with the reference story that all the
hand carved aggregators have to face.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[560195725]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>WCF Web API Preview 4 released!</title>
		<link>http://machadogj.com/2011/04/wcf-web-api-preview-4-released/</link>
		<pubDate>Fri, 15 Apr 2011 01:55:10 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/?p=446</guid>
		<description></description>
		<content:encoded><![CDATA[The Preview 4 of the WCF Web API is now available in codeplex, for downloading the bits you can go <a href="http://wcf.codeplex.com/releases/view/64449" target="_blank">here</a>.

A few things I have noticed about this latest release are.
<h3>Fluent Configuration API</h3>
In this release, we no longer need to inherit from HttpHostConfiguration in order to perform trivial configuration tasks. We can use the IHttpHostConfigurationBuilder class to pass to the MapServiceRoute method instead. Here is a snipet of code from the Contact sample project:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1c0cc215-c028-4953-84f0-eb9e02fb991b" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">var</span> config = <span style="color:#2b91af;">HttpHostConfiguration</span></li>
	<li style="background:#f3f3f3;">    .Create()</li>
	<li>    .AddFormatters(</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">ContactPngFormatter</span>(),</li>
	<li>        <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">ContactFeedFormatter</span>(<span style="color:#a31515;">"http://localhost:9000/Contact"</span>),</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">VCardFormatter</span>(),</li>
	<li>        <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">CalendarFormatter</span>()).</li>
	<li style="background:#f3f3f3;">    SetResourceFactory(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MefResourceFactory</span>(container)).</li>
	<li>    AddMessageHandlers(<span style="color:#0000ff;">typeof</span> (<span style="color:#2b91af;">LoggingChannel</span>), <span style="color:#0000ff;">typeof</span> (<span style="color:#2b91af;">UriFormatExtensionMessageChannel</span>));</li>
	<li style="background:#f3f3f3;"> </li>
	<li>SetMappings();</li>
	<li style="background:#f3f3f3;"> </li>
	<li><span style="color:#2b91af;">RouteTable</span>.Routes.MapServiceRoute&lt;<span style="color:#2b91af;">ContactResource</span>&gt;(<span style="color:#a31515;">"Contact"</span>, config);</li>
</ol>
</div>
</div>
</div>
Pretty cool right?
<h3>Message Handlers</h3>
Notice the “AddMessageHandlers” method from the fluent interface in the previous snipet. It takes a “params Type[]”, and those types have to inherit from DelegatingChannel and non-abstract. With this Message handlers you can manipulate the HttpRequestMessages and even avoid the execution of the request, and return a HttpResponseMessage without actually hitting the service operation (something very hard to accomplish in the previous version). Here is a LoggingChannel that comes with the bits:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:63f86cd9-b7b8-43d1-b529-dda97cd05ff2" class="wlWriterEditableSmartContent" style="display:inline;float:left;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">LoggingChannel</span> : <span style="color:#2b91af;">DelegatingChannel</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> LoggingChannel(<span style="color:#2b91af;">HttpMessageChannel</span> handler)</li>
	<li style="background:#f3f3f3;">        :<span style="color:#0000ff;">base</span>(handler)</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        </li>
	<li>    }</li>
	<li style="background:#f3f3f3;"> </li>
	<li>    <span style="color:#0000ff;">protected</span> <span style="color:#0000ff;">override</span> System.Threading.Tasks.<span style="color:#2b91af;">Task</span>&lt;<span style="color:#2b91af;">HttpResponseMessage</span>&gt; SendAsync(<span style="color:#2b91af;">HttpRequestMessage</span> request, System.Threading.<span style="color:#2b91af;">CancellationToken</span> cancellationToken)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        System.Diagnostics.<span style="color:#2b91af;">Trace</span>.TraceInformation(<span style="color:#a31515;">"Begin Request: {0} {1}"</span>, request.Method, request.RequestUri);</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">base</span>.SendAsync(request, cancellationToken);</li>
	<li>    }</li>
	<li style="background:#f3f3f3;"> </li>
	<li>}</li>
</ol>
</div>
</div>
</div>
<h3>IQueryable&lt;T&gt; Support</h3>
As of this release, there’s no need for the QueryComposition attribute anymore. Instead, you can just return an IQueryable&lt;T&gt; (as opposed to IEnumerable&lt;T&gt;).
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ec014bfc-e3f2-40f6-b292-7bb934067c6c" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:300px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2em;padding:0 0 0 5px;">
	<li>[<span style="color:#2b91af;">WebGet</span>(UriTemplate = <span style="color:#a31515;">""</span>)]</li>
	<li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#2b91af;">IQueryable</span>&lt;<span style="color:#2b91af;">Contact</span>&gt; Get()</li>
	<li>{</li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">return</span> contacts.AsQueryable();</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
<h3>Media type formatters</h3>
The MediaTypeProcessor has been replaced with MediaTypeFormatter (no longer a Processor), and the abstract methods WriteToStream and ReadFromStream have been renamed to OnWriteToStream and OnReadFromStream. The cool new feature of the Formatters are two virtual methods: OnCanReadType and OnCanWriteType which return whether this Formatter can read or write a particular Type. Take the following Formatter that can write a representation, but can’t read from a request.
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ca1674f8-63e8-4f36-97db-a49e6814952c" class="wlWriterEditableSmartContent" style="display:inline;float:none;margin:0;padding:0;">
<div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;">
<div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div>
<div style="background:#ddd;max-height:500px;overflow:auto;">
<ol style="background:#ffffff;margin:0 0 0 2.5em;padding:0 0 0 5px;">
	<li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">CalendarFormatter</span> : <span style="color:#2b91af;">MediaTypeFormatter</span></li>
	<li style="background:#f3f3f3;">{</li>
	<li>    <span style="color:#0000ff;">public</span> CalendarFormatter()</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">this</span>.SupportedMediaTypes.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MediaTypeHeaderValue</span>(<span style="color:#a31515;">"text/calendar"</span>));</li>
	<li style="background:#f3f3f3;">    }</li>
	<li> </li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">object</span> OnReadFromStream(<span style="color:#2b91af;">Type</span> type, System.IO.<span style="color:#2b91af;">Stream</span> stream, System.Net.Http.Headers.<span style="color:#2b91af;">HttpContentHeaders</span> contentHeaders)</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">throw</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">NotImplementedException</span>();</li>
	<li>    }</li>
	<li style="background:#f3f3f3;"> </li>
	<li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">void</span> OnWriteToStream(<span style="color:#2b91af;">Type</span> type, <span style="color:#0000ff;">object</span> value, System.IO.<span style="color:#2b91af;">Stream</span> stream, System.Net.Http.Headers.<span style="color:#2b91af;">HttpContentHeaders</span> contentHeaders, System.Net.<span style="color:#2b91af;">TransportContext</span> context)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">var</span> singleContact = value <span style="color:#0000ff;">as</span> <span style="color:#2b91af;">Contact</span>;</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">if</span> (singleContact != <span style="color:#0000ff;">null</span>)</li>
	<li>        {</li>
	<li style="background:#f3f3f3;">            WriteEvent(singleContact, stream);</li>
	<li>        }</li>
	<li style="background:#f3f3f3;">    }</li>
	<li> </li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">protected</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">bool</span> OnCanReadType(<span style="color:#2b91af;">Type</span> type)</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">false</span>;</li>
	<li>    }</li>
	<li style="background:#f3f3f3;"> </li>
	<li>    <span style="color:#0000ff;">protected</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">bool</span> OnCanWriteType(<span style="color:#2b91af;">Type</span> type)</li>
	<li style="background:#f3f3f3;">    {</li>
	<li>        <span style="color:#0000ff;">return</span> (type == <span style="color:#0000ff;">typeof</span> (<span style="color:#2b91af;">Contact</span>));</li>
	<li style="background:#f3f3f3;">    }</li>
	<li> </li>
	<li style="background:#f3f3f3;">    <span style="color:#0000ff;">private</span> <span style="color:#0000ff;">void</span> WriteEvent(<span style="color:#2b91af;">Contact</span> contact, <span style="color:#2b91af;">Stream</span> stream)</li>
	<li>    {</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">var</span> dateFormat = <span style="color:#a31515;">"yyyyMMddTHHmmssZ"</span>;</li>
	<li>        <span style="color:#0000ff;">var</span> eventDate = <span style="color:#2b91af;">DateTime</span>.Now.ToUniversalTime().AddDays(2).AddHours(4);</li>
	<li style="background:#f3f3f3;">        <span style="color:#0000ff;">var</span> writer = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">StreamWriter</span>(stream);</li>
	<li>        writer.WriteLine(<span style="color:#a31515;">"BEGIN:VCALENDAR"</span>);</li>
	<li style="background:#f3f3f3;">        writer.WriteLine(<span style="color:#a31515;">"VERSION:2.0"</span>);</li>
	<li>        writer.WriteLine(<span style="color:#a31515;">"BEGIN:VEVENT"</span>);</li>
	<li style="background:#f3f3f3;">        writer.WriteLine(<span style="color:#0000ff;">string</span>.Format(<span style="color:#a31515;">"UID:{0}"</span>, contact.Email));</li>
	<li>        writer.WriteLine(<span style="color:#0000ff;">string</span>.Format(<span style="color:#a31515;">"DTSTAMP:{0}"</span>, <span style="color:#2b91af;">DateTime</span>.Now.ToUniversalTime().ToString(dateFormat)));</li>
	<li style="background:#f3f3f3;">        writer.WriteLine(<span style="color:#0000ff;">string</span>.Format(<span style="color:#a31515;">"DTSTART:{0}"</span>, eventDate.ToString(dateFormat)));</li>
	<li>        writer.WriteLine(<span style="color:#0000ff;">string</span>.Format(<span style="color:#a31515;">"DTEND:{0}"</span>, eventDate.AddHours(1).ToString(dateFormat)));</li>
	<li style="background:#f3f3f3;">        writer.WriteLine(<span style="color:#a31515;">"SUMMARY:Discuss WCF Web API"</span>);</li>
	<li>        writer.WriteLine(<span style="color:#a31515;">"END:VEVENT"</span>);</li>
	<li style="background:#f3f3f3;">        writer.WriteLine(<span style="color:#a31515;">"END:VCALENDAR"</span>);</li>
	<li>        writer.Flush();</li>
	<li style="background:#f3f3f3;">    }</li>
	<li>}</li>
</ol>
</div>
</div>
</div>
 

All this, a more complete Contacts samples, and much more on this last release, download and enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date>2011-04-15 01:55:10</wp:post_date>
		<wp:post_date_gmt>2011-04-15 01:55:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-web-api-preview-4-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf"><![CDATA[WCF]]></category>
		<category domain="post_tag" nicename="wcf-http"><![CDATA[WCF HTTP]]></category>
		<category domain="post_tag" nicename="wcf-web-api"><![CDATA[WCF WEB API]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[WEB]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1302833270]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1302833271]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[vLmaWL6NZUaG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630406]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[WCF Web APIs Preview 4 :MS-Joe (Joe Stagner)]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.msjoe.com/2011/04/wcf-web-apis-preview-4/</wp:comment_author_url>
			<wp:comment_author_IP>216.128.2.225</wp:comment_author_IP>
			<wp:comment_date>2011-04-17 16:46:31</wp:comment_date>
			<wp:comment_date_gmt>2011-04-17 16:46:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://thegsharp.wordpress.com/2011/04/15/wcf-web-api-preview-4-released/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Gentile's Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://samgentile.com/Web/wcf/the-continuing-evolution-of-wcf-ndash-the-web-uris-evolve/</wp:comment_author_url>
			<wp:comment_author_IP>72.15.222.100</wp:comment_author_IP>
			<wp:comment_date>2011-04-22 15:23:34</wp:comment_date>
			<wp:comment_date_gmt>2011-04-22 15:23:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>The Continuing Evolution of WCF–the Web Uris Evolve...</strong>

Some time ago, and I am sure I blogged about it, I wrote with approval Glenn Block started to engage the community with the first drop of the Web APIs for WCF. This is far past the previous work done in WCF 3.5 REST stack work as well as the REST start...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[The Continuing Evolution of WCF–the Web Uris Evolve - Technology | Zeytin.Net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://site.zeytin.net/technology/the-continuing-evolution-of-wcf%e2%80%93the-web-uris-evolve.html</wp:comment_author_url>
			<wp:comment_author_IP>93.89.23.24</wp:comment_author_IP>
			<wp:comment_date>2011-07-19 12:45:37</wp:comment_date>
			<wp:comment_date_gmt>2011-07-19 12:45:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://thegsharp.wordpress.com/2011/04/15/wcf-web-api-preview-4-released/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[Bail Bonds Los Angeles]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bailbonds-losangeles.net/tag/bail-bonds-los-angeles-fletcher-bail-bonds</wp:comment_author_url>
			<wp:comment_author_IP>108.62.180.34</wp:comment_author_IP>
			<wp:comment_date>2011-11-27 23:00:24</wp:comment_date>
			<wp:comment_date_gmt>2011-11-27 23:00:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Bail Bonds Los Angeles...</strong>

[...]below are a handful of web links to web-sites which we connect to because we believe they will be well worth visiting[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>258</wp:comment_id>
			<wp:comment_author><![CDATA[mujeres article]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bookmarkpanel.com/story.php?title=mujeres-and-ladies-single-internet-dating</wp:comment_author_url>
			<wp:comment_author_IP>99.111.13.148</wp:comment_author_IP>
			<wp:comment_date>2012-05-15 07:14:45</wp:comment_date>
			<wp:comment_date_gmt>2012-05-15 07:14:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Website Link...</strong>

[...]underneath you’ll get the connect to some internet sites that individuals feel you[...]...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tellago has a new website</title>
		<link>http://machadogj.com/2011/04/tellago-has-a-new-website/</link>
		<pubDate>Mon, 25 Apr 2011 19:58:16 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/04/25/tellago-has-a-new-website/</guid>
		<description></description>
		<content:encoded><![CDATA[We are very happy to announce that Tellago has a <a href="http://www.tellago.com" target="_blank">new website</a>! You should check it out and go to “WHAT WE SAY” section for very cool <a href="http://www.tellago.com/what_we_says/articles" target="_blank">articles</a>, <a href="http://www.tellago.com/blogs" target="_blank">blogs</a> and <a href="http://www.tellago.com/category/section/videos" target="_blank">videos</a>. You can also follow Tellago on twitter @tellago and @tellagostudios.

Cheers!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date>2011-04-25 19:58:16</wp:post_date>
		<wp:post_date_gmt>2011-04-25 19:58:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tellago-has-a-new-website</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1303761497]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1303761498]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_yup</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[AsKj0Im0ZjDb]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[postage rates 2011]]></wp:comment_author>
			<wp:comment_author_email>jigglypuff10@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.currentpostagerates.org</wp:comment_author_url>
			<wp:comment_author_IP>24.54.111.134</wp:comment_author_IP>
			<wp:comment_date>2011-11-21 08:18:44</wp:comment_date>
			<wp:comment_date_gmt>2011-11-21 08:18:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i love your blog, i have it in my rss reader and always like new things coming up from it.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>REST services with MVC</title>
		<link>http://machadogj.com/2011/05/rest-services-with-mvc/</link>
		<pubDate>Mon, 02 May 2011 14:29:09 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/05/02/rest-services-with-mvc/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>First of all, you might be wondering why would I create a REST service with MVC when I can use WCF 4.0, WCF Starter Kit Preview 2 (deprecated), or even the new WCF Web APIs. The short answer is, because websites are, in practice, RESTful. So MVC has some interesting built in support for REST. So when thinking about MVC as a framework for REST services, we could actually ask ourselves “why not?”. As for the rest of the frameworks, each of them have also good reasons to be used, and I would say that you should use which ever fits best for your particular scenario.</p>  <p>Having said that, we must not overlook the fact that MVC has been released for websites (primarily), and as such we have excellent support for UI stuff, and we lack some support for other stuff we might need when building services. The lack of support for content negotiation, and media type based serialization is what I will discuss in this post.</p>  <h3>Formatters</h3>  <p>For the following snipets, I will be using this very simple interface for serializing/deserializing based on a content-type.</p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aad7d75f-d853-4d39-a2f3-f99cc1680af0" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">interface</span> <span style="color:#2b91af;">IFormatter</span></li> <li style="background:#f3f3f3;">{</li> <li>    <span style="color:#0000ff;">bool</span> CanHandle(<span style="color:#0000ff;">string</span> contentType);</li> <li style="background:#f3f3f3;">    <span style="color:#0000ff;">string</span> Write(<span style="color:#0000ff;">object</span> data);</li> <li>    <span style="color:#0000ff;">object</span> Read(<span style="color:#2b91af;">Type</span> type, System.IO.<span style="color:#2b91af;">Stream</span> stream);</li> <li style="background:#f3f3f3;">}</li> </ol> </div> </div> </div>  <h3>Deserializing based on content type</h3>  <p>Let’s look at one example</p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:877eccaf-d7d6-459d-949f-19cd5a142931" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li>[<span style="color:#2b91af;">HttpPost</span>]</li> <li style="background:#f3f3f3;"><span style="color:#0000ff;">public</span> <span style="color:#2b91af;">ActionResult</span> Create(<span style="color:#0000ff;">int</span> id, <span style="color:#2b91af;">Order</span> order)</li> <li>{</li> <li style="background:#f3f3f3;">    order.Id = id;</li> <li>    <span style="color:#0000ff;">return</span> View(order);</li> <li style="background:#f3f3f3;">}</li> </ol> </div> </div> </div>  <p>MVC will not deserialize parameters based on the content-type header of the HTTP request. This means that if we want to send an HTTP request with content-type “application/xml” and send an XML representation of the order, MVC will not know what to do with it. On the other hand, we must take into account, that the id parameter will most likely be bound to a Uri parameter using the routing service, and we don’t want to mess that up.</p>  <p>Another thing we don’t want to overlook, is the fact that when deserializing the body, we can only deserialize one parameter, the rest should come through other means (uri, headers, cookies, etc).</p>  <p>MVC does give us some interesting extensibility points where to accomplish this. When trying to deserialize the body of the request, we could use the help of a model binder. Each parameter of your Controller method, is a Model in MVC. And every model is “binded” (deserialized) using a Model binder. The most common binder we usually use (probably wihout knowing) is a binder which binds the parameters using the requested Uri based on the registered routes. Model binders in MVC are registered on the Global.asax file using the ModelBinders.Binders collection. One of the annoying things about registering a new IModelBinder is that you must register a type for which this binder will be used. This is not ideal, since in our case, we want to deserialize whatever we have in the body.</p>  <p><a href="http://machadogj.com/wp-content/uploads/2011/05/image.png"><img style="border-bottom:0;border-left:0;display:inline;border-top:0;border-right:0;" title="image" border="0" alt="image" src="http://machadogj.com/wp-content/uploads/2011/05/image_thumb.png" width="644" height="115" /></a> </p>  <p>The other alternative we have is to add a CustomModelBinderAttribute on each attribute we want to deserialize using our media type based binder (take a look at this <a href="http://gregbeech.com/blog/deserializing-the-request-body-into-a-parameter-with-asp-net-mvc" target="_blank">post</a> for this approach).</p>  <h3>MediaTypeBinder</h3>  <p>In my case, I only want to use two types of parameters, Uri parameters based on routes, and the body parameter (when POSTing or PUTing). This means I will take a slightly different approach and assume that if the parameter is not in the route data, then it must come from the body. The easiest way to create a binder that is not associated to any particular type, and without loosing the out of the box binding functionality, is to inherit from DefaultModelBinder, and register our custom binder as the default. The code is very simple and uses the content-type header in the request to pick a formatter and do the deserialization.</p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:64ea27a6-fdff-4768-9807-69122a922092" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">MediaTypeBinder</span> : <span style="color:#2b91af;">DefaultModelBinder</span></li> <li style="background:#f3f3f3;">    {</li> <li>        <span style="color:#0000ff;">private</span> <span style="color:#0000ff;">static</span> <span style="color:#0000ff;">readonly</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">IFormatter</span>&gt; _formatters = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">IFormatter</span>&gt;();</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> DefaultType { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> MediaTypeBinder()</li> <li style="background:#f3f3f3;">        {</li> <li>            _formatters.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">XmlFormatter</span>());</li> <li style="background:#f3f3f3;">            _formatters.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">JsonFormatter</span>());</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">MediaTypeBinder</span> RegisterFormatter(<span style="color:#2b91af;">IFormatter</span> formatter)</li> <li style="background:#f3f3f3;">        {</li> <li>            _formatters.Add(formatter);</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">this</span>;</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">object</span> BindModel(<span style="color:#2b91af;">ControllerContext</span> controllerContext, <span style="color:#2b91af;">ModelBindingContext</span> bindingContext)</li> <li style="background:#f3f3f3;">        {</li> <li>            <span style="color:#0000ff;">if</span> (controllerContext.RouteData.Values.Keys.Contains(bindingContext.ModelName))</li> <li style="background:#f3f3f3;">            {</li> <li>                <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">base</span>.BindModel(controllerContext, bindingContext);</li> <li style="background:#f3f3f3;">            }</li> <li>            <span style="color:#0000ff;">else</span></li> <li style="background:#f3f3f3;">            {</li> <li>                <span style="color:#0000ff;">return</span> BindModel(controllerContext.HttpContext.Request.ContentType,</li> <li style="background:#f3f3f3;">                                    controllerContext.HttpContext.Request.InputStream,</li> <li>                                    bindingContext.ModelType);</li> <li style="background:#f3f3f3;">            }</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">private</span> <span style="color:#0000ff;">object</span> BindModel(<span style="color:#0000ff;">string</span> contentType, System.IO.<span style="color:#2b91af;">Stream</span> stream, <span style="color:#2b91af;">Type</span> type)</li> <li style="background:#f3f3f3;">        {</li> <li>            contentType = <span style="color:#0000ff;">string</span>.IsNullOrWhiteSpace(contentType) ? DefaultType : contentType;</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">var</span> formatter = _formatters.FirstOrDefault(f =&gt; f.CanHandle(contentType));</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">if</span> (formatter == <span style="color:#0000ff;">null</span>)</li> <li>            {</li> <li style="background:#f3f3f3;">                <span style="color:#0000ff;">throw</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">InvalidOperationException</span>(<span style="color:#a31515;">&quot;Content type not supported.&quot;</span>);</li> <li>            }</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">else</span></li> <li>            {</li> <li style="background:#f3f3f3;">                <span style="color:#0000ff;">return</span> formatter.Read(type, stream);</li> <li>            }</li> <li style="background:#f3f3f3;">        }</li> <li>    }</li> </ol> </div> </div> </div>  <p>If the parameter is in the routed data, then we use the default binder. If it’s not, we use the right formatter based on the content type.</p>  <h3>Serializing based on Accept header</h3>  <p>Another thing about MVC is that it will pick up the right view for you and render the response using that view. In our case, we don’t need a conventional view, but rather a serialization of the response. This can be done using another extensibility point from MVC called ActionFilters. Action filters are attributes with which you can decorate the methods you want, or which you can register globally to run in every request. Action filters run before and after the controller action is invoked, so you can intercept the View that the controller returned, and perform your serialization on the View’s model.</p>  <p>The code is very similar to the Binder, except this time we are looking in the HTTP accept header for serialization.</p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:818b1ccd-2fc6-4165-8e62-e7c9ed3af6d5" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">MediaTypeFilter</span> : <span style="color:#2b91af;">ActionFilterAttribute</span></li> <li style="background:#f3f3f3;">    {</li> <li>        <span style="color:#0000ff;">private</span> <span style="color:#0000ff;">static</span> <span style="color:#0000ff;">readonly</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">IFormatter</span>&gt; _formatters = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">List</span>&lt;<span style="color:#2b91af;">IFormatter</span>&gt;();</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> DefaultType { <span style="color:#0000ff;">get</span>; <span style="color:#0000ff;">set</span>; }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#008000;">// for deserialization</span></li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">public</span> MediaTypeFilter()</li> <li>        {</li> <li style="background:#f3f3f3;">            _formatters.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">XmlFormatter</span>());</li> <li>            _formatters.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">JsonFormatter</span>());</li> <li style="background:#f3f3f3;">        }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">public</span> <span style="color:#2b91af;">MediaTypeFilter</span> RegisterFormatter(Formatters.<span style="color:#2b91af;">IFormatter</span> formatter)</li> <li>        {</li> <li style="background:#f3f3f3;">            _formatters.Add(formatter);</li> <li>            <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">this</span>;</li> <li style="background:#f3f3f3;">        }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">void</span> OnActionExecuted(<span style="color:#2b91af;">ActionExecutedContext</span> filterContext)</li> <li>        {</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">if</span> (!(filterContext.Result <span style="color:#0000ff;">is</span> <span style="color:#2b91af;">ViewResult</span>)) <span style="color:#0000ff;">return</span>;</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">var</span> utf8 = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">UTF8Encoding</span>(<span style="color:#0000ff;">false</span>);</li> <li>            <span style="color:#0000ff;">var</span> data = ((<span style="color:#2b91af;">ViewResult</span>)filterContext.Result).ViewData.Model;</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">var</span> acceptedTypes = filterContext.RequestContext.HttpContext.Request.AcceptTypes ?? <span style="color:#0000ff;">new</span> <span style="color:#0000ff;">string</span>[0];</li> <li>            </li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">string</span> contentType = DefaultType;</li> <li>            <span style="color:#0000ff;">var</span> formatter = GetFormatter(acceptedTypes, <span style="color:#0000ff;">ref</span> contentType);</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>            filterContext.Result = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">ContentResult</span></li> <li style="background:#f3f3f3;">                    {</li> <li>                        ContentType = contentType,</li> <li style="background:#f3f3f3;">                        Content = formatter.Write(data),</li> <li>                        ContentEncoding = utf8</li> <li style="background:#f3f3f3;">                    };</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">private</span> <span style="color:#2b91af;">IFormatter</span> GetFormatter(<span style="color:#0000ff;">string</span>[] acceptedTypes, <span style="color:#0000ff;">ref</span> <span style="color:#0000ff;">string</span> contentType)</li> <li style="background:#f3f3f3;">        {</li> <li>            <span style="color:#0000ff;">if</span> (!acceptedTypes.Any())</li> <li style="background:#f3f3f3;">            {</li> <li>                acceptedTypes = <span style="color:#0000ff;">new</span>[] { DefaultType };</li> <li style="background:#f3f3f3;">            }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">            <span style="color:#2b91af;">IFormatter</span> formatter;</li> <li>            <span style="color:#008000;">//pick the first formatter that can handle any accepted type.</span></li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">var</span> formatterMatch = _formatters</li> <li>                .SelectMany(_ =&gt; acceptedTypes, (x, y) =&gt; <span style="color:#0000ff;">new</span> { Formatter = x, ContentType = y })</li> <li style="background:#f3f3f3;">                .FirstOrDefault(x =&gt; x.Formatter.CanHandle(x.ContentType));</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">if</span> (formatterMatch != <span style="color:#0000ff;">null</span>)</li> <li>            {</li> <li style="background:#f3f3f3;">                formatter = formatterMatch.Formatter;</li> <li>                contentType = formatterMatch.ContentType;</li> <li style="background:#f3f3f3;">            }</li> <li>            <span style="color:#0000ff;">else</span></li> <li style="background:#f3f3f3;">            {</li> <li>                formatter = GetDefaultFormatter();</li> <li style="background:#f3f3f3;">            }</li> <li>            <span style="color:#0000ff;">return</span> formatter;</li> <li style="background:#f3f3f3;">        }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">private</span> <span style="color:#2b91af;">IFormatter</span> GetDefaultFormatter()</li> <li>        {</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> _formatters.First(f =&gt; f.CanHandle(DefaultType));</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">override</span> <span style="color:#0000ff;">void</span> OnActionExecuting(<span style="color:#2b91af;">ActionExecutingContext</span> filterContext)</li> <li style="background:#f3f3f3;">        {</li> <li>            <span style="color:#008000;">//do nothing. deserialization is being handled in the MediaTypeBinder.</span></li> <li style="background:#f3f3f3;">        }</li> <li>    }</li> </ol> </div> </div> </div>  <p>Just so that you can have the entire implementation, I leave you the Xml and Json formatters.</p>  <p>   <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2dc1ef10-d1c4-41f8-8ada-586868fac986" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">JsonFormatter</span> : <span style="color:#2b91af;">IFormatter</span></li> <li style="background:#f3f3f3;">{</li> <li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">bool</span> CanHandle(<span style="color:#0000ff;">string</span> contentType)</li> <li style="background:#f3f3f3;">    {</li> <li>        <span style="color:#0000ff;">return</span> contentType.EndsWith(<span style="color:#a31515;">&quot;/json&quot;</span>);</li> <li style="background:#f3f3f3;">    }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> Write(<span style="color:#0000ff;">object</span> data)</li> <li>    {</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">if</span> (data == <span style="color:#0000ff;">null</span>)</li> <li>        {</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> <span style="color:#a31515;">&quot;{}&quot;</span>;</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">using</span> (<span style="color:#0000ff;">var</span> stream = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MemoryStream</span>())</li> <li style="background:#f3f3f3;">        {</li> <li>            <span style="color:#2b91af;">JavaScriptSerializer</span> js = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">JavaScriptSerializer</span>();</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span>  js.Serialize(data);</li> <li>        }</li> <li style="background:#f3f3f3;">    }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">object</span> Read(<span style="color:#2b91af;">Type</span> type, <span style="color:#2b91af;">Stream</span> stream)</li> <li>    {</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">JavaScriptSerializer</span>().Deserialize(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">StreamReader</span>(stream).ReadToEnd(), type);</li> <li>    }</li> <li style="background:#f3f3f3;">}</li> </ol> </div> </div> </div> </p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c0cd913b-5888-4d87-991e-20c11ed7cf9d" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">class</span> <span style="color:#2b91af;">XmlFormatter</span> : <span style="color:#2b91af;">IFormatter</span></li> <li style="background:#f3f3f3;">{</li> <li>    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">bool</span> CanHandle(<span style="color:#0000ff;">string</span> contentType)</li> <li style="background:#f3f3f3;">    {</li> <li>        <span style="color:#0000ff;">return</span> contentType.EndsWith(<span style="color:#a31515;">&quot;/xml&quot;</span>);</li> <li style="background:#f3f3f3;">    }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">string</span> Write(<span style="color:#0000ff;">object</span> data)</li> <li>    {</li> <li style="background:#f3f3f3;">        <span style="color:#2b91af;">UTF8Encoding</span> utf8 = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">UTF8Encoding</span>(<span style="color:#0000ff;">false</span>);</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">if</span> (data == <span style="color:#0000ff;">null</span>)</li> <li>        {</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> <span style="color:#a31515;">&quot;&quot;</span>;</li> <li>        }</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>        <span style="color:#0000ff;">using</span> (<span style="color:#2b91af;">MemoryStream</span> stream = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MemoryStream</span>())</li> <li style="background:#f3f3f3;">        {</li> <li>            <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">XmlSerializer</span>(data.GetType(), <span style="color:#a31515;">&quot;&quot;</span>).Serialize(stream, data);</li> <li style="background:#f3f3f3;">            <span style="color:#0000ff;">return</span> utf8.GetString(stream.ToArray());</li> <li>        }</li> <li style="background:#f3f3f3;">    }</li> <li>&nbsp;</li> <li style="background:#f3f3f3;">    <span style="color:#0000ff;">public</span> <span style="color:#0000ff;">object</span> Read(<span style="color:#2b91af;">Type</span> type, <span style="color:#2b91af;">Stream</span> stream)</li> <li>    {</li> <li style="background:#f3f3f3;">        <span style="color:#0000ff;">return</span> <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">XmlSerializer</span>(type).Deserialize(stream);</li> <li>    }</li> <li style="background:#f3f3f3;">}</li> </ol> </div> </div> </div>  <p>Here’s how to set it up in the Global.asax.cs file.</p>  <div style="display:inline;float:none;margin:0;padding:0;" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c2a66274-c1ba-4c72-b0e4-cad17816c697" class="wlWriterEditableSmartContent"> <div style="border:#000080 1px solid;color:#000;font-family:'Courier New', Courier, Monospace;font-size:10pt;"> <div style="background:#000080;color:#fff;font-family:Verdana, Tahoma, Arial, sans-serif;font-weight:bold;padding:2px 5px;">Code Snippet</div> <div style="background:#fff;max-height:300px;overflow:auto;"> <ol style="background:#ffffff;margin:0;padding:0 0 0 5px;"> <li><span style="color:#0000ff;">protected</span> <span style="color:#0000ff;">void</span> Application_Start()</li> <li style="background:#f3f3f3;">{</li> <li>    RegisterRoutes(<span style="color:#2b91af;">RouteTable</span>.Routes);</li> <li style="background:#f3f3f3;">&nbsp;</li> <li>    <span style="color:#2b91af;">GlobalFilters</span>.Filters.Add(<span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MediaTypeBinder</span> { DefaultType = <span style="color:#a31515;">&quot;text/xml&quot;</span> });</li> <li style="background:#f3f3f3;">    <span style="color:#2b91af;">ModelBinders</span>.Binders.DefaultBinder = <span style="color:#0000ff;">new</span> <span style="color:#2b91af;">MediaTypeBinder</span>();</li> <li>}</li> </ol> </div> </div> </div>  <p></p>  <p></p>  <p>So know you can make your controller actions media-type agnostic, and let something else worry about how to handle serialization.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2011-05-02 14:29:09</wp:post_date>
		<wp:post_date_gmt>2011-05-02 14:29:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rest-services-with-mvc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1304346550]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1304346550]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[OENXRuHBywao]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630420]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[REST: Links, News and resources (1) &laquo; Angel &#8220;Java&#8221; Lopez on Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ajlopez.wordpress.com/2011/07/14/rest-links-news-and-resources-1/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.150</wp:comment_author_IP>
			<wp:comment_date>2011-07-14 10:43:55</wp:comment_date>
			<wp:comment_date_gmt>2011-07-14 10:43:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] REST services with MVC « G# blog http://thegsharp.wordpress.com/2011/05/02/rest-services-with-mvc/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[Jessica Bush from casevlud]]></wp:comment_author>
			<wp:comment_author_email>rapus@rapidus.info</wp:comment_author_email>
			<wp:comment_author_url>http://rapidus.info</wp:comment_author_url>
			<wp:comment_author_IP>86.111.88.43</wp:comment_author_IP>
			<wp:comment_date>2011-12-05 08:55:43</wp:comment_date>
			<wp:comment_date_gmt>2011-12-05 08:55:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[commute easily with immediate access to i95/128 and a short ride to i93, experience the ultimate in services and features both in your home and throughout the community.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>NOSQL DATABASES FOR THE .NET DEVELOPER</title>
		<link>http://machadogj.com/2011/05/nosql-databases-for-the-net-developer/</link>
		<pubDate>Wed, 04 May 2011 16:07:10 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/05/04/nosql-databases-for-the-net-developer/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Tellago is announcing “Tellago Technology Update series”. This new program is a series of webinars about technology topics. The first webinar will be the May 24, 2011 from 2:00 to 3:00 PM ET about NoSql databases for .net developers. Here’s the info:</p>  <p><b>NOSQL DATABASES FOR THE .NET DEVELOPER: WHAT’S THE FUSS ALL ABOUT?</b></p>  <blockquote>   <p>NOSQL (Not Only SQL) databases are one of the hottest technology trends in the software industry. Ranging from web companies like FaceBook, FourSquare, Twitter to IT power houses such as the US Federal Government, Banks or NASA; the number of companies that invest in the NOSQL paradigm as part of their infrastructure is growing exponentially.What is this NOSQL movement? What are the different types of NOSQL databases? What are the real advantages, challenges and ROIs? Can we leverage NOSQL databases from my .NET applications?This webinar will present an overview of the NOSQL movement from the perspectives of a .NET developer. We will explore the different types of NOSQL databases as well as their .NET interfaces. Finally, we will present a series of real world examples that illustrate how other companies have taken advantage of NOSQL databases as part of their infrastructure.</p> </blockquote>  <p>If you are interested and you want to join us, you can register in the following link:</p>  <p><a href="http://www.regonline.com/970013">http://www.regonline.com/970013</a></p>  <p>And you can stay tuned to our technology updates on <a href="http://tellago.com/what_we_says/tellago-technology-updates">http://tellago.com/what_we_says/tellago-technology-updates</a>!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date>2011-05-04 16:07:10</wp:post_date>
		<wp:post_date_gmt>2011-05-04 16:07:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql-databases-for-the-net-developer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1304525231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1304525232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ox51f6N1jSqJ]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[499028773]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attending TechEd NorthAmerica 2011</title>
		<link>http://machadogj.com/2011/05/attending-teched-northamerica-2011/</link>
		<pubDate>Fri, 27 May 2011 21:06:17 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/05/27/attending-teched-northamerica-2011/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This year, I had the chance to visit US for the first time, and go to the TechEd NorthAmerica 2011 thanks to <a href="http://www.tellago.com/" target="_blank">Tellago</a>, the company I work for. I can’t be more thankful for working in such a cool company that will go through all the trouble of taking me from Buenos Aires to Atlanta for the TechEd. Apart from having a great time at the TechEd I also knew 4 of my co-workers: <a href="http://tellago.com/content/leadership" target="_blank">Elizabeth Redding</a>, <a href="http://weblogs.asp.net/gsusx/default.aspx" target="_blank">Jesus Rodriguez</a>, <a href="http://geekswithblogs.net/sureshg/Default.aspx" target="_blank">Suresh Girirajan</a> and <a href="http://professionalaspnet.com/" target="_blank">Chris Love</a>; which was totally awesome. I’ve also met some very cool guys from Microsoft that even said they loved the stuff we were doing with the <a href="http://www.tellagostudios.com/products/so-aware-test-workbench%E2%84%A2" target="_blank">SO-Aware Test Workbench</a>!</p>  <p>In the sessions I have attended, I have learnt so many cool stuff, here’s just a few I can think of:</p>  <ol>   <li>Windows Azure: Web, Worker and VM roles.</li>    <li>SQL Azure</li>    <li>Azure tables</li>    <li>Azure blobs</li>    <li>Azure Windows Connect</li>    <li>Azure AppFabric: Service Bus. Development Tools. Application Manager</li>    <li>Private Cloud (I’ve actually seen one in action right there running all the hands on labs)</li>    <li>Entity Framework 4.1: Database initializer. Entity framework migrations (for updating existing database). Enums support!!! (for those who were there :P)</li>    <li>SQL Server (code name ‘Denali’): text search and spatial improvements.</li>    <li>WCF 4.0: routing, discovery, dependency ping, web service governance.</li>    <li>WF: real world scenarios (Jesus Rodriguez), and State Machine (Ron Jacobs).</li>    <li>WIF: extensibility points.</li>    <li>Windows Phone 7: Microsoft Push Notification Service(<a href="http://watoolkitwp7.codeplex.com">http://watoolkitwp7.codeplex.com</a>)</li> </ol>  <p>And all this fun stuff in one week! It was certainly a remarkable experience, and I hope to be able to do it again soon.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date>2011-05-27 21:06:17</wp:post_date>
		<wp:post_date_gmt>2011-05-27 21:06:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attending-teched-northamerica-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1306530379]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1306530378]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[q1yLthrZ6gpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[585969315]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[Fannie]]></wp:comment_author>
			<wp:comment_author_email>luci.bari@seznam.cz</wp:comment_author_email>
			<wp:comment_author_url>http://www.google.com/</wp:comment_author_url>
			<wp:comment_author_IP>109.230.216.60</wp:comment_author_IP>
			<wp:comment_date>2011-12-07 03:49:50</wp:comment_date>
			<wp:comment_date_gmt>2011-12-07 03:49:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[These pieces really set a standard in the idntusry.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tellago Studios launched Telesharp!</title>
		<link>http://machadogj.com/2011/06/tellago-studios-launched-telesharp/</link>
		<pubDate>Thu, 30 Jun 2011 14:24:35 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/06/30/tellago-studios-launched-telesharp/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I am very happy to announce a new product release by <a href="http://www.tellagostudios.com/" target="_blank">Tellago Studios</a>. Telesharp is what we call an application repository, and it will make the configuration management much easier and better by centralizing the applications assets, the configuration settings and logging of all the applications in your company.</p>  <p>Having worked as a Configuration Manager in some projects, and being in charge of deployments, I know how <strong>painful it is to keep the configuration files up to date</strong>. Half of the deployment problems are basically somebody forgetting to add some settings in a configuration file. Not to mention the fact that developers usually don’t have access to production credentials, etc.</p>  <p>So in my opinion,<strong> Telesharp is a must have application in every company</strong> with a formal configuration management process (which should be every company :)).</p>  <p>Visit the product page at <a href="http://tellagostudios.com/products/telesharp%E2%84%A2" target="_blank">Telesharp</a> for an amazing overview of all the features in the product. And if you want to see it in action, check out the videos <a href="http://www.tellagostudios.com/videos" target="_blank">here</a>.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>460</wp:post_id>
		<wp:post_date>2011-06-30 14:24:35</wp:post_date>
		<wp:post_date_gmt>2011-06-30 14:24:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tellago-studios-launched-telesharp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1309443876]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1309443877]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[m5fjPBF4NVBy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[499028433]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[Microsoft Office 2007]]></wp:comment_author>
			<wp:comment_author_email>BonillaHersey17@yahoomail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.msoffice2007key.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>126.114.226.156</wp:comment_author_IP>
			<wp:comment_date>2011-11-12 11:12:04</wp:comment_date>
			<wp:comment_date_gmt>2011-11-12 11:12:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello There. I discovered your weblog the use of msn. This is a very neatly written article. I will make sure to bookmark it and return to learn more of your helpful information. Thank you for the post. I will certainly return.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[better search engine rankings]]></wp:comment_author>
			<wp:comment_author_email>jay.stefen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xrumerservice.org</wp:comment_author_url>
			<wp:comment_author_IP>46.109.202.14</wp:comment_author_IP>
			<wp:comment_date>2011-11-14 22:30:54</wp:comment_date>
			<wp:comment_date_gmt>2011-11-14 22:30:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[heya machadogj.com owner found your website via yahoo but it was hard to find and I see you could have more visitors because there are not so many comments yet. I have found website which offer to dramatically increase traffic to your website http://xrumerservice.org they claim they managed to get close to 1000 visitors/day using their services you could also get lot more targeted traffic from search engines as you have now. I used their services and got significantly more visitors to my site. Hope this helps :) They offer back link service seo promotion <a href="http://xrumerservice.org" rel="nofollow">backlinks</a> website backlinks Take care. Jay]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Introducing Hermes – Open Source Pub/Sub</title>
		<link>http://machadogj.com/2011/07/introducing-hermes-open-source-pubsub/</link>
		<pubDate>Tue, 12 Jul 2011 14:12:14 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">https://thegsharp.wordpress.com/2011/07/12/introducing-hermes-open-source-pubsub/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>We are very excited to announce that <a href="http://www.tellago.com/" target="_blank">Tellago</a> DevLabs just released a new open source project, <a href="https://github.com/TellagoDevLabs/Hermes" target="_blank">Hermes</a>. Hermes is a publish/subscribe messaging engine based on HTTP and MongoDB. The project is open source, and it’s hosted in GitHub. The code can be downloaded from <a href="https://github.com/TellagoDevLabs/Hermes" target="_blank">here</a>, and Hermes documentation can be reached <a href="https://github.com/TellagoDevLabs/Hermes/wiki" target="_blank">here</a>.</p>  <p>There are several things that makes Hermes a very attractive alternative for doing pub/sub:</p>  <ol>   <li>it provides a fully documented RESTful API making the engine as interoperable as it gets.</li>    <li>it is a very light weight .NET alternative.</li>    <li>it is open source.</li>    <li>it will run either on premise or in the cloud.</li> </ol>  <p>So don’t hesitate to give it a try, we are looking forward to your feedback :)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>461</wp:post_id>
		<wp:post_date>2011-07-12 14:12:14</wp:post_date>
		<wp:post_date_gmt>2011-07-12 14:12:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-hermes-open-source-pubsub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1310479934]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1310479935]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[jI1Cg7e0cJvT]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630394]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Hermes: an open source implementation of Publish/Subscribe engine &laquo; Silvio Massari&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://silviomassari.wordpress.com/2011/07/12/hermes-an-open-source-implementation-of-publishsubscribe-engine/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.69.24</wp:comment_author_IP>
			<wp:comment_date>2011-07-13 14:24:17</wp:comment_date>
			<wp:comment_date_gmt>2011-07-13 14:24:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://thegsharp.wordpress.com/2011/07/12/introducing-hermes-open-source-pubsub/ [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Untopepancame]]></wp:comment_author>
			<wp:comment_author_email>sefgeomoaccox@mail.ru</wp:comment_author_email>
			<wp:comment_author_url>http://paylesscouponfree.com/</wp:comment_author_url>
			<wp:comment_author_IP>77.93.2.81</wp:comment_author_IP>
			<wp:comment_date>2011-11-05 23:20:42</wp:comment_date>
			<wp:comment_date_gmt>2011-11-05 23:20:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just one more great way to save lots of income upon auto tires is always to employ payless coupon codes. You can choose a lot of discount coupons regarding different elements. You’ll find inexpensive exhaust coupon codes and affordable auto deals while successfully which can be employed for car repairs. A price reduction car voucher might be incredibly handy if you’re holding serp issues. Coupons are a great way in order to maintain bucks high are a variety of discount codes easily available on the market. The highest approach to discover a discount that you can use is to appear and feel on their behalf in the magazine. You may also learn coupon codes for the on the web. It is possible to track down discount codes on-line or perhaps get very simple computer discount coupons from a site. <a href="http://paylesscouponfree.com/" / rel="nofollow">Payless coupon</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Woomieleharie]]></wp:comment_author>
			<wp:comment_author_email>amoustaitat@mail.ru</wp:comment_author_email>
			<wp:comment_author_url>http://www.usedcellphonesforsales.com/</wp:comment_author_url>
			<wp:comment_author_IP>77.93.2.81</wp:comment_author_IP>
			<wp:comment_date>2011-11-08 11:31:39</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 11:31:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The talk within the finest toughened cellular phone for traffic is built to be neck again fiercely asserted amidst consumers. There are lots of brands from which to opt with a lot of models. Then you scarcity capabilities to walk off into account, and also battery. In the end you obligated to distinguish the one that’s produce for you, and also period’s your own private meet with of style. The … la mode pre-eminent three hottest employed cellular phones elbow would be the BlackBerry Bead, Your Apple IPhone, as well as the Motorola talkabout Blade. All three or more of such are imaginary candidates and each has their acutely own durability as effectively as unsubstantial spots. We desire look at each people of these separately so that you can judge for yourself which of such you believe disposition be best.     
<a href="http://www.usedcellphonesforsales.com/" / rel="nofollow">Used cellphones for sale</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[Austin efdokata]]></wp:comment_author>
			<wp:comment_author_email>guestan@pokeda.info</wp:comment_author_email>
			<wp:comment_author_url>http://pokeda.info</wp:comment_author_url>
			<wp:comment_author_IP>193.53.4.252</wp:comment_author_IP>
			<wp:comment_date>2011-11-16 07:25:02</wp:comment_date>
			<wp:comment_date_gmt>2011-11-16 07:25:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[pokeda.info]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[JerPainiIroro]]></wp:comment_author>
			<wp:comment_author_email>fdgdfgdf@aderispharm.com</wp:comment_author_email>
			<wp:comment_author_url>http://crisisctp.cwahi.net/pain-in-the-eye-injury/</wp:comment_author_url>
			<wp:comment_author_IP>91.207.6.154</wp:comment_author_IP>
			<wp:comment_date>2011-12-05 14:28:01</wp:comment_date>
			<wp:comment_date_gmt>2011-12-05 14:28:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[With <a href="http://crisisctp.cwahi.net/pain-in-the-eye-injury/" / rel="nofollow">pain in the eye injury</a> unflinching beds <a href="http://crisisctp.cwahi.net/proctosedyl-supp/" / rel="nofollow">proctosedyl supp</a> hegemony rhetorics <a href="http://crisisctp.cwahi.net/pastules-cortisone-cream-topical/" / rel="nofollow">pastules cortisone cream topical</a> raftered occupants <a href="http://crisisctp.cwahi.net/new-steris-3013/" / rel="nofollow">new steris 3013</a> labourers midriff <a href="http://crisisctp.cwahi.net/is-robitussin-gluten-free/" / rel="nofollow">is robitussin gluten free</a> marked older <a href="http://crisisctp.cwahi.net/colorado-allergy/" / rel="nofollow">colorado allergy</a> freedom trudging <a href="http://crisisctp.cwahi.net/amoxil-side-effects/" / rel="nofollow">amoxil side effects</a> overboard aristocratic <a href="http://crisisctp.cwahi.net/custom-alu-trailer/" / rel="nofollow">custom alu trailer</a> growing accurate <a href="http://crisisctp.cwahi.net/crucial-racing/" / rel="nofollow">crucial racing</a> drunk hint <a href="http://crisisctp.cwahi.net/pyp-rights-and-responsibilities/" / rel="nofollow">pyp rights and responsibilities</a> sensibility question <a href="http://crisisctp.cwahi.net/theatre-prop-latex-scrim/" / rel="nofollow">theatre prop latex scrim</a> splinters lines <a href="http://crisisctp.cwahi.net/ge-protective-relay-catalog/" / rel="nofollow">ge protective relay catalog</a> dropping ivory <a href="http://crisisctp.cwahi.net/soothing-quiet-music/" / rel="nofollow">soothing quiet music</a> bile deliberately <a href="http://crisisctp.cwahi.net/tilia-chinensis/" / rel="nofollow">tilia chinensis</a> upstairs hands <a href="http://crisisctp.cwahi.net/citizen-emergency-response-team/" / rel="nofollow">citizen emergency response team</a> suspicions rechecking <a href="http://crisisctp.cwahi.net/mannitol-salts-agar/" / rel="nofollow">mannitol salts agar</a> spittle resisted <a href="http://crisisctp.cwahi.net/probate-laws-by-state/" / rel="nofollow">probate laws by state</a> destroyed endorse <a href="http://crisisctp.cwahi.net/calcium-citrate-chewables/" / rel="nofollow">calcium citrate chewables</a> instantly thought <a href="http://crisisctp.cwahi.net/combat-ax-fighting-tequnices/" / rel="nofollow">combat ax fighting tequnices</a> marauding extract <a href="http://crisisctp.cwahi.net/ds-download-play-single-pak/" / rel="nofollow">ds download play single pak</a> sprinted edifices <a href="http://crisisctp.cwahi.net/cushings-disease-in-dogs/" / rel="nofollow">cushings disease in dogs	</a> armed darted <a href="http://crisisctp.cwahi.net/adverse-effects-mentholatum/" / rel="nofollow">adverse effects mentholatum</a> dream green <a href="http://crisisctp.cwahi.net/humalog-room-temperture/" / rel="nofollow">humalog room temperture</a> apprehension unearthly <a href="http://crisisctp.cwahi.net/immediate-flight/" / rel="nofollow">immediate flight</a> bury sweat <a href="http://crisisctp.cwahi.net/clear-logix-gentle-foaming-acne-cleanser/" / rel="nofollow">clear logix gentle foaming acne cleanser</a> locked mighty <a href="http://crisisctp.cwahi.net/acellular-awkwardness/" / rel="nofollow">acellular</a> perspiration waters <a href="http://crisisctp.cwahi.net/seasonique-seasonale/" / rel="nofollow">seasonique seasonale</a> finish circumstances <a href="http://crisisctp.cwahi.net/southern-refrigerated/" / rel="nofollow">southern refrigerated</a> holes trusted <a href="http://crisisctp.cwahi.net/what-are-zinc-lozenges/" / rel="nofollow">what are zinc lozenges</a> secretly punctuated <a / rel="nofollow">st john's wort and lamictal</a> formations strongest <a href="http://crisisctp.cwahi.net/tong-lor-condo-sale/" / rel="nofollow">tong lor condo sale</a> shadowed insisted <a href="http://crisisctp.cwahi.net/pennyroyal-fermented/" / rel="nofollow">pennyroyal fermented</a> command ignore <a href="http://crisisctp.cwahi.net/lovastatin-gemfibrozil/" / rel="nofollow">lovastatin gemfibrozil</a> whence crumbling <a href="http://crisisctp.cwahi.net/enteral-feedings-pain/" / rel="nofollow">enteral feedings pain</a> menaced ornately <a href="http://crisisctp.cwahi.net/tal-gilad-starbright/" / rel="nofollow">tal gilad starbright</a> dry di <a href="http://crisisctp.cwahi.net/amiodarone-vs-simvastatin/" / rel="nofollow">amiodarone vs simvastatin</a> blasting luck <a href="http://crisisctp.cwahi.net/menthol-crystal-ex-india/" / rel="nofollow">menthol crystal ex india</a> camps robes <a href="http://crisisctp.cwahi.net/free-prone-movies-online/" / rel="nofollow">free prone movies online</a> gathering licked <a href="http://crisisctp.cwahi.net/universal-packing-machines-for-washing-powders/" / rel="nofollow">universal packing machines for washing powders</a> happiness youth <a href="http://crisisctp.cwahi.net/bpw-german-dance-chart/" / rel="nofollow">bpw german dance chart</a> apocalypse hauntingly <a href="http://crisisctp.cwahi.net/what-is-ketorolac/" / rel="nofollow">what is ketorolac</a> jogging left <a href="http://crisisctp.cwahi.net/cmv-221d-monitor-driver/" / rel="nofollow">cmv 221d monitor driver</a> howl suffer <a / rel="nofollow">reese's cake world</a> tense savage <a href="http://crisisctp.cwahi.net/traum-ueber-mich-in-einem-sarg/" / rel="nofollow">traum ueber mich in einem sarg</a> positions interrupted <a / rel="nofollow">graham haley's home-made silver cleaner</a> concentrated attendance <a href="http://crisisctp.cwahi.net/mc5-torrent/" / rel="nofollow">mc5 torrent</a> steadily make <a href="http://crisisctp.cwahi.net/cardizem-cr/" / rel="nofollow">cardizem cr</a> schemes defied <a href="http://crisisctp.cwahi.net/inactive-ingredient-povidone/" / rel="nofollow">inactive ingredient povidone</a> amusement retaking <a href="http://crisisctp.cwahi.net/taxol-dry-skin/" / rel="nofollow">taxol dry skin</a> untenanted dandies <a href="http://crisisctp.cwahi.net/androderm/" / rel="nofollow">androderm</a> trampled sated possible?]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Connected System MVP award 2011</title>
		<link>http://machadogj.com/2011/07/connected-system-mvp-award-2011/</link>
		<pubDate>Wed, 20 Jul 2011 00:54:13 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/2011/07/connected-system-mvp-award-2011/</guid>
		<description></description>
		<content:encoded><![CDATA[<p>The first of July while I was on the phone with <a href="http://weblogs.asp.net/gsusx/" target="_blank">Jesus Rodriguez</a> and <a href="http://weblogs.asp.net/cibrax/" target="_blank">Pablo Cibraro</a>, I received a very important email from the Microsoft MVP program; I was granted the Connected System MVP Award. It was funny that I read that email out loud in that call, since Jesus and Pablo where the guys who pushed me and mentored me in achieving this award. One part of the story they didn’t know is that at the same time, my wife Veronica was reading the email, and she was jumping off her chair of happiness, the reason being that getting the MVP was a very ambitious goal I had and for which I worked very hard throughout the year. So I want to take this opportunity to <strong>thank Jesus, Pablo and Veronica</strong> for being there for me all this time.</p> <h3>So what is the MVP? </h3> <p><a href="http://machadogj.com/wp-content/uploads/2011/07/MVP_Horizontal_FullColor.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="MVP_Horizontal_FullColor" border="0" alt="MVP_Horizontal_FullColor" src="http://machadogj.com/wp-content/uploads/2011/07/MVP_Horizontal_FullColor_thumb.png" width="244" height="101"></a> </p> <p>From the <a href="http://mvp.support.microsoft.com/" target="_blank">MVP</a> program website, they describe it like this:</p> <blockquote> <blockquote> <p>We seek to recognize the best and brightest from technology communities around the world with the Microsoft® Most Valuable Professional (MVP) Award.</p> <p>These exceptional community leaders come from a wide range of backgrounds. They are teachers, artists, doctors, engineers, as well as technologists, who actively share their high-quality, real-world technical expertise with the community and with Microsoft.</p> <p>With the MVP Award, we thank these inspiring individuals for representing the voice of thousands in the community through the powerful and independent feedback they give us, and for helping our customers maximize the potential of their software.</p></blockquote></blockquote> <h3>What is Connected System?</h3> <p>In the last few years, I’ve come to learn and master the WCF stack, and SOA practices, and had a hell of a time while doing it. So it has become my main area of expertise to explore ways to connect systems. The latest being through the use of REST services with the new WCF Web API.</p> <h3>Why did I want to become an MVP?</h3> <p>Before I joined <a href="http://www.tellago.com/" target="_blank">Tellago</a>, I knew little about the MVP program, but when Jesus and Pablo told me more about it I just loved the idea. To be awarded and recognized for your efforts in the tech community, makes contributing even more exciting. During this trip, I have known <strong>extremely cool people, excellent professionals, I had countless interesting debates</strong>, and it couldn’t have been a better experience.</p> <p>Since the beginning, it was Tellago’s vision to serve to their employees as a platform for growing as professionals, and the fact that I was able to become an MVP is just one of the many proofs that Tellago stays true to that vision, and it’s, in my opinion, what makes <strong>Tellago the best company</strong> I’ve ever worked for.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2011-07-20 00:54:13</wp:post_date>
		<wp:post_date_gmt>2011-07-20 00:54:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>connected-system-mvp-award-2011</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496630415]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[8wiv5B1hNB0F]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[José Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://joseoncode.com</wp:comment_author_url>
			<wp:comment_author_IP>190.137.14.176</wp:comment_author_IP>
			<wp:comment_date>2011-07-20 20:21:24</wp:comment_date>
			<wp:comment_date_gmt>2011-07-20 20:21:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations, very well deserved!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302674]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-07-20 20:53:10</wp:comment_date>
			<wp:comment_date_gmt>2011-07-20 20:53:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks mate!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>80</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302674]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381302708]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Tellago Studios Launches Moesion!</title>
		<link>http://machadogj.com/2011/09/tellago-studios-launches-moesion/</link>
		<pubDate>Mon, 19 Sep 2011 14:33:12 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=474</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;"><a href="http://machadogj.com/wp-content/uploads/2011/09/image.png"><img class="size-full wp-image-470 alignleft" title="image.png" src="http://machadogj.com/wp-content/uploads/2011/09/image.png" alt="" width="169" height="62" /></a> I am very excited to be writing this post, since we have been working very hard on getting this new product out. <a href="http://www.moesion.com" target="_blank">Moesion</a> was the most challenging, innovative and cool projects that I have ever participated in.</p>

<h2>So what is Moesion?</h2>
<p style="text-align: justify;"><a href="http://machadogj.com/wp-content/uploads/2011/09/image1.png"><img style="display: inline; margin-left: 0px; margin-right: 0px; border: 0px;" title="moesion mobile apps" src="http://machadogj.com/wp-content/uploads/2011/09/image_thumb1.png" alt="moesion mobile apps" width="135" height="232" align="right" border="0" /></a> Moesion is a cloud based platform that brings mobility to the IT world. With <a href="http://www.moesion.com" target="_blank">Moesion</a> you can do all kinds of stuff to manage your servers from your phone, tablet or desktop. Instead of a “remote desktop” solution that never fits well in mobile devices, we managed to create a touch-first interface with a great user experience as the main goal.</p>

<h2>How did we do it?</h2>
<p style="text-align: justify;">It merges cool new technologies like HTML 5, PubNub and of course Azure, this project has “cool” written all over it! With HTML 5 we were able to provide excellent user experience in the mobile ecosystems like smart phones and tablets, matching the native apps capabilities like touch, rotate and even swipe!</p>

<h2>How can you get it?</h2>
<p style="text-align: justify;">Subscribe now for a beta access in <a href="http://www.moesion.com">www.moesion.com</a>!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date>2011-09-19 14:33:12</wp:post_date>
		<wp:post_date_gmt>2011-09-19 14:33:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tellago-studios-launches-moesion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="azure"><![CDATA[azure]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[html5]]></category>
		<category domain="post_tag" nicename="it"><![CDATA[it]]></category>
		<category domain="post_tag" nicename="mobility"><![CDATA[mobility]]></category>
		<category domain="post_tag" nicename="moesion"><![CDATA[moesion]]></category>
		<category domain="post_tag" nicename="pubnub"><![CDATA[pubnub]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tellago-studios"><![CDATA[Tellago Studios]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[asrS2NbUb5hG]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[503881157]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Database Version Control - Incremental Scripts</title>
		<link>http://machadogj.com/2011/10/database-version-control-incremental-scripts/</link>
		<pubDate>Fri, 21 Oct 2011 01:20:31 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=497</guid>
		<description></description>
		<content:encoded><![CDATA[Back in this <a href="http://machadogj.com/2009/09/database-version-control-introduction/" target="_blank">post</a>, I explained the three different methods for versioning databases that I have worked with: backups, incremental scripts and Visual Studio Database Project. I never had a chance to blog about incremental scripts method and I thought I’d blog about it now.
<h3>Setting things up</h3>
<h4>DbVersion table</h4>
First, you need to add a table to keep track of all the incremental scripts that were executed against your database. Something like this will do:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4b1652d2-54a1-478a-a3e9-76a56442daf8" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #93c763;">CREATE</span><span style="color: #93c763;">TABLE</span><span style="color: #f1f2f3;"> [dbo]</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">[DbVersion]</span><span style="color: #808080;">(</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">[Id] [int] </span><span style="color: #93c763;">IDENTITY</span><span style="color: #808080;">(</span><span style="color: #ffcd22;">1</span><span style="color: #808080;">,</span><span style="color: #ffcd22;">1</span><span style="color: #808080;">)</span><span style="color: #808080;">NOT</span><span style="color: #808080;">NULL,</span></li>
	<li>    <span style="color: #f1f2f3;">[FileName] [varchar]</span><span style="color: #808080;">(</span><span style="color: #ffcd22;">250</span><span style="color: #808080;">)</span><span style="color: #808080;">NOT</span><span style="color: #808080;">NULL,</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">[Description] [varchar]</span><span style="color: #808080;">(</span><span style="color: #ffcd22;">4000</span><span style="color: #808080;">)</span><span style="color: #808080;">NOT</span><span style="color: #808080;">NULL,</span></li>
	<li>    <span style="color: #f1f2f3;">[Executed] [date] </span><span style="color: #808080;">NOT</span><span style="color: #808080;">NULL,</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">CONSTRAINT</span><span style="color: #f1f2f3;"> [PK_lalala] </span><span style="color: #93c763;">PRIMARY</span><span style="color: #93c763;">KEY</span><span style="color: #93c763;">CLUSTERED</span></li>
	<li><span style="color: #808080;">(</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">[Id] </span><span style="color: #93c763;">ASC</span></li>
	<li>  <span style="color: #808080;">)</span><span style="color: #93c763;">WITH </span><span style="color: #808080;">(</span><span style="color: #93c763;">PAD_INDEX</span><span style="color: #f1f2f3;">  </span><span style="color: #808080;">=</span><span style="color: #93c763;">OFF</span><span style="color: #808080;">,</span><span style="color: #93c763;">STATISTICS_NORECOMPUTE</span><span style="color: #f1f2f3;">  </span><span style="color: #808080;">=</span><span style="color: #93c763;">OFF</span><span style="color: #808080;">,</span><span style="color: #93c763;">IGNORE_DUP_KEY</span><span style="color: #808080;">=</span><span style="color: #93c763;">OFF</span><span style="color: #808080;">,</span><span style="color: #93c763;">ALLOW_ROW_LOCKS</span><span style="color: #f1f2f3;">  </span><span style="color: #808080;">=</span><span style="color: #93c763;">ON</span><span style="color: #808080;">,</span><span style="color: #93c763;">ALLOW_PAGE_LOCKS</span><span style="color: #808080;">=</span><span style="color: #93c763;">ON</span><span style="color: #808080;">)</span><span style="color: #93c763;">ON</span><span style="color: #f1f2f3;"> [PRIMARY]</span></li>
	<li style="background: #0c0c0c;"><span style="color: #808080;">)</span><span style="color: #93c763;">ON</span><span style="color: #f1f2f3;"> [PRIMARY]</span></li>
</ol>
</div>
</div>
</div>
So now you can query this table to see the current version, and what’s more, if the sequence in which the scripts were executed is correct.
<h4>Baseline</h4>
The baseline is a script which creates the entire database to a given point in time. So the first script that creates the database from scratch is one of many baselines that we might have. For creating the baseline in SQL Server, you can use the generate script option:

<a href="http://machadogj.com/wp-content/uploads/2011/10/image.png"><img style="display: inline; border-width: 0px;" title="image" src="http://machadogj.com/wp-content/uploads/2011/10/image_thumb.png" alt="image" width="644" height="408" border="0" /></a>

This will open a wizard that will guide through the steps to script your database. In order to have a proper baseline, you can clean the database, but leave all the data in the enumeration tables (like categories, and built in data), and use the “Script data and schema” option:

<a href="http://machadogj.com/wp-content/uploads/2011/10/image1.png"><img style="display: inline; border-width: 0px;" title="image" src="http://machadogj.com/wp-content/uploads/2011/10/image_thumb1.png" alt="image" width="521" height="484" border="0" /></a>
<h4>Versioning Scheme</h4>
You should pick a versioning scheme that suites your development process. The minimum setup that I would use is the following: [project name].[major].[minor]. In this scenario the major would be the current baseline, and the minor the incremental script relative to the baseline. All the versions with minor “0” are the baselines themselves. Now that we chose our scheme, let’s save the baseline with the following filename: demo.1.0.sql.
<h3>Workflow</h3>
<h4>Scenario 1 – Clean setup</h4>
By clean setup, I mean that you don’t have a database in your local environment. At this point you should do the following:

1.- Pick the biggest baseline (ie: demo.2.0.sql, etc) and execute it.
2.- Run all the incremental scripts of that baseline in ascending order (ie: demo.2.1.sql, demo.2.2.sql, etc).
<h4>Scenario 2 – Making a change</h4>
When making a change to our database, we will create a new incremental script, thus increasing the version in our database. Suppose that you update your SVN (or whichever version control tool) database folder, and you see that the latest script is demo.2.3.sql. At that point you’ll create a new file called demo.2.4.sql for your change.

The script itself can be made by a tool like Red Gate’s SQL Compare and SQL Data Compare, or even manually. Whichever method you choose for your scripts, it is usually a good practice to enclose the changes inside of a transaction. When the script is run, and after the changes are made, the script should insert a record in the DbVersion table mentioned before. By doing this, we ensure that the DbVersion is always up to date. Here is a sample script generated with SQL Compare to which I manually removed the GOs and added the insert to the DbVersion table:

&nbsp;
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:45092910-614a-4a05-987d-88b8d22bcd98" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #66747b;">/*</span></li>
	<li style="background: #0c0c0c;"><span style="color: #66747b;">Run this script on:</span></li>
	<li></li>
	<li style="background: #0c0c0c;">        <span style="color: #66747b;">(local)\sqlexpress.RestBucks2    -  This database will be modified</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #66747b;">to synchronize it with:</span></li>
	<li></li>
	<li style="background: #0c0c0c;">        <span style="color: #66747b;">(local)\sqlexpress.Store</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #66747b;">You are recommended to back up your database before running this script</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #66747b;">Script created by SQL Compare version 9.1.0 from Red Gate Software Ltd at 10/6/2011 7:41:17 PM</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #66747b;">*/</span></li>
	<li><span style="color: #93c763;">SET</span><span style="color: #93c763;">NUMERIC_ROUNDABORT</span><span style="color: #93c763;">OFF</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">SET</span><span style="color: #93c763;">ANSI_PADDING</span><span style="color: #808080;">,</span><span style="color: #93c763;">ANSI_WARNINGS</span><span style="color: #808080;">,</span><span style="color: #93c763;">CONCAT_NULL_YIELDS_NULL</span><span style="color: #808080;">,</span><span style="color: #93c763;">ARITHABORT</span><span style="color: #808080;">,</span><span style="color: #93c763;">QUOTED_IDENTIFIER</span><span style="color: #808080;">,</span><span style="color: #93c763;">ANSI_NULLS</span><span style="color: #93c763;">ON</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">IF</span><span style="color: #808080;">EXISTS</span><span style="color: #808080;">(</span><span style="color: #93c763;">SELECT</span><span style="color: #808080;">*</span><span style="color: #93c763;">FROM</span><span style="color: #f1f2f3;"> tempdb</span><span style="color: #808080;">..</span><span style="color: #00ff00;">sysobjects</span><span style="color: #93c763;">WHERE</span><span style="color: #f1f2f3;"> id</span><span style="color: #808080;">=</span><span style="color: #ff00ff;">OBJECT_ID</span><span style="color: #808080;">(</span><span style="color: #ff0000;">'tempdb..#tmpErrors'</span><span style="color: #808080;">))</span><span style="color: #93c763;">DROP</span><span style="color: #93c763;">TABLE</span><span style="color: #f1f2f3;"> #tmpErrors</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">CREATE</span><span style="color: #93c763;">TABLE</span><span style="color: #f1f2f3;"> #tmpErrors</span><span style="color: #808080;">(</span><span style="color: #f1f2f3;">Error </span><span style="color: #93c763;">int</span><span style="color: #808080;">)</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">SET</span><span style="color: #93c763;">XACT_ABORT</span><span style="color: #93c763;">ON</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">SET</span><span style="color: #93c763;">TRANSACTION</span><span style="color: #93c763;">ISOLATION</span><span style="color: #93c763;">LEVEL</span><span style="color: #93c763;">SERIALIZABLE</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">BEGIN</span><span style="color: #93c763;">TRANSACTION</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">PRINT</span><span style="color: #ff0000;">N'Altering [dbo].[Product]'</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">ALTER</span><span style="color: #93c763;">TABLE</span><span style="color: #f1f2f3;"> [dbo]</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">[Product] </span><span style="color: #93c763;">DROP</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">COLUMN</span><span style="color: #f1f2f3;"> [Version]</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">IF</span><span style="color: #ff00ff;">@@ERROR</span><span style="color: #808080;">&lt;&gt;</span><span style="color: #ffcd22;">0</span><span style="color: #808080;">AND</span><span style="color: #ff00ff;">@@TRANCOUNT</span><span style="color: #808080;">&gt;</span><span style="color: #ffcd22;">0</span><span style="color: #93c763;">ROLLBACK</span><span style="color: #93c763;">TRANSACTION</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">IF</span><span style="color: #ff00ff;">@@TRANCOUNT</span><span style="color: #808080;">=</span><span style="color: #ffcd22;">0</span><span style="color: #93c763;">BEGIN</span><span style="color: #93c763;">INSERT</span><span style="color: #93c763;">INTO</span><span style="color: #f1f2f3;"> #tmpErrors</span><span style="color: #808080;">(</span><span style="color: #f1f2f3;">Error</span><span style="color: #808080;">)</span><span style="color: #93c763;">SELECT</span><span style="color: #ffcd22;">1</span><span style="color: #93c763;">BEGIN</span><span style="color: #93c763;">TRANSACTION</span><span style="color: #93c763;">END</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">IF</span><span style="color: #808080;">EXISTS</span><span style="color: #808080;">(</span><span style="color: #93c763;">SELECT</span><span style="color: #808080;">*</span><span style="color: #93c763;">FROM</span><span style="color: #f1f2f3;"> #tmpErrors</span><span style="color: #808080;">)</span><span style="color: #93c763;">ROLLBACK</span><span style="color: #93c763;">TRANSACTION</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">IF</span><span style="color: #ff00ff;">@@TRANCOUNT</span><span style="color: #808080;">&gt;</span><span style="color: #ffcd22;">0</span><span style="color: #93c763;">BEGIN</span></li>
	<li><span style="color: #93c763;">INSERT</span><span style="color: #93c763;">INTO</span><span style="color: #f1f2f3;"> [dbo]</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">[DbVersion]</span></li>
	<li style="background: #0c0c0c;">           <span style="color: #808080;">(</span><span style="color: #f1f2f3;">[FileName]</span></li>
	<li>           <span style="color: #808080;">,</span><span style="color: #f1f2f3;">[Description]</span></li>
	<li style="background: #0c0c0c;">           <span style="color: #808080;">,</span><span style="color: #f1f2f3;">[Executed]</span><span style="color: #808080;">)</span></li>
	<li>     <span style="color: #93c763;">VALUES</span></li>
	<li style="background: #0c0c0c;">           <span style="color: #808080;">(</span><span style="color: #ff0000;">'demo.2.4.sql'</span></li>
	<li>           <span style="color: #808080;">,</span><span style="color: #ff0000;">'Removing Version column from Product table.'</span></li>
	<li style="background: #0c0c0c;">           <span style="color: #808080;">,</span><span style="color: #ff00ff;">GETDATE</span><span style="color: #808080;">())</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">PRINT</span><span style="color: #ff0000;">'The database update succeeded'</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">COMMIT</span><span style="color: #93c763;">TRANSACTION</span></li>
	<li><span style="color: #93c763;">END</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">ELSE</span><span style="color: #93c763;">PRINT</span><span style="color: #ff0000;">'The database update failed'</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">DROP</span><span style="color: #93c763;">TABLE</span><span style="color: #f1f2f3;"> #tmpErrors</span></li>
</ol>
</div>
</div>
</div>
<h4>Creating a Baseline</h4>
After several changes are made to a database, more and more scripts are required to be executed in order to have a clean set up. In order to avoid having too many incremental scripts, you can create a baseline as a way to shortcut a bunch of those incremental scripts. Sometimes it is a good idea to create a baseline when a production deployment is done, sometimes it is a good idea to create one when you have more scripts than you would like. In order to create a baseline, the only thing you need to do is, pick the previous baseline, run all the incremental scripts in that baseline, and then script the entire database like we did before.
<h4>Updating Your Local Database</h4>
The flow for updating an existing database would be the following:

1.- Query the DbVersion table in your database to find the current version.
2.- Query your database scripts repository looking for scripts that are newer than yours.
3.- Execute the scripts, except for the baselines (minor equals “0”).
4.- Query the DbVersion table to make sure that all the scripts ran successfully and in order.

Usually this step can be easily automated. Here’s the PowerShell script for updating your database (it’s only a little bit over 30 lines).
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cd9cbd46-c709-4dca-bfee-e06611ab8675" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #93c763;">$SqlServer</span><span style="color: #808080;">=</span><span style="color: #ff0000;">'.\sqlexpress'</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$DB</span><span style="color: #808080;">=</span><span style="color: #ff0000;">'RestBucks2'</span></li>
	<li><span style="color: #93c763;">$conn_options</span><span style="color: #808080;">=</span><span style="color: #808080;">(</span><span style="color: #f1f2f3;">"Data Source=$SqlServer; Initial Catalog=$DB;" </span><span style="color: #808080;">+</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;"> "Integrated Security=SSPI"</span><span style="color: #808080;">)</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$conn</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;"> New</span><span style="color: #808080;">-</span><span style="color: #93c763;">Object</span><span style="color: #93c763;">System</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Data</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">SqlClient</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">SqlConnection</span><span style="color: #808080;">(</span><span style="color: #93c763;">$conn_options</span><span style="color: #808080;">)</span></li>
	<li><span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #93c763;">Open</span><span style="color: #808080;">()</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$cmd</span><span style="color: #808080;">=</span><span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">CreateCommand</span><span style="color: #808080;">()</span></li>
	<li><span style="color: #93c763;">$cmd</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">CommandText </span><span style="color: #808080;">=</span><span style="color: #ff0000;">'Select top 1 FileName from dbVersion order by FileName desc'</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$reader</span><span style="color: #808080;">=</span><span style="color: #93c763;">$cmd</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">ExecuteReader</span><span style="color: #808080;">()</span></li>
	<li><span style="color: #93c763;">if </span><span style="color: #808080;">(</span><span style="color: #93c763;">$reader</span><span style="color: #808080;">.</span><span style="color: #93c763;">Read</span><span style="color: #808080;">())</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">{</span></li>
	<li>    <span style="color: #93c763;">$columns</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;"> New</span><span style="color: #808080;">-</span><span style="color: #93c763;">Object</span><span style="color: #93c763;">object</span><span style="color: #f1f2f3;">[] </span><span style="color: #ffcd22;">1</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$reader</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">GetValues</span><span style="color: #808080;">(</span><span style="color: #93c763;">$columns</span><span style="color: #808080;">)</span><span style="color: #808080;">&gt;</span><span style="color: #93c763;">$null</span></li>
	<li>    <span style="color: #93c763;">$current</span><span style="color: #808080;">=</span><span style="color: #93c763;">$columns</span><span style="color: #f1f2f3;">[0]</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #93c763;">close</span><span style="color: #808080;">()</span></li>
	<li><span style="color: #f1f2f3;">}</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">else</span></li>
	<li><span style="color: #f1f2f3;">{</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$current</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;"> ""</span></li>
	<li><span style="color: #f1f2f3;">}</span></li>
	<li style="background: #0c0c0c;"></li>
	<li><span style="color: #93c763;">$files</span><span style="color: #808080;">=</span><span style="color: #93c763;">get</span><span style="color: #808080;">-</span><span style="color: #f1f2f3;">childitem </span><span style="color: #808080;">|</span><span style="color: #93c763;">Where</span><span style="color: #f1f2f3;"> {</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Name </span><span style="color: #808080;">-like</span><span style="color: #f1f2f3;"> "$DB.*.*.sql"}</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$tokens</span><span style="color: #808080;">=</span><span style="color: #93c763;">$files</span><span style="color: #808080;">|</span><span style="color: #93c763;">Select</span><span style="color: #808080;">-</span><span style="color: #93c763;">Object</span><span style="color: #f1f2f3;"> @{</span><span style="color: #f1f2f3;">Name</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;">"FileName"</span><span style="color: #808080;">;</span><span style="color: #f1f2f3;">Expression</span><span style="color: #808080;">={</span><span style="color: #93c763;">$_}}</span><span style="color: #808080;">,</span><span style="color: #f1f2f3;"> @{</span><span style="color: #f1f2f3;">Name</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;">"Tokens"</span><span style="color: #808080;">;</span><span style="color: #f1f2f3;">Expression</span><span style="color: #808080;">={</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Name</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Split</span><span style="color: #808080;">(</span><span style="color: #ff0000;">'.'</span><span style="color: #808080;">)}}</span></li>
	<li><span style="color: #93c763;">$scripts</span><span style="color: #808080;">=</span><span style="color: #93c763;">$tokens</span><span style="color: #808080;">|</span><span style="color: #93c763;">Select</span><span style="color: #808080;">-</span><span style="color: #93c763;">Object</span><span style="color: #f1f2f3;"> @{</span><span style="color: #f1f2f3;">Name</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;">"FileName"</span><span style="color: #808080;">;</span><span style="color: #f1f2f3;">Expression</span><span style="color: #808080;">={</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #93c763;">FileName</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Name}}</span><span style="color: #808080;">,</span><span style="color: #f1f2f3;"> @{</span><span style="color: #f1f2f3;">Name</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;">"IsBaseline"</span><span style="color: #808080;">;</span><span style="color: #f1f2f3;">Expression</span><span style="color: #808080;">={</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Tokens[2] </span><span style="color: #808080;">-</span><span style="color: #f1f2f3;">eq </span><span style="color: #ffcd22;">0}}</span></li>
	<li style="background: #0c0c0c;"><span style="color: #93c763;">$updates</span><span style="color: #808080;">=</span><span style="color: #93c763;">$scripts</span><span style="color: #808080;">|</span><span style="color: #93c763;">where</span><span style="color: #f1f2f3;"> {</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">IsBaseline </span><span style="color: #808080;">-</span><span style="color: #f1f2f3;">eq </span><span style="color: #93c763;">$false</span><span style="color: #808080;">-and</span><span style="color: #93c763;">$_</span><span style="color: #808080;">.</span><span style="color: #93c763;">FileName</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">CompareTo</span><span style="color: #808080;">(</span><span style="color: #93c763;">$current</span><span style="color: #808080;">)</span><span style="color: #808080;">-</span><span style="color: #f1f2f3;">gt </span><span style="color: #ffcd22;">0}</span></li>
	<li></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">foreach</span><span style="color: #808080;">(</span><span style="color: #93c763;">$script</span><span style="color: #808080;">in</span><span style="color: #93c763;">$updates</span><span style="color: #808080;">)</span></li>
	<li><span style="color: #f1f2f3;">{</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$conn</span><span style="color: #808080;">=</span><span style="color: #f1f2f3;"> New</span><span style="color: #808080;">-</span><span style="color: #93c763;">Object</span><span style="color: #93c763;">System</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">Data</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">SqlClient</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">SqlConnection</span><span style="color: #808080;">(</span><span style="color: #93c763;">$conn_options</span><span style="color: #808080;">)</span></li>
	<li>    <span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #93c763;">Open</span><span style="color: #808080;">()</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$cmd</span><span style="color: #808080;">=</span><span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">CreateCommand</span><span style="color: #808080;">()</span></li>
	<li>    <span style="color: #93c763;">$cmd</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">CommandText </span><span style="color: #808080;">=</span><span style="color: #93c763;">get</span><span style="color: #808080;">-</span><span style="color: #f1f2f3;">content </span><span style="color: #93c763;">$script</span><span style="color: #808080;">.</span><span style="color: #93c763;">FileName</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">$cmd</span><span style="color: #808080;">.</span><span style="color: #f1f2f3;">ExecuteNonQuery</span><span style="color: #808080;">()</span></li>
	<li>    <span style="color: #93c763;">$conn</span><span style="color: #808080;">.</span><span style="color: #93c763;">close</span><span style="color: #808080;">()</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">}</span></li>
</ol>
</div>
</div>
</div>
<h4>Modifying an update</h4>
If you made a mistake in a script, and you need to correct it, don’t! Always try to create a new version rather than altering an update that’s already in the svn, because those changes are hard to push to the rest of your team. However, if you made a mistake that may result in the loss of data, then fix it, commit it to SVN, and let everyone know! :)
<h4>Stored Procedures</h4>
Stored procedures and view in SQL Server are a little special. Suppose that you change a table, in order to remove a column that a Stored Procedure or a view is using. At that point, SQL Server will perform the update and break the SP or the view silently. So as part of the update process of a database, it’s not a bad a idea to drop all the stored procedures and all the views, and recreate them. For doing that you have to keep the SPs and Views in different scripts, probably in a different folders and one file per SP or View.

So sacrifice a little bit of development time, to make your life much easier multiple times when migrating databases in every environment, including the most critical one: PRODUCTION!
<h3>Pros</h3>
<ul>
	<li>It’s blazing fast.</li>
	<li>You never lose your data as part of a change in any of your environments. So no need for updating testing scripts, etc.</li>
	<li>Deployments are dead simple. By the time you get to the production deployment, the scripts were already executed in every developer’s machine, dev, qa, staging environments, etc.</li>
	<li>Easy to automate deployments.</li>
	<li>No need for complex heavy tools like Visual Studio Database Projects.</li>
	<li>The updates history resides in the database itself (see DbVersion table).</li>
</ul>
<h3>Cons</h3>
<ul>
	<li>May require SQL knowledge to craft migration scripts.</li>
	<li>It’s hard to test the incremental scripts.</li>
	<li>Takes up a little bit more of developer’s time in some cases.</li>
</ul>
So even though I am sure this method of versioning the database may not work on every project, I consider it a perfectly valid way to keep your database under version control.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date>2011-10-21 01:20:31</wp:post_date>
		<wp:post_date_gmt>2011-10-21 01:20:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>database-version-control-incremental-scripts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="configuration-management"><![CDATA[Configuration Management]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="powershell"><![CDATA[powershell]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[sql server]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[SVN]]></category>
		<category domain="post_tag" nicename="version-control"><![CDATA[version control]]></category>
		<category domain="post_tag" nicename="versioning"><![CDATA[versioning]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ntiK0sGlDWbK]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496633141]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[Travel Tours]]></wp:comment_author>
			<wp:comment_author_email>lack22228@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.businesstraveltours.com</wp:comment_author_url>
			<wp:comment_author_IP>216.24.193.85</wp:comment_author_IP>
			<wp:comment_date>2011-11-07 15:39:21</wp:comment_date>
			<wp:comment_date_gmt>2011-11-07 15:39:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice article and straight to the point. I am not sure if this is actually the best place to ask but do you people have any thoughts on where to hire some professional writers? Thx :)   
My site is <a href="http://www.businesstraveltours.com" rel="nofollow">Travel Guide</a>.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Remote Control]]></wp:comment_author>
			<wp:comment_author_email>usaarron@gmx.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.rc-helicopters.org/</wp:comment_author_url>
			<wp:comment_author_IP>109.230.216.20</wp:comment_author_IP>
			<wp:comment_date>2011-11-08 10:57:35</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 10:57:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great! Thanks for the share!  
Arron]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[John1115]]></wp:comment_author>
			<wp:comment_author_email>johnb252@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://opeyixa.com/rvqvrx/5.html</wp:comment_author_url>
			<wp:comment_author_IP>96.31.86.184</wp:comment_author_IP>
			<wp:comment_date>2011-11-15 04:00:48</wp:comment_date>
			<wp:comment_date_gmt>2011-11-15 04:00:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice site! <a href="http://opeyixa.com/rvqvrx/1.html" rel="nofollow">is it yours too</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[Ping Zeyer]]></wp:comment_author>
			<wp:comment_author_email>Rancifer959@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.divoogle.com/</wp:comment_author_url>
			<wp:comment_author_IP>31.184.238.105</wp:comment_author_IP>
			<wp:comment_date>2011-11-21 21:45:26</wp:comment_date>
			<wp:comment_date_gmt>2011-11-21 21:45:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for your review! I really enjoyed seen this.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[John1142]]></wp:comment_author>
			<wp:comment_author_email>johnb663@aol.com</wp:comment_author_email>
			<wp:comment_author_url>http://oixypea.com/oxoaror/5.html</wp:comment_author_url>
			<wp:comment_author_IP>96.31.86.184</wp:comment_author_IP>
			<wp:comment_date>2011-12-05 07:27:39</wp:comment_date>
			<wp:comment_date_gmt>2011-12-05 07:27:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very nice site! <a href="http://oixypea.com/oxoaror/1.html" rel="nofollow">is it yours too</a>]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Why Knockout.js is awesome</title>
		<link>http://machadogj.com/2011/10/why-knockout-js-is-awesome/</link>
		<pubDate>Sat, 22 Oct 2011 22:55:05 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=499</guid>
		<description></description>
		<content:encoded><![CDATA[Some very good javascript and web developers that I know, don’t buy the whole MVVM with knockout.js idea. The only valid complains I have heard so far are: people not liking MVVM on one side, and that data bindings in the markup are “obtrusive” on the other. As for the first, there’s not a lot we can do, all I know is that people that have worked with MVVM usually likes it very much (obviously any pattern has it’s drawbacks). The second one though, while I do not agree at all, I can see where that is coming from.
<h2>Bad reputation</h2>
Of course you are not going to like something that couples your views to your logic. Something that has logic in your views. So I can see why people looking at samples like this…
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2dac52de-e57a-4e36-8967-748e288612db" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">button</span><span style="background: #293134; color: #e0e2e4;">data-bind=</span><span style="color: #ec7600;">"click: function() { numberOfClicks(0) }"</span><span style="color: #f1f2f3;">&gt;Reset clicks&lt;/</span><span style="color: #93c763;">button</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
…think that knockout is “obtrusive”. This has been taken from the second live sample of the knockout site here. People see this, and get’s literally scared, and run away without giving knockout a chance. I think that the author tried to illustrate that if you NEED to, you could define bindings like in this way, but I wouldn’t consider this a best practice at all. Here is how easily you can modify this sample to remove the function from the binding:

<iframe style="width: 100%; height: 300px;" src="http://jsfiddle.net/machadogj/8EUvU/2/embedded/" width="320" height="240"></iframe>
<h3>First</h3>
I haven’t come across a case where I would NEED to do something like this, without any other alternatives. I usually create my view models in a way in which by binding to a particular DOM will not require this functions declared inside of the data-bind attribute.
<h3>Second</h3>
People who find knockout “obtrusive”, usually think that using jquery templates is a more acceptable approach. However just as easily as you can put functions in the data-bind attribute with knockout, you can also put logic into jquery templates. It’s actually not uncommon at all to see this type of templates:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e5c74cdf-f02f-48c5-8f6a-003cea19fc05" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">script</span><span style="background: #293134; color: #e0e2e4;">id=</span><span style="color: #ec7600;">"movieTemplate"</span><span style="background: #293134; color: #e0e2e4;">type=</span><span style="color: #ec7600;">"text/x-jquery-tmpl"</span><span style="color: #f1f2f3;">&gt;</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">&lt;li&gt;        </span></li>
	<li>    <span style="color: #f1f2f3;">Title: ${Name}.        </span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">{{if Languages.length}}         </span></li>
	<li>    <span style="color: #f1f2f3;">(Alternative languages: ${$item.getLanguages(" - ")}).        </span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">{{/if}}</span></li>
	<li><span style="color: #f1f2f3;">&lt;/li&gt;</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">&lt;/</span><span style="color: #93c763;">script</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
(This is actually taken from the jquery templates documentation <a href="http://api.jquery.com/template-tag-if/" target="_blank">here</a>.)
<h3>Third</h3>
While I don’t necessarily recommend it, you should know that there are ways to define the bindings outsite of the markup; like using jquery with selectors to set the data-bind attribute manually before calling the applyBindings. As a more “advanced” alternative to this, knockout 1.3 beta comes with a conventions prototype to apply bindings based on css selectors. Here is an working sample taken from Steve Sanderson blog (notice the lack of “data-bind” attributes in the markup):

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/StevenSanderson/n7h2A/1/embedded/"></iframe>
<h2></h2>
<h2>A very common misconception…</h2>
Knockout is usually compared to other frameworks like backbone.js. While both of them are totally cool, they do things that are very different. Knockout is an MVVM framework. MVVM framework stands for Model-View-ViewModel. The cool part is the ViewModel part; which means that you get to model how the view reacts to different states programmatically, without actually holding a reference to the view itself. If you have a rule that says “when there’s no text in the name field, disable button X” you have several different ways to solve this. Here is a more traditional approach:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:58af1e01-276e-4c21-bea8-53ff7a8153aa" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">$(</span><span style="color: #ec7600;">"#name"</span><span style="color: #f1f2f3;">).keyup(</span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;">(e) {</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> name = $(</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">).val();</span></li>
	<li>    <span style="color: #93c763;">if</span><span style="color: #f1f2f3;"> (name.length === </span><span style="color: #ffcd22;">0</span><span style="color: #f1f2f3;">) {</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #f1f2f3;">$(</span><span style="color: #ec7600;">"#buttonX"</span><span style="color: #f1f2f3;">).attr(</span><span style="color: #ec7600;">"disabled"</span><span style="color: #f1f2f3;">, </span><span style="color: #93c763;">true</span><span style="color: #f1f2f3;">);</span></li>
	<li>    <span style="color: #f1f2f3;">}</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">else</span><span style="color: #f1f2f3;"> {</span></li>
	<li>        <span style="color: #f1f2f3;">$(</span><span style="color: #ec7600;">"#buttonX"</span><span style="color: #f1f2f3;">).attr(</span><span style="color: #ec7600;">"disabled"</span><span style="color: #f1f2f3;">, </span><span style="color: #93c763;">false</span><span style="color: #f1f2f3;">);</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">}</span></li>
	<li><span style="color: #f1f2f3;">});</span></li>
</ol>
</div>
</div>
</div>
This is far from ideal, apart from the fact that if your DOM changes you are screwed, this is very hard to test thanks to all the DOM you have to create and validate against.

Let’s now explore at how we would do this in Knockout

<iframe style="width: 100%; height: 200px" src="http://jsfiddle.net/V3yuw/embedded/"></iframe>

This is not only easy to test, but also the logic attached to it doesn’t depend on ids or css classes, you can literally change the input for a textarea, or add an id to it and everything will continue to work as long as you don’t mess with the data-bind.
<h2>Conclusion</h2>
While I think knockout is not the only alternative out there for doing highly dynamic interfaces, I consider knockout to be an excellent alternative which does an awesome job at decoupling the html from the javascript. Having said that, I also think that another big advantage of using knockout is that you can test your view models very easily.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date>2011-10-22 22:55:05</wp:post_date>
		<wp:post_date_gmt>2011-10-22 22:55:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-knockout-js-is-awesome</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="knockout"><![CDATA[knockout]]></category>
		<category domain="post_tag" nicename="mvvm"><![CDATA[mvvm]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="category" nicename="web-2"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[S8txlOhgoMt9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[496679728]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>251</wp:comment_id>
			<wp:comment_author><![CDATA[José Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jfromaniello.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-12-07 18:56:00</wp:comment_date>
			<wp:comment_date_gmt>2011-12-07 18:56:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[great post!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[381398233]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>252</wp:comment_id>
			<wp:comment_author><![CDATA[machadogj]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2011-12-07 19:27:41</wp:comment_date>
			<wp:comment_date_gmt>2011-12-07 19:27:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks man!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>251</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Unit Testing with Knockout.js</title>
		<link>http://machadogj.com/2011/10/unit-testing-wit-knockout-js-with-tdd/</link>
		<pubDate>Mon, 24 Oct 2011 03:04:59 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=510</guid>
		<description></description>
		<content:encoded><![CDATA[Knockout is an MVVM framework for JavaScript. When using an MVVM framework, you have to deal with your model, the views and the “view model”. A view model is a class/object that handles the logic of the view. So if something has to be visible given a certain condition, that’s handled by the view model. Knockout handles the binding of the view model to an HTML view.

Note: I am not going to get into the whole obtrusive/unobtrusive discussion, but I have to say that I didn’t quite like what I’ve seen in some of the samples around. So I decided to put up a knockout sample with what I think to be a better approach (a TDD, logic-free-binding approach).
<h3>Localtodo</h3>
For the sake of learning knockout using TDD and at the same time building something to compare with backbone.js (and also because it’s cool), I asked <a href="http://jgn.me/">Jérôme Gravel-Niquet</a> permission to take his <a href="http://localtodos.com/">localtodos</a> sample built in backbone.js, and port it to see how it would look in knockout. Here’s how the sample looks:

<a href="http://machadogj.com/wp-content/uploads/2011/10/image2.png"><img style="display: inline; border-width: 0px;" title="image" src="http://machadogj.com/wp-content/uploads/2011/10/image_thumb2.png" alt="image" width="487" height="484" border="0" /></a>

Live demo: <a href="http://localtodos.herokuapp.com">http://localtodos.herokuapp.com</a>
Live Test: <a href="http://localtodos.herokuapp.com/tests.html">http://localtodos.herokuapp.com/tests.html</a>
Source code: <a title="https://github.com/machadogj/localtodos-ko" href="https://github.com/machadogj/localtodos-ko">https://github.com/machadogj/localtodos-ko</a>
<h3>Testing with Knockout</h3>
One of the huge advantages of using an MVVM pattern, is that you can test the logic of how a view/form is supposed to behave, without actually going through all the trouble of actually testing the view itself. In my opinion, if you are not going to do unit testing on the view model, you are not going to get the most out of knockout.

Contrary to what I thought, unit testing JavaScript is dead simple; I used <a href="http://docs.jquery.com/Qunit" target="_blank">qunit</a> and it just simply works. Here is an example of a test that asserts that new tasks are not completed:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:436b136f-99e4-435f-802f-b46d884423e5" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #808080; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">test(</span><span style="color: #ec7600;">"when creating a task, it is not completed."</span><span style="color: #f1f2f3;">, </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #747474;">    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> t = </span><span style="color: #93c763;">new</span><span style="color: #f1f2f3;"> knocklist.Task();</span></li>
	<li>    <span style="color: #66747b;">//assert</span></li>
	<li style="background: #747474;">    <span style="color: #f1f2f3;">ok(!t.completed());</span></li>
	<li><span style="color: #f1f2f3;">});</span></li>
</ol>
</div>
</div>
</div>
One of the reasons why these tests are so easy, is that when working with Knockout you don’t have to handle HTML.

When you run the tests (browsing the tests.html file) you’ll see something like this:

<a href="http://machadogj.com/wp-content/uploads/2011/10/image3.png"><img style="display: inline; border-width: 0px;" title="image" src="http://machadogj.com/wp-content/uploads/2011/10/image_thumb3.png" alt="image" width="644" height="337" border="0" /></a>
<h3>Classes</h3>
I liked how it felt to do my view model with “classes”. I thought of the different parts of the screen as different classes, and then had them combined in a bigger view model. This way the code under test is a much smaller. Here is a class for the portion of the view that is a form for adding tasks:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9304a95f-1805-43d7-90fc-9d8c547c27d7" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 500px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> NewTaskModel = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> (backlog) {</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.backlog = backlog;</span></li>
	<li>    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name = ko.observable();</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.toTask = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li>        <span style="color: #93c763;">return</span><span style="color: #93c763;">new</span><span style="color: #f1f2f3;"> todos.Task(</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name(), </span><span style="color: #93c763;">false</span><span style="color: #f1f2f3;">, </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.backlog);</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">};</span></li>
	<li>    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.clear = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name(</span><span style="color: #ec7600;">""</span><span style="color: #f1f2f3;">);</span></li>
	<li>    <span style="color: #f1f2f3;">}</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.save = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li>        <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> task = </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.toTask();</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.clear();</span></li>
	<li>        <span style="color: #93c763;">return</span><span style="color: #f1f2f3;"> task;</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">};</span></li>
	<li></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.hasName = ko.dependentObservable(</span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li>        <span style="color: #93c763;">return</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name() &amp;&amp; </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name().length &gt; </span><span style="color: #ffcd22;">0</span><span style="color: #f1f2f3;">;</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">}, </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">);</span></li>
	<li><span style="color: #f1f2f3;">};</span></li>
</ol>
</div>
</div>
</div>
I liked how it felt to use “this” to reference the objects properties. There’s one catch though. When using dependentObservables, you have to pass the context as the second parameter for “this” to make sense. Something like:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1c930050-e206-4476-9ef9-4521c0e73454" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.hasName = ko.dependentObservable(</span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">return</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name() &amp;&amp; </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name().length &gt; </span><span style="color: #ffcd22;">0</span><span style="color: #f1f2f3;">;</span></li>
	<li><span style="color: #f1f2f3;">}, </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">);</span></li>
</ol>
</div>
</div>
</div>
<h4>Data-bindings</h4>
Avoid adding logic to your data-bindings. This is the one thing that people that usually don’t like knockout will argue, and it’s wrong anyway. Putting logic into your data bindings maybe a quick dirty trick to get going fast, but it’s not a good practice. And what’s even worse, it’s not (easily) testable. To show a quick sample of what not to do:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0980fd75-750a-428f-a196-6a8f0a593f76" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">button</span><span style="background: #293134; color: #e0e2e4;">data-bind=</span><span style="color: #ec7600;">"click: registerClick, enable: !hasClickedTooManyTimes()"</span><span style="color: #f1f2f3;">&gt;Click me&lt;/</span><span style="color: #93c763;">button</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
Wouldn’t “canClick” be better for a UI binding than “!hasClickedTooManyTimes()” ?

Avoid doing bindings that reference a method on a property, for example:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a2f3f41e-0c61-4a65-b342-581ebd7881ec" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">button</span><span style="background: #293134; color: #e0e2e4;">data-bind=</span><span style="color: #ec7600;">"click: loginForm.signIn"</span><span style="color: #f1f2f3;">&gt;Sign in&lt;/</span><span style="color: #93c763;">button</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
Knockout will pass the attached View Model as the context to that method. Basically it means that the meaning of “this” inside of “signIn” method will not be “loginForm” but the object that has the loginForm property. This will usually not make your unit tests to fail, so don’t do that; but when you move to the HTML you will notice that it’s not working properly.

I found the “with” data bind in the knockout 1.3 beta to be extremely useful for avoiding the previous problem.
<h4>Multiple View Models per Page</h4>
When working on knockout, many people is used to create one View Model per page. In my opinion this is fine if the page is very simple, however if the page is a little bit complicated, or has multiple different forms in it, I think it’s very advisable to split that big view model into multiple different view models. Knockout has different ways in which you can do this. The most simple case would be to attach one of the smaller view models to a specific HTML dom element. You can do this with the applyBinding method:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:57f47ece-0fbc-41aa-aa80-8bee20584b32" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 300px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">script</span><span style="background: #293134; color: #e0e2e4;">type=</span><span style="color: #ec7600;">"text/javascript"</span><span style="color: #f1f2f3;">&gt;</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> currentBacklog = </span><span style="color: #93c763;">new</span><span style="color: #f1f2f3;"> Backlog();</span></li>
	<li>    <span style="color: #f1f2f3;">ko.applyBindings(currentBacklog.newTask, document.getElementById(</span><span style="color: #ec7600;">"newCurrentTask"</span><span style="color: #f1f2f3;">));</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">&lt;/</span><span style="color: #93c763;">script</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
When doing this, you can test the “newTask” class without having to worry about Backlog or the rest of the classes.
<h4>Pub/Sub Pattern</h4>
Multiple views in one page looks good, but there’s one catch though, what if you need to reference a list of tasks in Backlog class, from within the NewTask class? Pay attention to the “save” function:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:587e8b00-5865-4dd9-b94a-19d703e2a58a" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 400px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">script</span><span style="background: #293134; color: #e0e2e4;">type=</span><span style="color: #ec7600;">"text/javascript"</span><span style="color: #f1f2f3;">&gt;</span></li>
	<li style="background: #0c0c0c;"></li>
	<li>    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> Backlog = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.newTask = </span><span style="color: #93c763;">new</span><span style="color: #f1f2f3;"> NewTask(</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">);</span></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.tasks = [];</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #f1f2f3;">};</span></li>
	<li>    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> NewTask = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> (backlog) {</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.backlog = backlog;</span></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name = ko.observable();</span></li>
	<li style="background: #0c0c0c;"></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.save = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #0c0c0c;">            <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.backlog.tasks.push(</span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name());</span></li>
	<li>            <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name(</span><span style="color: #ec7600;">''</span><span style="color: #f1f2f3;">);</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #f1f2f3;">};</span></li>
	<li>    <span style="color: #f1f2f3;">};</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">&lt;/</span><span style="color: #93c763;">script</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
While this is possible, and 100% testable, it is making your NewTask and Backlog quite coupled. For simple straight forward scenarios this might be ok, but when making a more complex or composite apps, this can get pretty complex and fragile pretty fast.

One thing that I found extremely useful for tackling this problem is the pub/sub pattern. Where basically you expose events, you subscribe to these events, and then you publish events. So suppose that the NewTask class instead of accesing directly the backlog, it exposes an event called “taskAdded”; so that everytime that the save function is invoked, a “taskAdded” event is published with the name as the data. At that point, Backlog class could subscribe to this event, and be the one in charge of adding the task to the list. There are many implementations of pub/sub in javascript, you can use whichever you want.

Notice how by using an event aggregator for pub/sub NewTask does not depend on Backlog anymore:
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a1b32462-ff24-40ab-b720-921ecae7d6dd" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #fff; max-height: 400px; overflow: auto;">
<ol style="background: #000000; margin: 0; padding: 0 0 0 5px;">
	<li><span style="color: #f1f2f3;">&lt;</span><span style="color: #93c763;">script</span><span style="background: #293134; color: #e0e2e4;">type=</span><span style="color: #ec7600;">"text/javascript"</span><span style="color: #f1f2f3;">&gt;</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> Backlog = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.newTask = </span><span style="color: #93c763;">new</span><span style="color: #f1f2f3;"> NewTask();</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.tasks = [];</span></li>
	<li>        <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> that = </span><span style="color: #93c763;">this</span><span style="color: #f1f2f3;">;</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #f1f2f3;">eventAggregator.Subscribe(</span><span style="color: #ec7600;">"taskAdded"</span><span style="color: #f1f2f3;">, </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> (name) {</span></li>
	<li>            <span style="color: #f1f2f3;">that.tasks.push(name);</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #f1f2f3;">});</span></li>
	<li>    <span style="color: #f1f2f3;">};</span></li>
	<li style="background: #0c0c0c;">    <span style="color: #93c763;">var</span><span style="color: #f1f2f3;"> NewTask = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name = ko.observable();</span></li>
	<li style="background: #0c0c0c;"></li>
	<li>        <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.save = </span><span style="color: #93c763;">function</span><span style="color: #f1f2f3;"> () {</span></li>
	<li style="background: #0c0c0c;">            <span style="color: #f1f2f3;">eventAggregator.Publish(</span><span style="color: #ec7600;">"taskAdded"</span><span style="color: #f1f2f3;">, name);</span></li>
	<li>            <span style="color: #93c763;">this</span><span style="color: #f1f2f3;">.name(</span><span style="color: #ec7600;">''</span><span style="color: #f1f2f3;">);</span></li>
	<li style="background: #0c0c0c;">        <span style="color: #f1f2f3;">};</span></li>
	<li>    <span style="color: #f1f2f3;">};</span></li>
	<li style="background: #0c0c0c;"><span style="color: #f1f2f3;">&lt;/</span><span style="color: #93c763;">script</span><span style="color: #f1f2f3;">&gt;</span></li>
</ol>
</div>
</div>
</div>
&nbsp;
<h4>Tests</h4>
Naming my tests properly has helped me a great deal when refactoring and/or porting code from one project to another. I found out that it’s better to name your tests in a way in which specifies the behavior of the view and not the implementation of your view model. Here’s what I think to be a very useful test for me:
<blockquote><strong>backlog: when cleaning a completed task, backlog's uncompleted task is not deleted.</strong></blockquote>
This other test on the other hand is not so useful:
<blockquote><strong>newTaskModel: clear sets the name to empty string.</strong></blockquote>
If you go to the UI you will see that there’s no “Clear” button for creating tasks. This was meant to test a method that is used when creating tasks. Even though these tests can be very helpful for us to exercise our code, when it comes to reading the specifications it can be confusing. So as I was writing this blog, I realized that I would rather have a test that says:
<blockquote><strong>newTaskModel: after a task is saved, the name field should be cleared.</strong></blockquote>
<h3></h3>
<h3>Conclusion</h3>
I consider Unit Testing to be a good practice regardless of the language. When writing Unit Tests you have to do code that’s well decoupled and well interfaced for your tests to be easy. When developing your applications with Unit Tests in mind, It’s important to pick the right patterns. The MVVM pattern turns out to be an excellent pattern for decoupling your view logic from the view representation; thus taking the unit tests as close of the UI as possible without testing the UI directly. In my opinion Knockout is a pretty cool MVVM implementation, so it’s a perfect fit for unit testing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2011-10-24 03:04:59</wp:post_date>
		<wp:post_date_gmt>2011-10-24 03:04:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-wit-knockout-js-with-tdd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="knockout"><![CDATA[knockout]]></category>
		<category domain="post_tag" nicename="qunit"><![CDATA[qunit]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[tdd]]></category>
		<category domain="post_tag" nicename="unit-test"><![CDATA[unit test]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[g86LlrVjkmbn]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[526182663]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>254</wp:comment_id>
			<wp:comment_author><![CDATA[Mauricio G.]]></wp:comment_author>
			<wp:comment_author_email>gentilemauricio@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.28.14.203</wp:comment_author_IP>
			<wp:comment_date>2012-04-25 15:05:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-25 15:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Muy groso!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[508801564]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[Johnmusac]]></wp:comment_author>
			<wp:comment_author_email>johnmusac@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>181.28.14.203</wp:comment_author_IP>
			<wp:comment_date>2012-04-25 15:12:00</wp:comment_date>
			<wp:comment_date_gmt>2012-04-25 15:12:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is an excelent excuse to start using knockout :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[508807702]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>256</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>machadogj@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>190.17.198.199</wp:comment_author_IP>
			<wp:comment_date>2012-05-02 15:46:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-02 15:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Absolutely!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>255</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[508807702]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[516765551]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Unit Testing and Test Driven Development (Lessons Learned)</title>
		<link>http://machadogj.com/2012/01/unit-testing-and-test-driven-development-lessons-learned/</link>
		<pubDate>Fri, 13 Jan 2012 22:44:41 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=519</guid>
		<description></description>
		<content:encoded><![CDATA[I started a discussions with my colleagues at <a href="http://www.tellago.com" target="_blank">Tellago</a> about Unit Testing and Test Driven Development, and a lot of interesting things came out of that discussion. Here are my thoughts.
<h2>Unit Testing</h2>
Unit testing is an automated way of testing a piece of the system in isolation (unit). This practice seems to be useful in the following scenarios:
<ul>
	<li>When doing TDD/Test first (more on this later)</li>
	<li>After a feature is complete for automatic testing of the integration of different components.</li>
	<li>When documenting how to consume an API.</li>
	<li>When fixing a bug, to prove that a bug exists, use the test to fix it, and prevent the bug from emerging again.</li>
	<li>After coding, to avoid manual testing (something along the lines of integration testing).</li>
	<li>Exploring the behavior of somebody else’s API.</li>
</ul>
Regardless of the use we give to unit testing, seems like it’s not an optional practice anymore. It’s a must-have skill that every developer should work on mastering. Here are some of the advantages:
<ul>
	<li>You get written specifications of how the software should behave.</li>
	<li>You get client code of the API under test.</li>
	<li>You get instant feedback of the impact of refactorings/changes.</li>
	<li>Saves a lot of time! For every time you run 1 unit test, you are saving probably 1 or more minutes of manual testing.</li>
	<li>Gives you confidence for committing code.</li>
	<li>Gives you confidence for touching code written by somebody else.</li>
	<li>Gives you confidence for more aggressive refactorings.</li>
</ul>
There is (I believe) a downside of inefficient unit testing, and it’s that when testing the wrong things, you might end up with fragile tests, that make maintenance even harder (and more painful).
<h2>TDD/Test First</h2>
Some of us try to practice TDD or Test First as much as possible, and we strongly believe that it makes us write better and faster code by getting very early feedback of what we are doing. Here’s how ideally we would practice TDD:
<ol>
	<li>Define test</li>
	<li>Write test</li>
	<li>Verify the test fails.</li>
	<li>Write minimum code to make the test pass (with a minimum share of common sense).</li>
	<li>Refactor code to make it cleaner/better.</li>
</ol>
The benefits of doing test first are many, here are a few:
<ul>
	<li>Early feedback of your code’s design. You see how your API will be consumed even before you actually coded it.</li>
	<li>In order to make your test simple, the code under test should have few (or en better one!) responsibilities. This helps design your classes following the single responsibility principle.</li>
	<li>Confines your brain to the smallest possible piece of your entire solution. You concentrate on doing a small part at a time, but doing it right! The good ol’ “Divide &amp; Conquer” they taught us in the first Algorithms class.</li>
</ul>
This doesn’t seem to be that much harder than unit testing after something is coded, it actually sounds easier… <strong>WHY ISN’T EVERYBODY DOING TEST FIRST THEN???</strong>

I remember when I first read about TDD, and it felt totally unnatural (it still does sometimes). I had been coding in the entirely opposite way for so long, that it was awkward, slow, and tests weren’t as good. So here’s the catch, unfortunately, <strong>IT TAKES TIME!</strong> Not hours, or days, it may take months to start feeling comfortable with writing tests first.

If somebody says that unit testing first makes them slower, to me, that sounds like they haven’t tried it enough, and they are not used to doing it. I have not known a person that has done hardcore TDD for a long time, and then came back to Non-TDD coding because they were not fast enough.

PS: Thanks for the guys at <a href="http://www.tellago.com" target="_blank">Tellago</a> for the great discussion!!!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2012-01-13 22:44:41</wp:post_date>
		<wp:post_date_gmt>2012-01-13 22:44:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-and-test-driven-development-lessons-learned</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[tdd]]></category>
		<category domain="post_tag" nicename="test-first"><![CDATA[test first]]></category>
		<category domain="post_tag" nicename="unti-testing"><![CDATA[unti testing]]></category>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[Q0OllZaOmf5I]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[538056911]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>253</wp:comment_id>
			<wp:comment_author><![CDATA[José Romaniello]]></wp:comment_author>
			<wp:comment_author_email>jfromaniello@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jfromaniello.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>190.19.146.166</wp:comment_author_IP>
			<wp:comment_date>2012-01-14 02:59:00</wp:comment_date>
			<wp:comment_date_gmt>2012-01-14 02:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well done mate! I agree with everything you said,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[410322190]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[Mk]]></wp:comment_author>
			<wp:comment_author_email>m@m.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>202.147.46.147</wp:comment_author_IP>
			<wp:comment_date>2012-05-22 23:39:00</wp:comment_date>
			<wp:comment_date_gmt>2012-05-22 23:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Problem with TDD I find is architecturally/design wise the code ends up rubbish over time because no one has thought of the bigger picture of what the app is meant to do as a whole and where it is going. Code wise/algorithm wise it passes great. Its when the app feels growing pains and doesn't cover its non-functional requirements that you get a headache.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[536147534]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Getting started with node.js</title>
		<link>http://machadogj.com/2012/05/getting-started-with-node-js/</link>
		<pubDate>Tue, 15 May 2012 22:10:55 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=529</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>What is node.js?</h1>
node.js is a development platform based on Javascript created by Ryan Dahl and currently maintained by the cloud provider <a href="http://www.joyent.com" target="_blank">Joyent</a>. The interesting thing about node.js is that it runs in a single thread, and attacks concurrency by trying to block as little as possible (if at all). In it’s most simplistic form, node.js provides a REPL interface for the command line:

<a href="http://machadogj.com/wp-content/uploads/2012/05/repl.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="repl" src="http://machadogj.com/wp-content/uploads/2012/05/repl_thumb.png" alt="repl" width="564" height="188" border="0" /></a>

node.js happens to be very good at running web servers, apart from being very simple to do so, the non-blocking philosophy makes it a very good allied of concurrency, since it’s not limited to the amount of threads that your process can run. Here’s how a hello world web server looks like:
<div class="csharpcode">
<pre><span class="lnum"> 1: </span><span class="kwrd">var</span> http = require(<span class="str">'http'</span>);</pre>
<pre><span class="lnum"> 2: </span></pre>
<pre><span class="lnum"> 3: </span>http.createServer(<span class="kwrd">function</span> (request, response) {</pre>
<pre><span class="lnum"> 4: </span>    response.writeHead(200, { <span class="str">'Content-Type'</span>: <span class="str">'text/plain'</span> });</pre>
<pre><span class="lnum"> 5: </span>    response.end(<span class="str">'Hello World\n'</span>);</pre>
<pre><span class="lnum"> 6: </span>}).listen(8000);</pre>
<pre><span class="lnum"> 7: </span></pre>
<pre><span class="lnum"> 8: </span>console.log(<span class="str">'Server running at http://127.0.0.1:8000/'</span>);</pre>
</div>
And you could could run this very easily if you save it to a file like this:
<pre class="csharpcode">node index.js</pre>
Another very interesting thing about writing web applications in node, is that you keep the client side and server side languages consistent. If you add a json-document based NoSQL database like mongo to the mix, you have yourself a complete javascript/json environment for developing websites.
<h2>Getting started in windows</h2>
If you want to get started with windows, you can download the installer from the node.js website. At the moment of writing this post, the version 0.6.18 was only 3MB. After you install, you will find the nodejs installation under you ‘program files(86)’ folder. You can open your cmd or powershell command line, and you will already have the node and npm command at your disposal.

There are a number of cloud services that will host your node.js applications out there like:
<ul>
	<li><a href="http://www.heroku.com/">http://www.heroku.com/</a></li>
	<li><a href="https://no.de/">https://no.de/</a></li>
	<li><a href="http://nodejitsu.com/">http://nodejitsu.com/</a></li>
	<li>and obviously <a href="http://www.windowsazure.com" target="_blank">Azure</a>!</li>
</ul>
Getting up and running in Azure turns out to be pretty simple with the latest SDK they released. You can get the SDK using the <a href="http://www.microsoft.com/web/downloads/platform.aspx" target="_blank">Web Platform Installer</a> searching for node:

<a href="http://machadogj.com/wp-content/uploads/2012/05/wpi.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="wpi" src="http://machadogj.com/wp-content/uploads/2012/05/wpi_thumb.png" alt="wpi" width="367" height="157" border="0" /></a>

And you will get a set of powershell commandlets for creating node webroles, and even deploying to azure from the command line.

And last but not least, if you want to host your node.js apps in IIS, you can install <a href="https://github.com/tjanczuk/iisnode" target="_blank">IISNode for IIS</a>. From the IISNode, here are the benefits:
<ul>
	<li><strong>Process management</strong></li>
	<li><strong>Side by side with other content types</strong></li>
	<li><strong>Scalability on multi-core servers</strong></li>
	<li><strong>Integrated debugging</strong></li>
	<li><strong>Auto-update</strong></li>
	<li><strong>Access to logs over HTTP</strong></li>
	<li><strong>Minimal changes to node.js application code</strong></li>
	<li><strong>Integrated management experience</strong></li>
	<li><strong>Other IIS benefits</strong>. Port sharing, security, URL rewriting, compression, caching, logging</li>
</ul>
<h2>Getting started in linux</h2>
You can also go to the node.js website and download the installer, but there’s another cool way of getting node in your linux environment called “nvm”. Nvm is a sh script that will download, build and manage the different versions of node that you might want to use in your environment. For getting nvm, all you have to do is go to the nvm github website, and copy the script into some file in you computer (for example ~/nvm/nvm.sh), and then either execute or add this to your bash profile file: . ~/nvm/nvm.sh

Once you have nvm, you can do the following things:

Install a specific version:
nvm install v0.6.18

Start using a specific version:
nvm use v0.6.18
<h2>…and you are ready to node!</h2>
Writing javascript for node is no different than writing javascript for any other platform (including browsers), so you can really any text editor that supports the javascript syntax. Lately, I have been using Sublime Text 2 thanks to my friend <a href="http://joseoncode.com/" target="_blank">Jose Romaniello</a> and it’s awesome and I can use it in both Windows and Linux!

As for resources for starting to use node these seem to be the best out there:
<ul>
	<li><a href="http://www.nodebeginner.org/">http://www.nodebeginner.org/</a></li>
	<li><a href="http://nodeguide.com/beginner.html">http://nodeguide.com/beginner.html</a></li>
	<li><a href="http://blog.nodejs.org/">http://blog.nodejs.org/</a></li>
	<li><a href="http://howtonode.org/">http://howtonode.org/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>529</wp:post_id>
		<wp:post_date>2012-05-15 22:10:55</wp:post_date>
		<wp:post_date_gmt>2012-05-15 22:10:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[node]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="web-2"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[RiUQ8OlQ7P1T]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[691933697]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>264</wp:comment_id>
			<wp:comment_author><![CDATA[Confluence: Technology]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sso.comvel.de/confluence/display/tech/mail/7635625</wp:comment_author_url>
			<wp:comment_author_IP>46.252.27.238</wp:comment_author_IP>
			<wp:comment_date>2012-07-08 01:57:43</wp:comment_date>
			<wp:comment_date_gmt>2012-07-08 01:57:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>[nodejs] Digest for nodejs@googlegroups.com - 25 Messages in 7 Topics...</strong>

ReturnPath: Received: by 10.42.147.195 with SMTP id o3mr1276281icv.4.1338831605973; Mon, 04 Jun 2012 10:40:05 0700 (PDT) Date: Mon, 04 Jun 2012 17:40:05 0000 From: nodejs@googlegroups.com Sender......]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Getting started with Express for node.js</title>
		<link>http://machadogj.com/2012/05/getting-started-with-express-for-node-js/</link>
		<pubDate>Thu, 24 May 2012 17:25:05 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=550</guid>
		<description></description>
		<content:encoded><![CDATA[Express is an MVC framework built on top of connect that obviously runs on node.js. Express simplifies making websites by adding a series of middleware that will handle the parsing of the requests, the routing, and finally the rendering of the views. I’ll show you how to do your first express.js app which will be extremely easy and simple to do.

First, create a folder for the app, and install the Express module with <a href="http://npmjs.org/" target="_blank">npm</a> like this:

c:\node\testapp&gt;npm intall express

<a href="http://machadogj.com/wp-content/uploads/2012/05/installexpress.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="installexpress" src="http://machadogj.com/wp-content/uploads/2012/05/installexpress_thumb.png" alt="installexpress" width="393" height="228" border="0" /></a>

This will install the express module, and will leave a command line tool that will let us create a simple express app. For executing this command line type the following:

c:\node\testapp&gt;.\node_modules\.bin\express

<a href="http://machadogj.com/wp-content/uploads/2012/05/expresscmd.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="expresscmd" src="http://machadogj.com/wp-content/uploads/2012/05/expresscmd_thumb.png" alt="expresscmd" width="395" height="248" border="0" /></a>

As we can see, express created three folders for us:

Public: these are static files such as .html, .js, .css and images that are considered public and will returned directly if those are requested.

Routes: here is where our controllers will reside. In this folder we will put the scripts that know how to handle requests, and which views to render or which response to send back.

Views: obviously the views are going to be in this folder. Express can handle quite a lot of templating engines which you can choose from. By default Express uses jade (.jade files) which is a very clean and simple syntax.

The other thing that the express command is letting us know, is that we have to run npm tool to update the dependencies. So if we open the package.json we can see that our application right now depends on both Express and Jade:

{
"name": "application-name"
, "version": "0.0.1"
, "private": true
, "dependencies": {
"express": "2.5.8"
, "jade": "&gt;= 0.0.1"
}
}

So let’s run npm to install the necessary dependencies for our app:

c:\node\testapp&gt;npm install

<a href="http://machadogj.com/wp-content/uploads/2012/05/npminstall.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="npminstall" src="http://machadogj.com/wp-content/uploads/2012/05/npminstall_thumb.png" alt="npminstall" width="311" height="228" border="0" /></a>

Let’s run the app so see it in action, and we’ll go through each piece later. Use the following to run the website:

c:\node\testapp&gt;node app.js

<a href="http://machadogj.com/wp-content/uploads/2012/05/nodeapp.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="nodeapp" src="http://machadogj.com/wp-content/uploads/2012/05/nodeapp_thumb.png" alt="nodeapp" width="365" height="39" border="0" /></a>

Now go to <a href="http://localhost:3000">http://localhost:3000</a> in your browser and you’ll see a site with a “Welcome to Express” message. Now let’s see how all this is happening.

Express is built on top of connect.js which allows you to plug middleware in the pipe to handle requests. When you look at the app.js file, you’ll notice two things, one is that it’s using the app.router middleware:

<a href="http://machadogj.com/wp-content/uploads/2012/05/approuter.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="approuter" src="http://machadogj.com/wp-content/uploads/2012/05/approuter_thumb.png" alt="approuter" width="362" height="152" border="0" /></a>

This middleware will allow you to define routes, and specify the functions that will handle that request. The other thing you’ll notice is that after the app is configured, there’s a Routes comment with the following:

<a href="http://machadogj.com/wp-content/uploads/2012/05/routes.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="routes" src="http://machadogj.com/wp-content/uploads/2012/05/routes_thumb.png" alt="routes" width="244" height="66" border="0" /></a>

Which is saying that it will handle requests to “/” with routes.index. The routes as I pointed out before, are stored in the “routes” folder, so if we look at the routes\index.js file we’ll see how that request is being handled.

<a href="http://machadogj.com/wp-content/uploads/2012/05/routeindex.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="routeindex" src="http://machadogj.com/wp-content/uploads/2012/05/routeindex_thumb.png" alt="routeindex" width="244" height="114" border="0" /></a>

Express will figure out which templating engine we are using (Jade in this case), will map the name of the view “index” to the right file, and send back the result of applying that view to the model we passed; which in this case is { title: ‘Express’ }. In our case, the index view is stored in views\index.jade which is using views\layout.jade as the layout (or master page for the ones coming from asp .net). Here’s what it looks like:

<a href="http://machadogj.com/wp-content/uploads/2012/05/indexjade.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="indexjade" src="http://machadogj.com/wp-content/uploads/2012/05/indexjade_thumb.png" alt="indexjade" width="205" height="110" border="0" /></a>

Pretty cool, right?? So that’s it for getting started on using Express.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>550</wp:post_id>
		<wp:post_date>2012-05-24 17:25:05</wp:post_date>
		<wp:post_date_gmt>2012-05-24 17:25:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-started-with-express-for-node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="express"><![CDATA[express]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="mvc"><![CDATA[MVC]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[node]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[node.js]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="category" nicename="web-2"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[9GtV4A2es617]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[702352566]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[MVP Factor]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/b/mvplead/archive/2012/05/29/getting-started-with-express-for-node-js.aspx</wp:comment_author_url>
			<wp:comment_author_IP>65.55.57.68</wp:comment_author_IP>
			<wp:comment_date>2012-05-29 17:12:32</wp:comment_date>
			<wp:comment_date_gmt>2012-05-29 17:12:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Getting started with Express for node.js...</strong>

Nuestro buen amigo Gustavo Machado nos comparte su: Getting started with Express for node.js Express...]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>263</wp:comment_id>
			<wp:comment_author><![CDATA[Confluence: Technology]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sso.comvel.de/confluence/display/tech/mail/7635625</wp:comment_author_url>
			<wp:comment_author_IP>46.252.27.238</wp:comment_author_IP>
			<wp:comment_date>2012-07-08 01:57:07</wp:comment_date>
			<wp:comment_date_gmt>2012-07-08 01:57:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>[nodejs] Digest for nodejs@googlegroups.com - 25 Messages in 7 Topics...</strong>

ReturnPath: Received: by 10.42.147.195 with SMTP id o3mr1276281icv.4.1338831605973; Mon, 04 Jun 2012 10:40:05 0700 (PDT) Date: Mon, 04 Jun 2012 17:40:05 0000 From: nodejs@googlegroups.com Sender......]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Stylus, a better CSS</title>
		<link>http://machadogj.com/2012/05/stylus-a-better-css/</link>
		<pubDate>Sat, 26 May 2012 15:41:18 +0000</pubDate>
		<dc:creator>machadogj</dc:creator>
		<guid isPermaLink="false">http://machadogj.com/?p=565</guid>
		<description></description>
		<content:encoded><![CDATA[There are a lot of wrong things about CSS, but in the there’s been other languages created to empower CSS, and once you get used to any of these there’s no going back. The most common are SASS and LESS which have been around for a while. While these languages are very good (in particular SASS) and they do most of the things that Stylus does, there’s one aspect of CSS that they don’t address by design: the syntax. Both SASS and LESS try to stay as close as CSS original syntax as possible to minimize the impact of having to learn a new language. While this is something positive, in my opinion Stylus approach is much better.

A few of the most cool features these languages provide:
<ul>
	<li>Variables</li>
	<li>Functions</li>
	<li>Nesting rules</li>
</ul>
Stylus not only empowers CSS but it also improves the syntax for much better readability, for example:
<ul>
	<li>Braces are optional.</li>
	<li>Colons to separate property from values are optional.</li>
	<li>Semi colons at the end of lines are optional.</li>
</ul>
Here’s an example of how the style of a vertical menu could look like:

<a href="http://machadogj.com/wp-content/uploads/2012/05/menu.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="menu" src="http://machadogj.com/wp-content/uploads/2012/05/menu_thumb.png" alt="menu" width="252" height="233" border="0" /></a>

Needless to say that this looks clean, simple and concise. As opposed to:

<a href="http://machadogj.com/wp-content/uploads/2012/05/menu-css.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="menu-css" src="http://machadogj.com/wp-content/uploads/2012/05/menu-css_thumb.png" alt="menu-css" width="249" height="303" border="0" /></a>
<h3>Semantic Markup</h3>
For me one of the most important reasons why I wanted to use SASS, LESS (or Stylus in this case), is that it allows you to really start coding html with semantic markup. From wikipedia, semantic markup is:
<blockquote><strong>Semantic HTML</strong> is the use of <a href="http://en.wikipedia.org/wiki/HTML">HTML</a> markup to reinforce the <a href="http://en.wikipedia.org/wiki/Semantics">semantics</a>, or meaning, of the information in webpages rather than merely to define its presentation (look).</blockquote>
This basically means that you can write your html in a way that describes the meaning of what it holds, rather than the style. As an example of this, you won’t need to use classes like “span_12”, “vertical”, “horizontal”, “right”, “left” anymore; all these represent presentational concepts rather than explaining the meaning of the content. Writing html in a semantic way, makes much more sense and allows for safer refactorings and redesigns of your websites.
<h3>Stylus in with Expressjs</h3>
Using stylus with Expressjs could really not be any simpler. All you have to do is add the “stylus” module to the package.json file like this:

<a href="http://machadogj.com/wp-content/uploads/2012/05/package.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="package" src="http://machadogj.com/wp-content/uploads/2012/05/package_thumb.png" alt="package" width="244" height="166" border="0" /></a>

Then, just add the following like of code right before you set up the static middleware for your express application:
<pre class="csharpcode">app.use(require(<span class="str">'stylus'</span>).middleware({ src: __dirname + <span class="str">'/public'</span> }));</pre>
Should look somethig like this:

<a href="http://machadogj.com/wp-content/uploads/2012/05/configure.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="configure" src="http://machadogj.com/wp-content/uploads/2012/05/configure_thumb.png" alt="configure" width="439" height="156" border="0" /></a>

Stylus is smart enough that it will compile the “.styl” files whenever these files change into “.css” files so that from your views you will only have to reference the “.css” file version.

So go ahead and create a “site.styl” file inside of your “stylesheets” folder, and put the following code:
<pre class="csharpcode">body
    body: red</pre>
Now run your node application and browse to <a href="http://localhost:3000/stylesheets/site.css">http://localhost:3000/stylesheets/site.css</a> and you should see something like this:

<a href="http://machadogj.com/wp-content/uploads/2012/05/site.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="site" src="http://machadogj.com/wp-content/uploads/2012/05/site_thumb.png" alt="site" width="244" height="98" border="0" /></a>

Now that we have stylus working let’s do a more realistic scenario.
<h3>Introducing Semantic.gs</h3>
<a href="http://semantic.gs/" target="_blank">Semantic.gs</a> is a grid system which has a version built for stylus that allows you to create all kinds of grid systems and layouts, even fluid, fixed and/or responsive. I like it because it is extremely easy to setup and use. Download the files from the website and copy the grid.styl file that is in the zip file into your “stylesheets” folder (and while you are at it you might as well use the reset.css).

Next, we need to import the grid.styl file into our site.styl file with this line in the top of the file:
<pre class="csharpcode"><span class="preproc">@import</span> grid</pre>
Now let’s see how to work with stylus and semantic.gs to make a fluid layout and semantic markup. One of the ways in which you can tell whether you are being semantic is if you code your markup without worrying about how it will look later. So in my case this is the markup (in jade format) that I really want to have in my page:
<pre class="csharpcode">doctype 5
html
  head
    title= title
    link(rel=<span class="str">'stylesheet'</span>, href=<span class="str">'/stylesheets/site.css'</span>)
  body

    #container
      header
        h1 My Super Layout

      #menu
        ul
          li Home
          li About us
          li Contact us

      #sidebar
        ul
          li Option 1
          li.selected Option 2
          li Option 3

      #content
        body!= body</pre>
So nothing out of the ordinary really, if you want to see what it looks like you can see it <a href="http://machadogj.com/demos/stylus/express.htm" target="_blank">here</a>, just a container with the header, a menu and then a side bar and a content section. Suppose that I would like to have this site in a fluid layout with a maximum width of 960px with a grid system of 12 columns. Using semantic.gs this is extremely simple to do, we already imported the grid.styl, and now we have to specify the amount of columns by setting the following property (which actually is 12 by default):
<pre class="csharpcode">columns = 12</pre>
Now we are going to tell it that we want to be fluid:
<pre class="csharpcode"><span class="rem">/* semantic.gs make the grid fluid */</span>
total-width=100%</pre>
And for having a max width of 960 and the content centered, we’ll apply the following style to the container:
<pre class="csharpcode">#container
    max-width: 960px
    margin-left: auto
    margin-right: auto</pre>
Honestly, it couldn’t be any easier. Now let’s keep on with the rest of the layout. I want the header to occupy the entire width of the layout, so that’s 12 columns in the grid system we chose:
<pre class="csharpcode">header
    column(12)</pre>
So normally, if we would have wanted to do this in plain old CSS, we would have have to add the “header” selector to some rule shared with every other element we wanted to occupy the entire with, and we would end up with a pretty messed up CSS pretty quick.

We want the menu to be horizontal, and to take the entire width so we create a class “horizontal” with the common css for styling horizontal lists, and we extend it with the menu specific properties:
<pre class="csharpcode">.horizontal
    li
        list-style: none outside none
        display: inline
        margin-left: 10px
        padding-left: $padding
        &amp;:first-child
            padding-left: 0
            margin-left: 0

#menu
    column(12)
    ul
        <span class="preproc">@extend</span> .horizontal
        margin: 15px 0px
        li
            border-left: 1px solid grey
            &amp;:first-child
                border-left: 0</pre>
Even when we are using a class that has presentational meaning, we are not touching our markup (which is what we wanted <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://machadogj.com/wp-content/uploads/2012/05/wlEmoticon-smile.png" alt="Smile" />)

Same thing for the Side Bar, except this time, we only want the side bar to occupy a part of the width in our page. How much? Let’s say 3 columns, which leaves us with 9 columns for the actual content of the page. And we want to add an extra rule that says that if the list item is selected, then it should have a red line in the right border. Notice the use of the “&amp;” character in order to access the parent “li” with the extra “selected” class. By doing this the entire style for the side bar resides in one single block of code.
<pre class="csharpcode">.vertical
    li
        list-style: none outside none
        display: block
        margin-bottom: 10px

#sidebar
    column(3)
    ul
        @extend .vertical
        li
            border-bottom: 1px solid grey
            &amp;.selected
                border-right: 3px solid red;

#content
    column(9)</pre>
And in case you were wondering how the entire file looks like here it is (much cleaner and prettier than CSS, LESS or SASS in my opinion):
<pre class="csharpcode"><span class="preproc">@import</span> <span class="str">"reset.css"</span>
<span class="preproc">@import</span> grid

<span class="rem">/* semantic.gs make the grid fluid */</span>
total-width=100%

<span class="rem">/* some common variables */</span>
$font_xl = 36px
$padding = 10px
$theme_color = red

body
    font: 14px <span class="str">"Lucida Grande"</span>, Helvetica, Arial, sans-serif

h1
    font-size: $font_xl
    margin: $padding 0

<span class="rem">/* since it's fluid, let's put a max width and center the content */</span>
#container
    max-width: 960px
    min-height: 480px
    margin-left: auto
    margin-right: auto

header
    column(12)
    border-bottom: 1px solid grey

<span class="rem">/* this can be reused whenever we need a horizontal list */</span>
.horizontal
    li
        list-style: none outside none
        display: inline
        margin-left: 10px
        padding-left: $padding
        &amp;:first-child
            padding-left: 0
            margin-left: 0

#menu
    column(12)
    ul
        <span class="preproc">@extend</span> .horizontal
        margin: 15px 0px
        li
            border-left: 1px solid grey
            &amp;:first-child
                border-left: 0

<span class="rem">/* this can be reused whenever we need a vertical list */</span>
.vertical
    li
        list-style: none outside none
        display: block
        margin-bottom: 10px

<span class="rem">/* between the side bar and the content we should have 12 columns */</span>
#sidebar
    column(3)
    ul
        <span class="preproc">@extend</span> .vertical
        li
            border-bottom: 1px solid grey
            &amp;.selected
                border-right: 3px solid $theme_color

#content
    column(9)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>565</wp:post_id>
		<wp:post_date>2012-05-26 15:41:18</wp:post_date>
		<wp:post_date_gmt>2012-05-26 15:41:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stylus-a-better-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[css]]></category>
		<category domain="post_tag" nicename="jade"><![CDATA[jade]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="post_tag" nicename="less"><![CDATA[less]]></category>
		<category domain="post_tag" nicename="nodejs"><![CDATA[nodejs]]></category>
		<category domain="post_tag" nicename="sass"><![CDATA[sass]]></category>
		<category domain="category" nicename="source-code"><![CDATA[Source Code]]></category>
		<category domain="post_tag" nicename="stylus"><![CDATA[stylus]]></category>
		<category domain="category" nicename="web-2"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[CXa6xcqV3Ps1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[707358948]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>261</wp:comment_id>
			<wp:comment_author><![CDATA[Stylus, a better CSS | MSDN Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://msdnrss.thecoderblogs.com/2012/06/stylus-a-better-css/</wp:comment_author_url>
			<wp:comment_author_IP>65.254.224.36</wp:comment_author_IP>
			<wp:comment_date>2012-06-06 05:59:30</wp:comment_date>
			<wp:comment_date_gmt>2012-06-06 05:59:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Stylus, a better CSS [...] ]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
